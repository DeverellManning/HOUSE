This is mbfl.info, produced by makeinfo version 6.5 from mbfl.texi.

This document describes version 3.0.0-devel.0 of MBFL, a library of
functions for the GNU Bash shell.  It requires Bash at least version
4.3.  The package is distributed under the terms of the GNU Lesser
General Public License (LGPL).

   The latest release can be downloaded from:

           <https://bitbucket.org/marcomaggi/mbfl/downloads>

development takes place at:

                 <https://github.com/marcomaggi/mbfl>

and as backup at:

                <https://bitbucket.org/marcomaggi/mbfl>

Copyright (C) 2003-2005, 2009-2010, 2012-2015, 2017-2018 by Marco Maggi
<marco.maggi-ipsu@poste.it>

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with Invariant Sections being "GNU Free Documentation
     License" and "GNU Lesser General Public License", no Front-Cover
     Texts, and no Back-Cover Texts.  A copy of the license is included
     in the section entitled "GNU Free Documentation License".
INFO-DIR-SECTION Development
START-INFO-DIR-ENTRY
* mbfl: (mbfl).                 Marco's Bash Functions Library.
END-INFO-DIR-ENTRY


File: mbfl.info,  Node: Top,  Next: overview,  Up: (dir)

Marco's Bash Functions Library
******************************

This document describes version 3.0.0-devel.0 of MBFL, a library of
functions for the GNU Bash shell.  It requires Bash at least version
4.3.  The package is distributed under the terms of the GNU Lesser
General Public License (LGPL).

   The latest release can be downloaded from:

           <https://bitbucket.org/marcomaggi/mbfl/downloads>

development takes place at:

                 <https://github.com/marcomaggi/mbfl>

and as backup at:

                <https://bitbucket.org/marcomaggi/mbfl>

Copyright (C) 2003-2005, 2009-2010, 2012-2015, 2017-2018 by Marco Maggi
<marco.maggi-ipsu@poste.it>

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with Invariant Sections being "GNU Free Documentation
     License" and "GNU Lesser General Public License", no Front-Cover
     Texts, and no Back-Cover Texts.  A copy of the license is included
     in the section entitled "GNU Free Documentation License".

* Menu:

* overview::                    Overview of the package.
* preprocessor::                Using the script preprocessor.
* service variables::           Required user defined variables.
* base::                        Some base functions.
* encoding::                    Encoding and decoding strings.
* file::                        Manipulating files and pathnames.
* fd::                          Handling file descriptors.
* actions::                     Selecting actions to perform.
* getopts::                     Parsing command line options.
* message::                     Printing messages to the console.
* program::                     Using external programs.
* interfaces::                  Interfaces to external programs.
* signal::                      Catching signals.
* strings::                     Manipulating strings.
* dialog::                      Interacting with the user.
* times::                       Times and dates.
* variables::                   Manipulating variables.
* arrays::                      Manipulating arrays.
* system::                      Interfacing with the system.
* atexit::                      Running scripts at exit-time.
* locations::                   Running location handlers.
* main::                        Main function.
* testing::                     Building test suites.

Appendices

* sendmail::                    Examples for sending email.
* Package License::             GNU Lesser General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.


File: mbfl.info,  Node: overview,  Next: preprocessor,  Prev: Top,  Up: Top

1 Overview of the package
*************************

This document describes version 3.0.0-devel.0 of MBFL, a library of
functions for the GNU Bash shell.  This package is an attempt to make
GNU Bash a viable solution for medium sized scripts; it needs at least
Bash version 4.3.  A set of modules implementing common operations and a
script template are offered by this package and the author has used them
with success in implementing non-small scripts.

   The philosophy of MBFL is to do the work as much as possible without
external commands.  For example: string manipulation is done using the
special variable substitution provided by Bash, and no use is done of
utilities like 'sed', 'grep' and 'ed'.

   The library is better used starting from the template scripts in the
'examples/' subdirectory of the distribution, especially 'template.sh'
and 'template-actions.sh'.  This is because, with MBFL, some choices are
made to reduce the application-dependent part of the script to the
smallest dimension; if we follow another schema, MBFL modules may be
inadequate.  This is especially true for the options parsing module.

   Starting with version 3: this package installs files under
directories *without* the version part.  If we desire to install
multiple versions of the package: we should install under
'/opt/mbfl/$(VERSION)', by using the appropriate command line option at
configuration time:

     $ ./configure \
           --prefix=/opt/mbfl/3.0.0 \
           --libdir=/opt/mbfl/3.0.0/lib64

* Menu:

* overview quick::              Quick run-time loading.
* overview reliable::           Reliable run-time loading.
* overview direct::             Direct inclusion.
* overview interactive::        Using the library interactively.
* overview rv::                 Result variables.
* overview notes::              Miscellaneous notes.


File: mbfl.info,  Node: overview quick,  Next: overview reliable,  Up: overview

1.1 Quick run-time loading
==========================

The easiest way to use the library is to include at run-time the library
file 'libmbfl.sh' in the script.  To do it, we install the package on
the system and use this code in the scripts:

     source "${MBFL_LIBRARY:=$(type -p mbfl-config &>/dev/null \
        && mbfl-config)}"

after the service variables have been declared.  *note Required user
defined variables: service variables.

   This code will read the full pathname of the library from the
environment variable 'MBFL_LIBRARY'; if this variable is not set: the
script 'mbfl-config' is invoked with no arguments to acquire the
pathname.  'mbfl-config' is installed by the package in the '$(bindir)'
directory, which we must include in the 'PATH' environment variable.


File: mbfl.info,  Node: overview reliable,  Next: overview direct,  Prev: overview quick,  Up: overview

1.2 Reliable run-time loading
=============================

A more reliable way to load the library is:

     declare mbfl_INTERACTIVE=no
     declare mbfl_LOADED=no
     declare mbfl_HARDCODED=
     declare mbfl_INSTALLED=$(type -p mbfl-config &>/dev/null && mbfl-config) &>/dev/null
     
     declare item
     for item in "$MBFL_LIBRARY" "$mbfl_HARDCODED" "$mbfl_INSTALLED"
     do
         if test -n "$item" -a -f "$item" -a -r "$item"
         then
             if source "$item" &>/dev/null
             then
     	    declare -r mbfl_LOADED_LIBRARY=$item
     	    break
             else
                 printf '%s error: loading MBFL file "%s"\n' "$script_PROGNAME" "$item" >&2
                 exit 100
             fi
         fi
     done
     unset -v item
     if test "$mbfl_LOADED" != yes
     then
         printf '%s error: incorrect evaluation of MBFL\n' "$script_PROGNAME" >&2
         exit 100
     fi

where the value of 'mbfl_HARDCODED' can be the pathname of a known
location in which to find the library.  This code:

  1. Looks for the pathname in the 'MBFL_LIBRARY' variable, to allow us
     to explicitly select the file from the command line; example:

          $ MBFL_LIBRARY=/path/to/libmbfl.sh script.sh

  2. Looks in some known directory; for example a subdirectory of a
     software package that we have distributed.

  3. As a last resort tries to evaluate the 'mbfl-config' script to pick
     up a library installed on the system.

   We see that the output of the 'source' command is discarded: this is
because we assume that:

   * If an error occurs evaluating the library a lot of error messages
     may fill the screen, confusing the user; we just want a single
     error message pointing the finger of blame.

   * An error in the evaluation of the library code can be replicated
     because the evaluation does not heavily depend on the environment,
     so we can track down library errors later.

   This code is included in the MBFL distribution in the
'src/lib/loader.sh' file; we can also automatically include it in a
script with the preprocessor macro 'mbfl_library_loader'.


File: mbfl.info,  Node: overview direct,  Next: overview interactive,  Prev: overview reliable,  Up: overview

1.3 Direct inclusion
====================

Another solution is to directly include the library in the script; this
is easy if we preprocess our scripts with GNU 'm4'.  We only need to put
the following in the script:

     m4_include(libmbfl.sh)

then preprocess the script with:

     $ m4 --prefix-builtins --include=/path/to/library \
              script.sh.m4 >script.sh

easy to do in a 'Makefile'.  The installation directory pathname of the
library ('/path/to/library' in the example) is the output of
'mbfl-config --libpath'.

   It is also interesting to process the script with the following rule
of GNU Make: assuming that the source scripts are in the 'src/modules'
directory of the source tree:

     vpath	%.sh.m4		$(srcdir)/src/modules

     M4      = ...
     M4FLAGS = --prefix-builtins --include=/path/to/library

     %.sh: %.sh.m4
             $(M4) $(M4FLAGS) $(<) | \
             grep --invert-match -e '^#' -e '^$$' | \
             sed -e "s/^ \\+//" >$(@)

this will remove all the comments and blank lines, decreasing the size
of the script significantly if one makes use of verbose comments; note
that this will wipe out the '#!/bin/bash' first line, too.

   Usually we want the script to begin with '#!/bin/bash' followed by a
comment describing the license terms.  We can do it by preparing a
script like the following:

     #!/bin/bash
     # ... license ...

     m4_include(realscript.sh)

     ### end of file

and processing it with the following makefile rule:

     M4      = ...
     M4FLAGS = --prefix-builtins --include=/path/to/library

     script.sh: script.sh.m4 realscript.sh
             $(M4) $(M4FLAGS) $(<) >$(@)

'realscript.sh' can be processed as explained above.

   At this point, though, it is better to use the MBFL preprocessor.
*note Using the script preprocessor: preprocessor.


File: mbfl.info,  Node: overview interactive,  Next: overview rv,  Prev: overview direct,  Up: overview

1.4 Using the library interactively
===================================

It is possible, but not recommended, to source the library in an
interactive shell, though some modules must be disabled.  The purpose of
interactive loading is only to test and debug the functions by hand.

   To do this execute the following code in the shell before sourcing
the library:

     mbfl_INTERACTIVE=yes

without exporting the variable.  The "dangerous" blocks of code in the
library are surrounded by:

     if test "$mbfl_INTERACTIVE" != 'yes'
     then
         ...
     fi

so they are not executed.  Disabled modules are: main, actions, getopts,
signal; "disabled" does not mean that the functions are not there: only
the global variable declarations are excluded; this is a little dirty,
but, at present, it should work.


File: mbfl.info,  Node: overview rv,  Next: overview notes,  Prev: overview interactive,  Up: overview

1.5 Result variables
====================

Some functions have a '_var' variant; for example, two functions exists
to extract the filename extension:

     mbfl_file_extension
     mbfl_file_extension_var

the first variant will print the result to stdout, while the '_var'
variant will store the result in a "result variable" whose name is
handed to it as first argument; this mechanism is built using the 'local
-n' feature of Bash.  Example:

     mbfl_file_extension /path/to/file.ext
     -| ext

     local _RV
     mbfl_file_extension_var _RV /path/to/file.ext
     "$_RV"  => ext

   The '_var' variants are often a bit faster because the output variant
is often a wrapper for the '_var' variant.

Dangers of result variables
...........................

*We must be careful when using this feature!*  Let's consider this
script:

     function main () {
         local -i X=0
         mbfl_func X
         echo X=$X >&2
     }
     function mbfl_func () {
         local -n Y=${1:?}
         Y=1
     }

     main

everything is fine: the script will print 'X=1' because the call to
'mbfl_func' will mutate the variable 'X' in its execution environment,
and such variable happens to be defined in the scope of 'main'.

   Now let's consider this script:

     function main () {
         local -i X=0
         mbfl_func X
         echo X=$X >&2
     }
     function mbfl_func () {
         local -n Y=${1:?}
         local X
         Y=1
     }

     main

it will print 'X=0' because 'mbfl_func' accesses the variable 'X' in its
execution environment, and such variable is defined by 'mbfl_func'
itself; the local definition of 'X' shadows the upper level definition.

   There is no true escape from this problem!  There is no definitive
way to avoid "fishing" a local variable in a lower function from an
upper function.  MBFL attempts to mitigate the problem by prefixing its
variables with 'mbfl_' when a function uses reference variables.  We
should also prefix our "result variables", for example with a leading or
trailing underscore: MBFL never uses such a prefix or suffix.

   So we should write the script as follows:

     function main () {
         local -i _X=0
         mbfl_func _X
         echo _X=$_X >&2
     }
     function mbfl_func () {
         local -n mbfl_Y=${1:?}
         local mbfl_X
         mbfl_Y=1
     }

     main

Using the preprocessor
......................

MBFL's preprocessor has facilities to help us create variables with
unique names that we can safely use as argument to functions, *note
Using the script preprocessor: preprocessor.

   With these facilities, the first example should be written as:

     mbfl_local_varref(RV)

     mbfl_file_extension_var mbfl_datavar(RV) /path/to/file.ext
     "$RV"  => ext

and the demo script as:

     function main () {
         mbfl_local_varref(X, 0, -i)
         mbfl_func mbfl_datavar(X)
         echo X=$X >&2
     }
     function mbfl_func () {
         local -n Y=${1:?}
         Y=1
     }

     main

   Using such preprocessor facilities consumes some computation time;
they should be used when we do not care about execution time and when
such time is significantly less than running a subshell.  Otherwise we
should just run the functions in a subshell:

     RESULT=$(mbfl_file_extension /path/to/file.ext)

     "$RESULT" => ext


File: mbfl.info,  Node: overview notes,  Prev: overview rv,  Up: overview

1.6 Notes
=========

When using MBFL we want to be aware of the following:

   * When in doubt about some functions work: we should take a look at
     the source code.  When doing this we must remember that: there is
     no word splitting when performing variable assignment; so there is
     no need to use double quotes in the following cases:

          alpha=$beta
          alpha=${beta:1:3}
          alpha=${beta:-$gamma}
          alpha=${#beta}

     There is also no word splitting when evaluating the WORD in the
     'case' statement; so there is no need to use double quotes in the
     following case:

          case $WORD in
            ...
          esac

   * Some functions take a variable name as argument and store in the
     referenced variable some value; to avoid name collision: select a
     name that starts with 'p_'.  It is guaranteed that MBFL never uses
     variables with name starting with such a prefix.

   * The 'read' built in does word splitting on the text it reads, even
     when there is a single output variable.  We can verify it with:

          printf '\tciao\n' | {
              read line
              echo line was "'$line'"
          }
          -| line was 'ciao'

     we see that the initial tabulation character has been stripped,
     because it is a character in the default value of 'IFS'.  Word
     splitting does not happen when we set 'IFS' to the empty string:

          printf '\tciao\n' | {
              IFS= read line
              echo line was "'$line'"
          }
          -| line was '        ciao'

     To avoid the mutation of text read with 'read', MBFL always sets
     'IFS' to the empty string in the environment in which 'read' is
     evaluated.  This happens in functions like 'mbfl_read_maybe_null()'
     and 'mbfl_dialog_ask_password()'; notice, though, that these
     functions *do not* mutate the 'IFS' value in the environment of the
     caller.


File: mbfl.info,  Node: preprocessor,  Next: service variables,  Prev: overview,  Up: Top

2 Using the script preprocessor
*******************************

The MBFL script preprocessor is a command line program named
'mbflpp.sh'; it is itself a Bash script that makes use of the MBFL
library.  It can remove comments, blank lines, blank characters at the
beginning of lines, and it can expand macros.

   The macro preprocessing is done with the GNU 'm4' program, using a
library of macros called 'preprocessor.m4' which is installed on the
system with the MBFL package.

   The use of the preprocessor is fully optional: every feature of the
MBFL library can be used without the preprocessor.

* Menu:

* preprocessor invoking::       Invoking the preprocessor.
* preprocessor quoting::        Quotes and quoted macro names.
* preprocessor defines::        Predefined symbols.
* preprocessor library::        Loading or including the library.
* preprocessor parameters::     Function parameters handling.
* preprocessor arguments::      Script arguments handling.
* preprocessor nameref::        Variable name references.
* preprocessor strings::        Manipulating strings with macros.
* preprocessor arrays::         Manipulating arrays with macros.


File: mbfl.info,  Node: preprocessor invoking,  Next: preprocessor quoting,  Up: preprocessor

2.1 Invoking the preprocessor
=============================

The basic synopsis is:

     mbflpp.sh [options] <INFILE >OUTFILE
     mbflpp.sh [options] --outfile=OUTFILE [--] INFILE1 INFILE2 ...

all the 'INFILE' pathnames are interpreted as files to concatenate in
the specified order.

   All the MBFL built in command line options are available,
additionally the following options are supported.

'--preserve-comments'
     Do not filter out comments.

'--add-bash'
     Add '#!$BASH' at the beginning of the output, where 'BASH' is the
     built-in variable of Bash, *note BASH: (bash)Bash Variables.

'--bash-program=BASH'
     Select the absolute file pathname of the Bash executable to use
     when the '--add-bash' is used.  It defaults to the Bash used to run
     the preprocessor script itself.

'-DNAME[=VALUE]'
'--define=NAME[=VALUE]'
     Define a new symbol ('m4' syntax).  This is equivalent to the
     '--define' option of 'm4'.

'-IVALUE'
'--include=VALUE'
     Add a search path for files.  'VALUE' must be a directory pathname
     and it is handed to 'm4' to search for macro files.  We can use
     this option multiple times.

'--library=VALUE'
     Include an 'm4' library.  'VALUE' must be the name of an 'm4' macro
     file which is evaluated before the input files.

'-oVALUE'
'--output=VALUE'
     Select an output file, '-' for stdout.

'-e'
'--eval'
     Send the result of preprocessing to 'bash', rather than print it.

'--no-prepro'
     Do not load the installed preprocessor's macros library.  If we use
     this option: we are meant to use the option '--library' to load a
     replacement macros library from a known location.


File: mbfl.info,  Node: preprocessor quoting,  Next: preprocessor defines,  Prev: preprocessor invoking,  Up: preprocessor

2.2 Quotes and quoted macro names
=================================

The 'm4' preprocessor is invoked by 'mbflpp.sh' with the
'--prefix-builtins' option; so all the 'm4' built in macros and
directives are available prefixed with 'm4_'.

   The quoting for the preprocessor is changed with:

     m4_changequote(`[[[', `]]]')


File: mbfl.info,  Node: preprocessor defines,  Next: preprocessor library,  Prev: preprocessor quoting,  Up: preprocessor

2.3 Predefined symbols
======================

The preprocessor predefines the following symbols.

 -- Preprocessor Macro: __PACKAGE_VERSION__
     Expands into the version number of this package.

 -- Preprocessor Macro: __PACKAGE_DATADIR__
     Expands into the absolute pathname of the directory under which the
     MBFL library is installed.  For example:

          /usr/local/share/mbfl

 -- Preprocessor Macro: __MBFL_LIBRARY__
     Expands into the absolute pathname of the MBFL library file.  For
     example:

          /usr/local/share/mbfl/libmbfl.sh


File: mbfl.info,  Node: preprocessor library,  Next: preprocessor parameters,  Prev: preprocessor defines,  Up: preprocessor

2.4 Loading or including the library
====================================

We can include in scripts the code needed to source the library at
run-time or the whole library itself.

 -- Preprocessor Macro: mbfl_embed_library
     Expands into the contents of the library file.  The selected
     library is the one used by the preprocessor script 'mbflpp.sh'
     itself.  The resulting output script does not need to load the
     library at runtime; let's say it is "statically linked".

 -- Preprocessor Macro: mbfl_library_loader (HARDCODED_PATHNAME)
     Expand to a block of code that reliably loads the MBFL library.
     The optional argument HARDCODED_PATHNAME must be the absolute
     pathname to a file containing the library itself.  *note overview
     reliable:: for details.


File: mbfl.info,  Node: preprocessor parameters,  Next: preprocessor arguments,  Prev: preprocessor library,  Up: preprocessor

2.5 Function parameters handling
================================

 -- Preprocessor Macro: mbfl_mandatory_parameter VARNAME NUMBER
          DESCRIPTION
     Define a variable local to a shell function holding an argument to
     the function.  VARNAME is the name of the variable; NUMBER is the
     positional parameter number; DESCRIPTION is a description of the
     argument.

     Example, the following:

          mbfl_mandatory_parameter(PATHNAME, 2, file pathname)

     is expanded to:

          local PATHNAME=${2:?"missing file pathname parameter to '$FUNCNAME'"}

     Another example the following function:

          function message () {
            mbfl_mandatory_parameter(PROGNAME, 1, program name)
            mbfl_mandatory_parameter(STRING,   2, message string)

            printf '%s: %s\n' "$PROGNAME" "$STRING"
          }

     is expanded to:

          function message () {
            local PROGNAME=${1:?"missing program name parameter to '$FUNCNAME'"}
            local STRING=${2:?"missing message string parameter to '$FUNCNAME'"}

            printf '%s: %s\n' "$PROGNAME" "$STRING"
          }

     and so it is a function with two mandatory parameters.

 -- Preprocessor Macro: mbfl_mandatory_nameref_parameter NAME NUMBER
          DESCRIPTION
     Similar to 'mbfl_mandatory_parameter()' but use the '-n' attribute
     when declaring the variable.  This makes the new variable a NAMEREF
     for the given variable name; *note Shell Parameters: (bash)Shell
     Parameters.

     A use of this macro roughly expands into:

          local mbfl_a_variable_NAME=${NUMBER:?}
          local -n NAME=$mbfl_a_variable_NAME

     where the _proxy variable_ NAME is defined as an alias of the _data
     variable_, whose name is stored in the numeric parameter; the
     additional _name variable_ 'mbfl_a_variable_NAME' holds the name of
     the _data variable_.  We can use the macro 'mbfl_datavar()' to
     retrieve the name of the data variable.

 -- Preprocessor Macro: mbfl_mandatory_integer_parameter VARNAME NUMBER
          DESCRIPTION
     Like 'mbfl_mandatory_parameter()' but use the '-i' attribute when
     declaring the variable.  This assigns the integer attribute to the
     variable; *note Bash Builtins: (bash)Bash Builtins.

 -- Preprocessor Macro: mbfl_optional_parameter VARNAME NUMBER
 -- Preprocessor Macro: mbfl_optional_parameter VARNAME NUMBER
          DEFAULT_VALUE
     Define a variable local to a shell function holding an argument to
     the function.

     The argument VARNAME is the name of the variable.  The argument
     NUMBER is the positional parameter number.  The argument
     DEFAULT_VALUE is the initialisation value for the variable if the
     argument is not used; when DEFAULT_VALUE is not present: the
     variable is left empty.

     Example, the following:

          mbfl_optional_parameter(COUNT, 2, 123)

     is expanded to:

          local COUNT=${2:-123}"

     and the following:

          mbfl_optional_parameter(COUNT, 2)

     is expanded to:

          local COUNT=${2:-}"

 -- Preprocessor Macro: mbfl_optional_integer_parameter VARNAME NUMBER
 -- Preprocessor Macro: mbfl_optional_integer_parameter VARNAME NUMBER
          DEFAULT_VALUE
     Like 'mbfl_optional_parameter()' but use the '-i' attribute when
     declaring the variable; this assigns the integer attribute to the
     variable; *note Bash Builtins: (bash)Bash Builtins.

     *NOTE* When the default value is missing: Bash automatically sets
     the variable to zero!


File: mbfl.info,  Node: preprocessor arguments,  Next: preprocessor nameref,  Prev: preprocessor parameters,  Up: preprocessor

2.6 Script arguments handling
=============================

 -- Preprocessor Macro: mbfl_command_line_argument VARNAME ARGINDEX
     Define a variable local to a shell function holding an argument to
     the script.  VARNAME is the variable name, ARGINDEX is the argument
     index in the 'ARGV' array.

     Example, the following:

          mbfl_command_line_argument(PATHNAME,3)

     is expanded to:

          local PATHNAME=${ARGV[3]}


File: mbfl.info,  Node: preprocessor nameref,  Next: preprocessor strings,  Prev: preprocessor arguments,  Up: preprocessor

2.7 Variable name references
============================

The preprocessor implements facilities to declare variables with unique
names and use them as target for variables with the NAMEREF attribute.
With these facilities we can use the '_var' variants of MBFL functions
as follows:

     mbfl_local_varref(RV)

     mbfl_file_extension_var mbfl_datavar(RV) /path/to/file.ext
     "$RV"  => ext

without risking a variable name collision.  In this example, the use of
'mbfl_local_varref()' expands into:

     local mbfl_a_variable_RV
     mbfl_variable_alloc mbfl_a_variable_RV
     local $mbfl_a_variable_RV
     local -n RV=$mbfl_a_variable_RV

a local "name variable" 'mbfl_a_variable_RV' is declared and filled with
a unique "data variable" name by 'mbfl_variable_alloc()'; then the "data
variable" is declared as local; finally a "proxy variable" 'RV' is
defined as alias for the "data variable".

   Given a "proxy variable" name defined this way: we can retrieve its
"name variable" name with the macro 'mbfl_namevar()'; we can retrieve
its "data variable" name with the macro 'mbfl_datavar()'.

   Other macros declare variables similarly, using the same scheme of 3
variable declarations: name variable, data variable, proxy variable.

* Menu:

* preprocessor nameref access::   Variables accessors.
* preprocessor nameref full::     Full NAMEREF declarations.
* preprocessor nameref partial::  Partial NAMEREF declarations.
* preprocessor nameref special::  Special NAMEREF declarations.
* preprocessor nameref unset::    Unsetting NAMEREF declarations.


File: mbfl.info,  Node: preprocessor nameref access,  Next: preprocessor nameref full,  Up: preprocessor nameref

2.7.1 Variables accessors
-------------------------

 -- Preprocessor Macro: mbfl_namevar (NAME)
     The argument NAME must be the name of a proxy variable.  Uses of
     this macro expand into:

          mbfl_a_variable_NAME

     Given the name of a _proxy variable_: expand into the name of the
     _name variable_.

 -- Preprocessor Macro: mbfl_datavar (NAME)
     The argument NAME must be the name of a proxy variable.  Uses of
     this macro expand into:

          $mbfl_a_variable_NAME

     Given the name of a _proxy variable_: expand into code that,
     executed at run-time, returns the name of the _data variable_.


File: mbfl.info,  Node: preprocessor nameref full,  Next: preprocessor nameref partial,  Prev: preprocessor nameref access,  Up: preprocessor nameref

2.7.2 Full NAMEREF declarations
-------------------------------

When defining array variables we must use the specific macros, rather
than the ones below; *note Special NAMEREF declarations: preprocessor
nameref special.

 -- Preprocessor Macro: mbfl_local_varref (NAME, INIT_VALUE,
          LOCAL_OPTIONS)
     Expands into:

          local mbfl_a_variable_NAME
          mbfl_variable_alloc mbfl_a_variable_NAME
          local LOCAL_OPTIONS $mbfl_a_variable_NAME
          local -n NAME=$mbfl_a_variable_NAME

     and when INIT_VALUE is *not* empty, it finishes with:

          NAME=INIT_VALUE

     A local "name variable" 'mbfl_a_variable_NAME' is declared and
     filled with a unique "data variable" name by
     'mbfl_variable_alloc()'; then the "data variable" is declared as
     local; finally a "proxy variable" 'NAME' is defined as alias for
     the "data variable".

     The data variable is given the LOCAL_OPTIONS.

 -- Preprocessor Macro: mbfl_global_varref (NAME, INIT_VALUE,
          DECLARE_OPTIONS)
     Expands into:

          local mbfl_a_variable_NAME
          mbfl_variable_alloc mbfl_a_variable_NAME
          declare -g DECLARE_OPTIONS $mbfl_a_variable_NAME
          local -n NAME=$mbfl_a_variable_NAME

     and when INIT_VALUE is *not* empty, it finishes with:

          NAME=INIT_VALUE

     A local "name variable" 'mbfl_a_variable_NAME' is declared and
     filled with a unique "data variable" name by
     'mbfl_variable_alloc()'; then the "data variable" is declared as
     global; finally a "proxy variable" 'NAME' is defined as alias for
     the "data variable".

     The data variable is given the DECLARE_OPTIONS.

   When we have finished using a global varref set of variables, we must
unset the global _data variable_; we can do it as follows:

     function main () {
         mbfl_global_varref(VAR)

         mbfl_location_enter
         {
             mbfl_location_handler "unset -v mbfl_datavar(VAR)"

             # Do something here with VAR.
             ...
         }
         mbfl_location_leave
     }


File: mbfl.info,  Node: preprocessor nameref partial,  Next: preprocessor nameref special,  Prev: preprocessor nameref full,  Up: preprocessor nameref

2.7.3 Partial NAMEREF declarations
----------------------------------

 -- Preprocessor Macro: mbfl_local_nameref (NAME, DATA_VARNAME_EXPR)
     It expands into:

          local mbfl_a_variable_NAME=DATA_VARNAME_EXPR
          local -n NAME=$mbfl_a_variable_NAME

     Declare a proxy variable NAME aliasing the data variable whose
     value is the result of evaluating DATA_VARNAME_EXPR.

     We can use this macro as follows:

          function main () {
              local VARNAME
              worker VARNAME
              mbfl_local_nameref(VAR, $VARNAME)
              ...
          }

          function worker () {
              mbfl_mandatory_nameref_parameter(RV, 1)
              mbfl_global_varref(VAR, 123)
              RV=mbfl_datavar(VAR)
          }

          main


File: mbfl.info,  Node: preprocessor nameref special,  Next: preprocessor nameref unset,  Prev: preprocessor nameref partial,  Up: preprocessor nameref

2.7.4 Special NAMEREF declarations
----------------------------------

 -- Preprocessor Macro: mbfl_local_index_array_varref (NAME, INIT_VALUE,
          LOCAL_OPTIONS)
     Like 'mbfl_local_varref()' but always include the '-a' option to
     the 'local' definition of the data variable.  This makes the data
     variable an indexed array.

 -- Preprocessor Macro: mbfl_local_assoc_array_varref (NAME, INIT_VALUE,
          LOCAL_OPTIONS)
     Like 'mbfl_local_varref()' but always include the '-A' option to
     the 'local' definition of the data variable.  This makes the data
     variable an associative array.

 -- Preprocessor Macro: mbfl_global_index_array_varref (NAME,
          INIT_VALUE, DECLARE_OPTIONS)
     Like 'mbfl_global_varref()' but always include the '-a' option to
     the 'declare' definition of the data variable.  This makes the data
     variable an indexed array.

 -- Preprocessor Macro: mbfl_global_assoc_array_varref (NAME,
          INIT_VALUE, DECLARE_OPTIONS)
     Like 'mbfl_global_varref()' but always include the '-A' option to
     the 'declare' definition of the data variable.  This makes the data
     variable an associative array.


File: mbfl.info,  Node: preprocessor nameref unset,  Prev: preprocessor nameref special,  Up: preprocessor nameref

2.7.5 Unsetting NAMEREF declarations
------------------------------------

 -- Preprocessor Macro: mbfl_unset_varref (NAME)
     The argument NAME must be the first argument to a previous call to
     'mbfl_local_varref()' or 'mbfl_global_varref()'.  Expand into:

          unset -v $mbfl_a_variable_NAME
          unset -v mbfl_a_variable_NAME
          unset -v -n NAME
          unset -v NAME

     Unset all the _proxy variable_ NAME and all the variables
     associated to it.


File: mbfl.info,  Node: preprocessor strings,  Next: preprocessor arrays,  Prev: preprocessor nameref,  Up: preprocessor

2.8 Manipulating strings with macros
====================================

 -- Preprocessor Macros: mbfl_string_len (VAR)
     Expands into the expression:

          ${#VAR}

     which evaluates to the number of characters in the string in the
     variable VAR.

 -- Preprocessor Macros: mbfl_string_idx (VAR, EXPR)
     Expands into the expression:

          ${VAR:EXPR:1}

     which evaluates to the character at index EXPR in the string in the
     variable VAR.


File: mbfl.info,  Node: preprocessor arrays,  Prev: preprocessor strings,  Up: preprocessor

2.9 Manipulating arrays with macros
===================================

 -- Preprocessor Macros: mbfl_slot_ref (VAR, KEY)
     Expands into the expression:

          ${VAR[KEY]}

     which evaluates to the value of the slot KEY in the array variable
     VAR.  This macro works with both indexed and associative arrays.

 -- Preprocessor Macros: mbfl_slot_set (VAR, KEY, EXPR)
     Expands into the expression:

          VAR[KEY]=EXPR

     which stores the value of EXPR in the slot KEY of the array
     variable VAR.  This macro works with both indexed and associative
     arrays.


File: mbfl.info,  Node: service variables,  Next: base,  Prev: preprocessor,  Up: Top

3 Required user defined variables
*********************************

The following variables are expected to be defined before the MBFL code
is evaluated.  They are used by MBFL to compute values for its own
variables.

 -- Variable: script_PROGNAME
     The name of the script.  It is used, for example, in error and
     verbose messages.

 -- Variable: script_AUTHOR
     The name of the script author(s).  It is used in copyright
     statements.

 -- Variable: script_COPYRIGHT_YEARS
     A comma separated list of years of copyright.  It is used in
     copyright statements.

 -- Variable: script_VERSION
     The version number of the script.  It is used in copyright
     statements and it can be directly queried using the command line
     options '--version' and '--version-only'.

 -- Variable: script_LICENSE
     The identifier of the license under which the script is released.
     Accepted values are: 'GPL' or 'GPL2', 'GPL3', 'LGPL' or 'LGPL2',
     'LGPL3', 'BSD', 'liberal'.  It is used to select the appropriate
     value to be displayed when the user of the script selects the
     '--license' option.  *note Predefined options: getopts options.

 -- Variable: script_USAGE
     Must be a string, of one or more lines, describing the synopsis of
     the program.  It is usually something like:

          script_USAGE="usage: ${script_PROGNAME} [options] ..."

     if the script accepts either input from the stdin channel and input
     from a selected file, it is useful to present both cases:

          script_USAGE="usage: ${script_PROGNAME} [options] <INPUT-FILE
          usage: ${script_PROGNAME} [options] INPUT-FILE"

     If the script defines multiple actions: it is better to define a
     synopsis description for every supported action, by setting this
     variable in the action-specific "before parsing options" function.
     *note actions:: for details.

 -- Variable: script_DESCRIPTION
     One line string providing a brief description of the program.  It
     is used in the help screen (the one echoed when the '--help' option
     is used) right after the content of 'script_USAGE'.

     If the script defines multiple actions: it is better to define a
     usage description for every supported action, by setting this
     variable in the action-specific "before parsing options" function.
     *note actions:: for details.

 -- Variable: script_EXAMPLES
     One or more lines of text to be displayed at the end of the help
     screen, after the options description.  It should contain examples
     of common invocations for the script.

     If the script defines multiple actions: it is better to define a
     set of examples description for every supported action, by setting
     this variable in the action-specific "before parsing options"
     function.  *note actions:: for details.

   All the text in these variables is used as argument to the 'printf'
built-in command; in particular: 'script_DESCRIPTION' and
'script_EXAMPLES' are used as first argument to 'printf', so the escape
sequences (in particular '\t' and '\n') are expanded.

Examples
........

The following example shows how to declare the variables.

     script_PROGNAME=myscript.sh
     script_AUTHOR='Marco Maggi and Marco Maggi'
     script_COPYRIGHT_YEARS='2002, 2003, 2004'
     script_VERSION=1.0
     script_LICENSE=GPL3
     script_USAGE="usage: $script_PROGNAME [options] ..."
     script_DESCRIPTION='Does this and that.'
     script_EXAMPLES='Examples:

     \tmyscript.sh --do-something arg arg ...
     \tmyscript.sh --do-other arg arg ...'

   Notice that 'script_DESCRIPTION' and 'script_EXAMPLES' *do not* end
with a newline character.


File: mbfl.info,  Node: base,  Next: encoding,  Prev: service variables,  Up: Top

4 Some base functions
*********************

 -- Function: mbfl_set_maybe NAME VALUE
     Set a variable named NAME to VALUE, but only if NAME is not the
     empty string; if VALUE is the empty string: the old value of NAME
     is left untouched.

 -- Function: mbfl_read_maybe_null VARNAME
     Read a line from its stdin and store it in a variable named
     VARNAME.  If 'mbfl_option_null()' returns true: the null character
     is used as terminator, as in:

          IFS= read -d $'\x00'


File: mbfl.info,  Node: encoding,  Next: file,  Prev: base,  Up: Top

5 Encoding and decoding strings
*******************************

The purpose of this module is to let an external process invoke a Bash
script with _damned_ command line arguments: strings including blanks or
strange characters that may trigger quoting rules.  This problem can
arise when using scripting languages with some sort of 'eval' command.

   The solution is to encode the argument string in hexadecimal or octal
format strings, so that all the damned characters are converted to
"good" ones.  The Bash script can convert them back.

     *NOTE* Internally Bash represents strings as C language style
     ASCIIZ arrays, so it is impossible to correctly handle null bytes
     in a Bash variable: the string will get truncated at the null byte.

 -- Function: mbfl_encode_hex ASCII_STRING
 -- Function: mbfl_encode_hex_var _RV ASCII_STRING
     Encode a hex string and outputs it on 'stdout'.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_decode_hex HEX_STRING
 -- Function: mbfl_decode_hex_var _RV HEX_STRING
     Decode a hex string and outputs it on 'stdout'.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_decode_oct OCT_STRING
 -- Function: mbfl_decode_oct_var _RV OCT_STRING
     Decode a oct string and outputs it on 'stdout'.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

   Example:

     mbfl_decode_hex 414243
     -| ABC


File: mbfl.info,  Node: file,  Next: fd,  Prev: encoding,  Up: Top

6 Manipulating files and pathnames
**********************************

* Menu:

* file names::                  Manipulating file names.
* file commands::               Manipulating files with external
                                commands.
* file testing::                Testing file existence and the like.
* file read and write::         Reading and writing files with
                                privileges.
* file misc::                   Miscellaneous commands.


File: mbfl.info,  Node: file names,  Next: file commands,  Up: file

6.1 File names
==============

* Menu:

* file names parts::            Splitting a file name into its
                                components.
* file names path::             Absolute and relative pathnames.
* file names system::           Finding pathnames on the system.


File: mbfl.info,  Node: file names parts,  Next: file names path,  Up: file names

6.1.1 Splitting a file name into its components
-----------------------------------------------

 -- Function: mbfl_file_extension PATHNAME
 -- Function: mbfl_file_extension_var _RV PATHNAME
     Extract the extension from a file name.  Starting from the end of
     the string PATHNAME: search the last dot character in the argument
     string and echo to stdout the range of characters from the dot to
     the end, not including the dot.  If a slash character or the
     beginning of the string is found first: echoes to stdout the empty
     string.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_file_extension /path/to/file.ext   -| ext
          mbfl_file_extension /path/to/file.      -| <no output>
          mbfl_file_extension /path/to/file       -| <no output>
          mbfl_file_extension /path/to/.file.ext  -| ext
          mbfl_file_extension /path/to/.dotfile   -| <no output>
          mbfl_file_extension .dotfile            -| <no output>

          local _RV
          mbfl_file_extension_var _RV /path/to/file.ext
          "$_RV"  => ext

 -- Function: mbfl_file_dirname PATHNAME
 -- Function: mbfl_file_dirname_var _RV PATHNAME
     Extract the directory part from a fully qualified file name.
     Search the last slash character in the input string and echo to
     stdout the range of characters from the first to the slash, not
     including the slash.

     If no slash is found: echo a single dot (the current directory).

     If the input string begins with '/' or '//' with no slash
     characters after the first ones: echo a single slash.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_file_dirname /path/to/file.ext     -| /path/to
          mbfl_file_dirname file.ext              -| .
          mbfl_file_dirname /file.ext             -| /
          mbfl_file_dirname //file.ext            -| /
          mbfl_file_dirname /path/to///file.ext   -| /path/to
          mbfl_file_dirname //////file.ext        -| /
          mbfl_file_dirname a/b                   -| a
          mbfl_file_dirname a                     -| .
          mbfl_file_dirname ../a                  -| ..
          mbfl_file_dirname ./a                   -| .
          mbfl_file_dirname ../abcd               -| ..
          mbfl_file_dirname ./abcd                -| .
          mbfl_file_dirname ../abcd/efgh          -| ../abcd
          mbfl_file_dirname ./abcd/efgh           -| ./abcd

          local _RV
          mbfl_file_dirname_var _RV /path/to/file.ext
          "$_RV" => /path/to

 -- Function: mbfl_file_rootname PATHNAME
 -- Function: mbfl_file_rootname_var _RV PATHNAME
     Extract the root portion of a file pathname: everything excluding
     the last component's extension and the extension's dot separator.
     Search the last dot character in the argument string and echo to
     stdout the range of characters from the beginning to the dot, not
     including the dot.  If a slash is the last character: skip it; then
     if a slash character is found first, or no dot is found, or the dot
     is the first character: echo the full PATHNAME.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_file_rootname file.ext              -| file
          mbfl_file_rootname /path/to/file.ext     -| /path/to/file
          mbfl_file_rootname /path/to/file..ext    -| /path/to/file.
          mbfl_file_rootname /path/to/file.ext/    -| /path/to/file
          mbfl_file_rootname /path/to/file.ext///  -| /path/to/file
          mbfl_file_rootname /path/to/file         -| /path/to/file
          mbfl_file_rootname /path/to.to/file      -| /path/to.to/file
          mbfl_file_rootname .dotfile              -| .dotfile
          mbfl_file_rootname /path/to/.dotfile     -| /path/to/.dotfile
          mbfl_file_rootname a                     -| a
          mbfl_file_rootname /                     -| /
          mbfl_file_rootname .                     -| .
          mbfl_file_rootname ..                    -| ..

          local _RV
          mbfl_file_rootname_var /path/to/file.ext
          "$_RV" => /path/to/file

 -- Function: mbfl_file_tail PATHNAME
 -- Function: mbfl_file_tail_var PATHNAME
     Extract the file portion from a fully qualified pathname.  Search
     the last slash character in the input string and echo to stdout the
     range of characters from the slash to the end, not including the
     slash.  If no slash is found: echo the whole string.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_file_tail /path/to/file.ext  -| file.ext
          mbfl_file_tail /path/to/          -| <no output>
          mbfl_file_tail file.ext           -| file.ext

          local _RV
          mbfl_file_tail_var _RV /path/to/file.ext
          "$_RV" => file.ext

 -- Function: mbfl_file_split PATHNAME
     Separate a file name into its components.  One or more contiguous
     occurrences of the slash character is used as separator.  The
     components are stored in an array named 'SPLITPATH', that may be
     declared 'local' in the scope of the caller; the base index is
     zero.  The number of elements in the array is stored in a variable
     named 'SPLITCOUNT'.  Return true.

          local -a SPLITPATH
          local -i SPLITCOUNT

          mbfl_file_split /path/to/file.ext
          "${SPLITPATH[0]}"       => path
          "${SPLITPATH[1]}"       => to
          "${SPLITPATH[2]}"       => file.ext
          $SPLITCOUNT             => 3

 -- Function: mbfl_file_strip_trailing_slash PATHNAME
 -- Function: mbfl_file_strip_trailing_slash_var _RV PATHNAME
     Remove all the trailing slashes from PATHNAME and print the result
     on stdout.  If PATHNAME consists only of slashes: print a single
     dot.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_file_strip_trailing_slash '/path/to/file.ext'
          -| /path/to/file.ext

          mbfl_file_strip_trailing_slash '/path/to/dir.ext/'
          -| /path/to/dir.ext

          mbfl_file_strip_trailing_slash '/path/to/dir.ext///'
          -| /path/to/dir.ext

          mbfl_file_strip_trailing_slash '/'      -| .
          mbfl_file_strip_trailing_slash '///'    -| .
          mbfl_file_strip_trailing_slash 'file'   -| file

          local _RV
          mbfl_file_strip_trailing_slash_var _RV '/path/to/dir.ext/'
          "$_RV" => /path/to/dir.ext

 -- Function: mbfl_file_strip_leading_slash PATHNAME
 -- Function: mbfl_file_strip_leading_slash_var _RV PATHNAME
     Remove all the leading slashes from PATHNAME and print the result
     on stdout.  If PATHNAME consists only of slashes: print a single
     dot.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_file_strip_leading_slash '/path/to/file.ext'
          -| path/to/file.ext

          mbfl_file_strip_leading_slash '/path/to/dir.ext/'
          -| path/to/dir.ext/

          mbfl_file_strip_leading_slash '///path/to/dir.ext'
          -| path/to/dir.ext

          mbfl_file_strip_leading_slash '/'       -| .
          mbfl_file_strip_leading_slash '///'     -| .
          mbfl_file_strip_leading_slash 'file'    -| file

 -- Function: mbfl_file_normalise PATHNAME
 -- Function: mbfl_file_normalise PATHNAME PREFIX
 -- Function: mbfl_file_normalise_var _RV PATHNAME
 -- Function: mbfl_file_normalise_var _RV PATHNAME PREFIX
     Normalise a file name: remove all the occurrences of '.' and '..'.

     If PATHNAME is relative (according to 'mbfl_file_is_absolute()')
     and PREFIX is not present or it is the empty string: the current
     process working directory is prepended to PATHNAME.

     If PREFIX is present and non empty, and PATHNAME is relative
     (according to 'mbfl_file_is_absolute()'): PREFIX is prepended to
     PATHNAME and normalised, too.

     Echo to stdout the normalised file name.  Return true.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.


File: mbfl.info,  Node: file names path,  Next: file names system,  Prev: file names parts,  Up: file names

6.1.2 Absolute and relative pathnames
-------------------------------------

 -- Function: mbfl_file_subpathname PATHNAME BASEDIR
 -- Function: mbfl_file_subpathname_var _RV PATHNAME BASEDIR
     If PATHNAME is a subdirectory or file under BASEDIR: print to
     stdout the subpathname portion.  Example:

          mbfl_file_subpathname /a/b/c /a
          -> ./b/c

     Both PATHNAME and BASEDIR must be full (normalised) pathnames for
     this function to work.  If PATHNAME is recognised as subpathname of
     BASEDIR: the return code is zero; else the return code is one.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_file_subpathname /a /a       -| ./
          mbfl_file_subpathname /a/b/c /a/  -| ./b/c
          mbfl_file_subpathname /a/b/c /a   -| ./b/c

          mbfl_file_subpathname /a/b/c /d   error-> no match

          local _RV
          mbfl_file_subpathname_var _RV /a/b/c /a
          "$_RV" => ./b/c

 -- Function: mbfl_file_is_absolute PATHNAME
     Return true if the first character in PATHNAME is a slash ('/');
     else return false.

 -- Function: mbfl_file_is_absolute_dirname PATHNAME
     Return true if PATHNAME is a directory according to
     'mbfl_file_is_directory()' and an absolute pathname according to
     'mbfl_file_is_absolute()'.

 -- Function: mbfl_file_is_absolute_filename PATHNAME
     Return true if PATHNAME is a file according to
     'mbfl_file_is_file()' and an absolute pathname according to
     'mbfl_file_is_absolute()'.

 -- Function: mbfl_file_is_relative PATHNAME
     Return true if the first character in PATHNAME is *not* a slash
     ('/'); else return false.

 -- Function: mbfl_file_is_relative_dirname PATHNAME
     Return true if PATHNAME is a directory according to
     'mbfl_file_is_directory()' and an relative pathname according to
     'mbfl_file_is_relative()'.

 -- Function: mbfl_file_is_relative_filename PATHNAME
     Return true if PATHNAME is a file according to
     'mbfl_file_is_file()' and an relative pathname according to
     'mbfl_file_is_relative()'.


File: mbfl.info,  Node: file names system,  Prev: file names path,  Up: file names

6.1.3 Finding pathnames on the system
-------------------------------------

 -- Function: mbfl_file_find_tmpdir
 -- Function: mbfl_file_find_tmpdir PATHNAME
 -- Function: mbfl_file_find_tmpdir_var _RV
 -- Function: mbfl_file_find_tmpdir_var _RV PATHNAME
     Find a value for a temporary directory according to the following
     rules:

       1. If PATHNAME is not used: it defaults to the current value of
          'mbfl_option_TMPDIR'.

       2. If PATHNAME is not null and it is a directory and it is
          writable: it is accepted as value.

       3. If PATHNAME is invalid: the value '/tmp/$USER', where 'USER'
          is the environment variable, is tried.

       4. Finally the value '/tmp' is tried.

     Echo the accepted value to stdout.  Return true if a value is
     found, false otherwise.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.


File: mbfl.info,  Node: file commands,  Next: file testing,  Prev: file names,  Up: file

6.2 File Commands
=================

* Menu:

* file commands listing::       Listing directory entries.
* file commands stat::          Inspecting files and directories.
* file commands mkdir::         Creating directories.
* file commands copy::          Copying files.
* file commands move::          Moving files.
* file commands removing::      Removing files and directories.
* file commands symlink::       Creating symbolic links.
* file commands realpath::      Normalising pathnames.
* file commands tar::           Manipulating tar archives.
* file commands perms::         Set/get file permissions.
* file commands owner::         Setting file owner and group.
* file commands compress::      Compressing files.


File: mbfl.info,  Node: file commands listing,  Next: file commands stat,  Up: file commands

6.2.1 Listing directory entries
-------------------------------

 -- Function: mbfl_file_enable_listing
     Declare the commands required to retrieve informations about files
     and directories.  *note Declaring the intention to use a program:
     program declaring.

     The programs are: 'ls', 'readlink'.

 -- Function: mbfl_file_listing PATHNAME
     Execute 'ls' with PATHNAME as argument.

 -- Function: mbfl_file_long_listing PATHNAME
     Execute 'ls' with PATHNAME as argument and the flag '-l'.

 -- Function: mbfl_file_normalise_link PATHNAME
     Make use of the 'readlink' to normalise the pathname of a symbolic
     link (remember that a symbolic link references a file, never a
     directory).  Echo to stdout the normalised pathname.

     The command line of 'readlink' is:

          readlink -fn "$PATHNAME"

 -- Function: mbfl_file_read_link PATHNAME
     Make use of 'readlink' to acquire the original pathname referenced
     by PATHNAME, then print it.

 -- Function: mbfl_exec_readlink PATHNAME [OPT ...]
     Raw executor for 'readlink'.  The mandatory argument PATHNAME must
     be the pathname of a directory entry.  The optional arguments are
     added, as options, to the command line of 'readlink'.


File: mbfl.info,  Node: file commands stat,  Next: file commands mkdir,  Prev: file commands listing,  Up: file commands

6.2.2 Inspecting files and directories
--------------------------------------

The GNU Coreutils package comes with a command line program 'stat' which
implements advanced inspection of file and directory status.  *Note
stat: (coreutils)stat invocation.

 -- Function: mbfl_file_enable_stat
     Declare the intention to use the program 'stat'.

 -- Function: mbfl_file_stat PATHNAME [OPT ...]
 -- Function: mbfl_file_stat_var _RV PATHNAME [OPT ...]
     Execute 'stat' with PATHNAME as first argument and ARG as other
     arguments.

          mbfl_file_enable_stat

          mbfl_file_stat /bin/ls --format='%F'
          => 0
          -| regular

          mbfl_file_stat /bin --format='%F'
          => 0
          -| directory

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_file_get_size PATHNAME
 -- Function: mbfl_file_get_size_var _RV PATHNAME
     Print the size of the file in bytes.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.


File: mbfl.info,  Node: file commands mkdir,  Next: file commands copy,  Prev: file commands stat,  Up: file commands

6.2.3 Creating directories
--------------------------

 -- Function: mbfl_file_enable_make_directory
     Declare the commands required to create directories.  *note
     Declaring the intention to use a program: program declaring.

     The programs are: 'mkdir'.

 -- Function: mbfl_file_make_directory PATHNAME
 -- Function: mbfl_file_make_directory PATHNAME PERMISSIONS
     Create a directory named PATHNAME; all the non-existent parents are
     created, too.  If PERMISSIONS is present: it is the specification
     of directory permissions in octal mode.

     This function does not test if the directory already exists: the
     command is always executed.

 -- Function: mbfl_file_make_if_not_directory PATHNAME
 -- Function: mbfl_file_make_if_not_directory PATHNAME PERMISSIONS
     Wrapper for 'mbfl_file_make_directory()' that creates the directory
     if it does not exist.

     If a 'sudo' user was requested: this function resets the request
     even if no command has been executed.


File: mbfl.info,  Node: file commands copy,  Next: file commands move,  Prev: file commands mkdir,  Up: file commands

6.2.4 Copying files
-------------------

At present, copying of directories is not supported; we have to create
the directory and then copy files into it.

 -- Function: mbfl_file_enable_copy
     Declare the commands required to copy files and directories.  *note
     Declaring the intention to use a program: program declaring.

     The programs are: 'cp'.

 -- Function: mbfl_file_copy SOURCE TARGET ?...?
     Copy the SOURCE, a file pathname, to TARGET, a file pathname.
     Additional arguments are handed to the command unchanged.

     If SOURCE does not exist, or if it is not a file, an error is
     generated and the return value is 1.  If TARGET exists an error is
     generated and the return value is 1.

 -- Function: mbfl_file_copy_to_directory SOURCE TARGET ?...?
     Copy the SOURCE, a file pathname, into the directory TARGET.
     Additional arguments are handed to the command unchanged.

     If SOURCE does not exist, or if it is not a file, an error is
     generated and the return value is 1.  If TARGET does not exist or
     it is not a directory: an error message is generated and the return
     value is 1.


File: mbfl.info,  Node: file commands move,  Next: file commands removing,  Prev: file commands copy,  Up: file commands

6.2.5 Moving files
------------------

 -- Function: mbfl_file_enable_move
     Declare the commands required to move files and directories.  *note
     Declaring the intention to use a program: program declaring.

     The programs are: 'mv'.

 -- Function: mbfl_file_move SOURCE TARGET ?...?
     Move the SOURCE, a file or directory, to TARGET, a pathname.
     Additional arguments are handed to the command unchanged.

     If SOURCE does not exist, or if it is not readable, an error is
     generated and the return value is 1.  If TARGET exists an error is
     generated and the return value is 1.

 -- Function: mbfl_file_move_to_directory SOURCE TARGET ?...?
     Move the SOURCE, a file or directory, into the directory TARGET.
     Additional arguments are handed to the command unchanged.

     If SOURCE does not exist, or if it is not readable, an error
     message is generated and the return value is 1.  If TARGET does not
     exist or it is not a directory: an error is generated and the
     return value is 1.


File: mbfl.info,  Node: file commands removing,  Next: file commands symlink,  Prev: file commands move,  Up: file commands

6.2.6 Removing files and directories
------------------------------------

Files removal is forced: the '--force' option to 'rm' is always used.
It is responsibility of the caller to validate the operation before
invoking these functions.

   Some functions test the existence of the pathname before attempting
to remove it: this is done only if test execution is disabled; if test
execution is enabled the command line is echoed to stderr to make it
easier to debug scripts.

 -- Function: mbfl_file_enable_remove
     Declare the commands required to remove files and directories.
     *note Declaring the intention to use a program: program declaring.

     The programs are: 'rm', 'rmdir'.

 -- Function: mbfl_file_remove PATHNAME
     Remove PATHNAME, no matter if it is a file or directory.  If it is
     a directory: descend the sub-levels removing all of them.  If an
     error occurs return 1.

 -- Function: mbfl_file_remove_file PATHNAME
     Remove the file or symbolic link selected by PATHNAME.  If the file
     does not exist or it is not a file or an error occurs: return 1.

 -- Function: mbfl_file_remove_symlink PATHNAME
     Remove the symbolic link selected by PATHNAME.  If the link does
     not exist or it is not a symbolic link or an error occurs: return
     1.

 -- Function: mbfl_file_remove_file_or_symlink PATHNAME
     Remove the file or symbolic link selected by PATHNAME.  If the file
     does not exist or it is not a file or an error occurs: return 1.

 -- Function: mbfl_file_remove_directory PATHNAME
     Remove the directory selected by PATHNAME.  If the directory does
     not exist or an error occurs: return 1.

 -- Function: mbfl_file_remove_directory_silently PATHNAME
     Like 'mbfl_file_remove_directory()', but do not print messages if
     the directory is not empty.


File: mbfl.info,  Node: file commands symlink,  Next: file commands realpath,  Prev: file commands removing,  Up: file commands

6.2.7 Creating symbolic links
-----------------------------

 -- Function: mbfl_file_enable_symlink
     Declare the commands required to create symbolic links.  *note
     Declaring the intention to use a program: program declaring.

     The programs are: 'ln'.

 -- Function: mbfl_file_symlink ORIGINAL_NAME SYMLINK_NAME
     Create a symbolic link.

 -- Function: mbfl_exec_ln ORIGINAL_NAME LINK_NAME [OPT ...]
     Raw executor for 'ln'.  The mandatory arguments ORIGINAL_NAME and
     LINK_NAME are put on the command line of 'ln' as arguments.  The
     optional arguments OPT are added, as options, to the command line
     of 'ln'.


File: mbfl.info,  Node: file commands realpath,  Next: file commands tar,  Prev: file commands symlink,  Up: file commands

6.2.8 Normalising pathnames
---------------------------

 -- Function: mbfl_file_enable_realpath
     Declare the commands required to normalise pathnames.  *note
     Declaring the intention to use a program: program declaring.

     The programs are: 'realpath'.

 -- Function: mbfl_file_realpath PATHNAME [OPT ...]
 -- Function: mbfl_file_realpath_var _RV PATHNAME [OPT ...]
     Normalise the given PATHNAME using 'realpath' and print the result
     to stdout.  The optional arguments OPT are added, as options, to
     the command line of 'realpath'.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.


File: mbfl.info,  Node: file commands tar,  Next: file commands perms,  Prev: file commands realpath,  Up: file commands

6.2.9 Manipulating tar archives
-------------------------------

Remember that when we execute a script with the '--test' option: the
external commands are not executed: a command line is echoed to stdout.
It is recommended to use this mode to fine tune the command line options
required by 'tar'.

 -- Function: mbfl_file_enable_tar
     Declare the 'tar' command.  *note Declaring the intention to use a
     program: program declaring.

 -- Function: mbfl_exec_tar [OPT ...]
 -- Function: mbfl_tar_exec ARG ...
     Execute 'tar' with whatever arguments are used.  Return the return
     code of 'tar'.

 -- Function: mbfl_tar_create_to_stdout DIRECTORY ?...?
     Create an archive and send it to stdout.  The root of the archive
     is the DIRECTORY.  Files are selected with the '.' pattern.  'tar'
     flags may be appended to the invocation to this function.  In case
     of error return 1.

 -- Function: mbfl_tar_extract_from_stdin DIRECTORY ?...?
     Read an archive from stdin and extract it under DIRECTORY.  'tar'
     flags may be appended to the invocation to this function.  In case
     of error return 1.

 -- Function: mbfl_tar_extract_from_file DIRECTORY ARCHIVE ?...?
     Read an archive from a file and extract it under DIRECTORY.  'tar'
     flags may be appended to the invocation to this function.  In case
     of error return 1.

 -- Function: mbfl_tar_create_to_file DIRECTORY ARCHIVE ?...?
     Create an archive named ARCHIVE holding the contents of DIRECTORY.
     Before creating the archive, the process changes the current
     directory to DIRECTORY and selects the files with the pattern '.'.
     'tar' flags may be appended to the invocation to this function.  In
     case of error return 1.

 -- Function: mbfl_tar_archive_directory_to_file DIRECTORY ARCHIVE ?...?
     Like 'mbfl_tar_create_to_file()' but archive all the contents of
     DIRECTORY, including the directory itself (not its parents).

 -- Function: mbfl_tar_list ARCHIVE ?...?
     Print to stdout the list of files in ARCHIVE.  'tar' flags may be
     appended to the invocation to this function.  In case of error
     return 1.


File: mbfl.info,  Node: file commands perms,  Next: file commands owner,  Prev: file commands tar,  Up: file commands

6.2.10 Set/get file permissions
-------------------------------

 -- Function: mbfl_file_enable_permissions
     Declare the intention to use the programs required to get/set file
     permissions.  *note Declaring the intention to use a program:
     program declaring.

     The programs are: 'stat', 'chmod'.

 -- Function: mbfl_file_get_permissions PATHNAME
 -- Function: mbfl_file_get_permissions_var _RV PATHNAME
     Print the access permissions for PATHNAME, in octal format.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_file_get_permissions /bin/ls       -| 0755

          local PERMS
          mbfl_file_get_permissions_var PERMS /bin/ls
          "$_RV" => 0755

   To set permissions one may request the use of 'sudo': just request a
user before invoking the following function.  *note Executing a program:
program executing.

 -- Function: mbfl_file_set_permissions MODE PATHNAME
     Set the access permissions for PATHNAME; MODE must be in a form
     accepted by 'chmod'.


File: mbfl.info,  Node: file commands owner,  Next: file commands compress,  Prev: file commands perms,  Up: file commands

6.2.11 Setting file owner and group
-----------------------------------

 -- Function: mbfl_file_enable_owner_and_group
     Declare the intention to use the programs required to change file
     owner and group.  *note Declaring the intention to use a program:
     program declaring.

     The programs are: 'chown', 'chgrp', 'stat'.

   To change the file owner and group one may request the use of 'sudo':
just request a user before invoking the following function.  *note
Executing a program: program executing.

 -- Function: mbfl_file_set_owner OWNER PATHNAME [OPT ...]
     Change the file owner for PATHNAME; OWNER must be in a form
     accepted by 'chown'.  The optional arguments OPT are handed to
     'chown' as options.

 -- Function: mbfl_file_set_group GROUP PATHNAME [OPT ...]
     Change the file group for PATHNAME; GROUP must be in a form
     accepted by 'chgrp'.  The optional arguments OPT are handed to
     'chgrp' as options.

 -- Function: mbfl_file_get_owner PATHNAME
 -- Function: mbfl_file_get_owner_var _RV PATHNAME
     Print the owner of the file as symbolic name.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_file_get_group PATHNAME
 -- Function: mbfl_file_get_group_var _RV PATHNAME
     Print the group of the file as symbolic name.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_exec_chown PATHNAME [OPT ...]
     Raw interface to 'chown'.  The mandatory argument PATHNAME is
     handed to 'chown' as argument.  The optional arguments OPT are
     handed to 'chown' as options.

 -- Function: mbfl_exec_chgrp PATHNAME [OPT ...]
     Raw interface to 'chgrp'.  The mandatory argument PATHNAME is
     handed to 'chgrp' as argument.  The optional arguments OPT are
     handed to 'chgrp' as options.


File: mbfl.info,  Node: file commands compress,  Prev: file commands owner,  Up: file commands

6.2.12 Compressing files
------------------------

This module has an internal state, stored in global variables.  The
state holds informations about:

   * The selected compression external program (default: 'gzip').

   * Whether the program should keep the original files or replace them
     with the (de)compressed version (default: do not keep).

   * Whether the output must be sent to standard output or a file
     (default: send to a file).

Initialisation
..............

 -- Function: mbfl_file_enable_compress
     Declare the programs required to compress a file.  *note Declaring
     the intention to use a program: program declaring.

     The programs are: 'gzip', 'bzip2', 'lzip', 'xz'.

Configuration
.............

The selection will affect all the future invocations of the
compression/decompression functions.

 -- Function: mbfl_file_compress_select_gzip
 -- Function: mbfl_file_compress_select_bzip
 -- Function: mbfl_file_compress_select_bzip2
 -- Function: mbfl_file_compress_select_lzip
 -- Function: mbfl_file_compress_select_xz
     Select a compressor program.

 -- Function: mbfl_file_compress_keep
 -- Function: mbfl_file_compress_nokeep
     Select whether the compress program should keep the original file
     or not.

 -- Function: mbfl_file_compress_select_stdout
 -- Function: mbfl_file_compress_select_nostdout
     Select if the output must be sent to stdout or a file.  This takes
     precedence over the keep/no keep configuration: if the output is
     sent to stdout the original file is kept.

Actions
.......

Additional arguments to the selected compressor may be appended to the
invocation of the following functions and are handed to the compressor
unchanged.

 -- Function: mbfl_file_compress PATHNAME [OPT ...]
     Compress PATHNAME, a file pathname, with the currently selected
     compressor program.

 -- Function: mbfl_file_decompress PATHNAME [OPT ...]
     Decompress PATHNAME, a file pathname, with the currently selected
     compressor program.


File: mbfl.info,  Node: file testing,  Next: file read and write,  Prev: file commands,  Up: file

6.3 Testing file existence and the like
=======================================

When using the following functions: the optional argument PRINT_ERROR
will cause an error message to be printed with 'mbfl_message_error()' if
the test fails; the argument value must be 'print_error'.

File functions
..............

 -- Function: mbfl_file_exists PATHNAME
     Return true if PATHNAME exists.

 -- Function: mbfl_file_is_file FILENAME
 -- Function: mbfl_file_is_file FILENAME PRINT_ERROR
     Return true if FILENAME is not the empty string and is a file.

 -- Function: mbfl_file_is_readable FILENAME
 -- Function: mbfl_file_is_readable FILENAME PRINT_ERROR
     Return true if FILENAME is not the empty string, is a file and is
     readable.

 -- Function: mbfl_file_is_writable FILENAME
 -- Function: mbfl_file_is_writable FILENAME PRINT_ERROR
     Return true if FILENAME is not the empty string, is a file and is
     writable.

 -- Function: mbfl_file_is_executable FILENAME
 -- Function: mbfl_file_is_executable FILENAME PRINT_ERROR
     Return true if FILENAME is not the empty string, is a file and is
     executable.

Directory functions
...................

 -- Function: mbfl_file_is_directory DIRECTORY
 -- Function: mbfl_file_is_directory DIRECTORY PRINT_ERROR
     Return true if DIRECTORY is not the empty string and is a
     directory.

 -- Function: mbfl_file_directory_is_readable DIRECTORY
 -- Function: mbfl_file_directory_is_readable DIRECTORY PRINT_ERROR
     Return true if DIRECTORY is not the empty string, is a directory
     and is readable.

 -- Function: mbfl_file_directory_is_writable DIRECTORY
 -- Function: mbfl_file_directory_is_writable DIRECTORY PRINT_ERROR
     Return true if DIRECTORY is not the empty string, is a directory
     and is writable.

 -- Function: mbfl_file_directory_is_executable DIRECTORY
 -- Function: mbfl_file_directory_is_executable DIRECTORY PRINT_ERROR
     Return true if DIRECTORY is not the empty string, is a directory
     and is executable.

 -- Function: mbfl_file_directory_validate_writability DIRECTORY
          DESCRIPTION
     Test directory existence and writability; return true if the
     directory exists and is writable.  If the condition is not met:
     Print informative messages using DESCRIPTION to refer to the
     directory.

Symbolic link functions
.......................

 -- Function: mbfl_file_is_symlink PATHNAME
 -- Function: mbfl_file_is_symlink PATHNAME PRINT_ERROR
     Return true if PATHNAME is not the empty string and is a symbolic
     link.

Generic pathname functions
..........................

 -- Function: mbfl_file_pathname_is_readable PATHNAME
 -- Function: mbfl_file_pathname_is_readable PATHNAME PRINT_ERROR
     Return true if PATHNAME is not the empty string and is readable.

 -- Function: mbfl_file_pathname_is_writable PATHNAME
 -- Function: mbfl_file_pathname_is_writable PATHNAME PRINT_ERROR
     Return true if PATHNAME is not the empty string and is writable.

 -- Function: mbfl_file_pathname_is_executable PATHNAME
 -- Function: mbfl_file_pathname_is_executable PATHNAME PRINT_ERROR
     Return true if PATHNAME is not the empty string and is executable.


File: mbfl.info,  Node: file read and write,  Next: file misc,  Prev: file testing,  Up: file

6.4 Reading and writing files with privileges
=============================================

The following functions perform actions that can normally be done
directly with the redirection operators of Bash:

     # write to a file
     printf '%s' "$string" >"$filename"

     # append to a file
     printf '%s' "$string" >>"$filename"

     # read a file, print contents
     printf '%s' "$(<$filename)"

   The functions act differently in that they spawn a 'bash' subprocess,
by invoking 'mbfl_program_exec()', and let it do the operation; this
allows us to request the usage of 'sudo' and so to read and write files
with modified privileges, but only for the time needed to do the
operation, not for the whole script.

 -- Function: mbfl_file_write STRING FILENAME
     Write STRING to FILENAME, eventually creating it or overwriting old
     contents.

 -- Function: mbfl_file_append STRING FILENAME
     Append STRING to FILENAME, eventually creating it.

 -- Function: mbfl_file_read FILENAME
     Read and print *all* the contents of FILENAME.


File: mbfl.info,  Node: file misc,  Prev: file read and write,  Up: file

6.5 Miscellaneous commands
==========================

 -- Function: mbfl_change_directory DIRNAME ?...?
     Change directory to DIRNAME.  Optional flags to 'cd' may be
     appended.

 -- Function: mbfl_cd DIRNAME ?...?
     Wrapper for 'mbfl_change_directory()'.  If verbose mode is on:
     print a message.


File: mbfl.info,  Node: fd,  Next: actions,  Prev: file,  Up: Top

7 Handling file descriptors
***************************

* Menu:

* fd open::                     Opening file descriptors.
* fd close::                    Closing file descriptors.
* fd dup::                      Duplicating file descriptors.
* fd move::                     Moving file descriptors.


File: mbfl.info,  Node: fd open,  Next: fd close,  Up: fd

7.1 Opening file descriptors
============================

 -- Function: mbfl_fd_open_input FD FILE
     Open the file descriptor FD to read from FILE.  When successful:
     return true; otherwise return false.

     *NOTE* When FILE is a FIFO: we need to call
     'mbfl_fd_open_input_output()', not this function.

 -- Function: mbfl_fd_open_output FD FILE
     Open the file descriptor FD to write to FILE.  When successful:
     return true; otherwise return false.

 -- Function: mbfl_fd_open_input_output FD FILE
     Open the file descriptor FD to read from and write to FILE.  When
     successful: return true; otherwise return false.

   Let's see how we can open a file for reading and writing with two
file descriptors:

     declare TESTFILE=/path/to/file.ext
     declare INFD=3 OUFD=4
     declare LINE

     mbfl_fd_open_output $OUFD "$TESTFILE"
     echo 1234 >&${OUFD}
     mbfl_fd_close $OUFD

     mbfl_fd_open_input  $INFD "$TESTFILE"
     read -u ${INFD} LINE
     mbfl_fd_close $INFD

     echo "$LINE"

now let's use a location to automatically close the file descriptors:

     declare TESTFILE=/path/to/file.ext
     declare INFD=3 OUFD=4
     declare LINE

     mbfl_location_enter
     {
         mbfl_fd_open_output $OUFD "$TESTFILE"
         mbfl_location_handler "mbfl_fd_close ${OUFD}"
         echo 1234 >&${OUFD}

         mbfl_fd_open_input  $INFD "$TESTFILE"
         mbfl_location_handler "mbfl_fd_close ${INFD}"
         read -u ${INFD} LINE

         echo "$LINE"
     }
     mbfl_location_leave

   Let's see how we can use a FIFO for reading and writing with two file
descriptors:

     mbfl_declare_program mkfifo
     mbfl_file_enable_remove

     function program_mkfifo () {
         local PATHNAME=${1:?}
         shift 1
         local MKFIFO
         mbfl_program_found_var MKFIFO mkfifo || exit $?

         "$MKFIFO" --mode=0600 "$@" "$PATHNAME"
     }

     declare TESTFILE=/path/to/fifo.ext
     declare INFD=3 OUFD=4
     declare LINE

     mbfl_location_enter
     {
         program_mkfifo "$TESTFIFO"
         mbfl_location_handler "mbfl_file_remove ${TESTFIFO}"

         mbfl_fd_open_input_output $INFD "$TESTFIFO"
         mbfl_location_handler "mbfl_fd_close ${INFD}"

         mbfl_fd_open_output $OUFD "$TESTFIFO"
         mbfl_location_handler "mbfl_fd_close ${OUFD}"

         echo 1234 >&${OUFD}
         read -u ${INFD} LINE

         echo "$LINE"
     }
     mbfl_location_leave


File: mbfl.info,  Node: fd close,  Next: fd dup,  Prev: fd open,  Up: fd

7.2 Closing file descriptors
============================

 -- Function: mbfl_fd_close FD
     Close the file descriptor FD.


File: mbfl.info,  Node: fd dup,  Next: fd move,  Prev: fd close,  Up: fd

7.3 Duplicating file descriptors
================================

 -- Function: mbfl_fd_dup_input SRCFD DSTFD
 -- Function: mbfl_fd_dup_output SRCFD DSTFD
     Duplicate the source file descriptor SRCFD to the destination file
     descriptor DSTFD.

   Let's see how we can use a FIFO for reading and writing with two
duplicate file descriptors:

     mbfl_declare_program mkfifo
     mbfl_file_enable_remove

     function program_mkfifo () {
         local PATHNAME=${1:?}
         shift 1
         local MKFIFO
         mbfl_program_found_var MKFIFO mkfifo || exit $?

         "$MKFIFO" --mode=0600 "$@" "$PATHNAME"
     }

     declare TESTFILE=/path/to/fifo.ext
     declare INFD=3 OUFD=4 DUP_INFD=5 DUP_OUFD=6
     declare LINE1 LINE2 LINE3

     mbfl_location_enter
     {
         program_mkfifo "$TESTFIFO"
         mbfl_location_handler "mbfl_file_remove ${TESTFIFO}"

         mbfl_fd_open_input_output $INFD "$TESTFIFO"
         mbfl_location_handler "mbfl_fd_close ${INFD}"

         mbfl_fd_open_output $OUFD "$TESTFIFO"
         mbfl_location_handler "mbfl_fd_close ${OUFD}"

         echo 1234 >&${OUFD}
         read -u ${INFD} LINE1

         mbfl_location_enter
         {
             mbfl_fd_dup_input  $INFD $DUP_INFD
             mbfl_location_handler "mbfl_fd_close ${DUP_INFD}"

             mbfl_fd_dup_output $OUFD $DUP_OUFD
             mbfl_location_handler "mbfl_fd_close ${DUP_OUFD}"

             echo 5678 >&${DUP_OUFD}
             read -u ${DUP_INFD} LINE2
         }
         mbfl_location_leave

         echo 90 >&${OUFD}
         read -u ${INFD} LINE3
     }
     mbfl_location_leave

     echo $LINE1 $LINE2 $LINE3


File: mbfl.info,  Node: fd move,  Prev: fd dup,  Up: fd

7.4 Moving file descriptors
===========================

 -- Function: mbfl_fd_move SRCFD DSTFD
     Move the source file descriptor SRCFD to the destination file
     descriptor DSTFD.  The source file descriptor is closed.

   Let's see how we can use a file for reading and writing with two
moved file descriptors:

     declare TESTFILE=/path/to/file.ext
     declare INFD=3 OUFD=4 DUP_INFD=5 DUP_OUFD=6
     declare LINE

     mbfl_location_enter
     {
         mbfl_fd_open_input_output $INFD "$TESTFILE"
         mbfl_fd_open_output       $OUFD "$TESTFILE"

         mbfl_fd_move $INFD $DUP_INFD
         mbfl_location_handler "mbfl_fd_close ${DUP_INFD}"

         mbfl_fd_move $OUFD $DUP_OUFD
         mbfl_location_handler "mbfl_fd_close ${DUP_OUFD}"

         echo 1234 >&${DUP_OUFD}
         read -u ${DUP_INFD} LINE
     }
     mbfl_location_leave

     echo LINE="$LINE"


File: mbfl.info,  Node: actions,  Next: getopts,  Prev: fd,  Up: Top

8 Selecting actions to perform
******************************

The 'actions' module allows the command line selection of different
actions a script can perform.

* Menu:

* actions intro::               Introduction to action trees.
* actions declare::             Declaring actions and action sets.
* actions dispatch::            Dispatching action arguments.
* actions inspect::             Inspecting action trees.
* actions misc::                Other functions.


File: mbfl.info,  Node: actions intro,  Next: actions declare,  Up: actions

8.1 Introduction to action trees
================================

Traditional Unix-style command line programs perform a single action,
with behaviour variants selected by command line dash and double-dash
options.  For example 'ls' prints a list of directory entries and the
format of the output can be custommised with options like '-1' and
'--color'.  MBFL implements this behaviour by default when the 'actions'
module is *not* used.

   Other Unix-style command line programs offer a set of possible
actions and allow the executor to select one by specifying command line
options.  For example 'tar' acts on archive files and it can pack,
unpack, validate them along with other actions selected with by the
double-dash options '--create', '--extract', '--validate' and others.
MBFL implements this behaviour through "action options" provided by the
'getopts' module; action options are available also when using the
'actions' module.

   Other command line programs break this Unix-style to offer action
selection throuh "action arguments".  For example 'git' acts upon
revision control repositories offering a big set of actions selected
with its first argument: 'commit', 'log', 'merge' and many others; the
behaviour of each "subcommand" can be customised with a specific set of
dash and double-dash options.  MBFL implements this behaviour through
the 'actions' module.

One-level actions
.................

The script below ('one-level-actions.sh', available in the 'doc/'
directory of the source distribution) shows how to implement one-level
actions.  It implements the following behaviour:

'one-level-actions.sh'
     With no action argument: print a generic help screen and exit.

'one-level-actions.sh one'
     With the action argument 'one': perform the action 'ONE', possibly
     with the options '-a' and '-b'.

'one-level-actions.sh one -H'
     With the action argument 'one' and the option '-H': print the brief
     help screen for the action 'ONE' and exit.

'one-level-actions.sh two'
     With the action argument 'two': perform the action 'TWO', possibly
     with the options '-d' and '-g'.

'one-level-actions.sh two -H'
     With the action argument 'two' and the option '-H': print the brief
     help screen for the action 'TWO' and exit.

'one-level-actions.sh help'
     With the action argument 'help': print a generic help screen and
     exit.  Notice how the 'HELP' action function makes use of
     'mbfl_actions_fake_action_set()' to print the same help screen of
     the main action.

     # one-level-actions.sh --
     
     script_PROGNAME=one-level-actions.sh
     script_VERSION=1.0
     script_COPYRIGHT_YEARS='2013'
     script_AUTHOR='Marco Maggi'
     script_LICENSE=BSD
     script_USAGE="usage: ${script_PROGNAME} [action] [options]"
     script_DESCRIPTION='Example script showing action arguments.'
     script_EXAMPLES=
     
     source "${MBFL_LIBRARY:=$(mbfl-config)}"
     
     mbfl_declare_action_set MAIN
     mbfl_declare_action MAIN ONE  NONE one  'Do main action one.'
     mbfl_declare_action MAIN TWO  NONE two  'Do main action two.'
     mbfl_declare_action MAIN HELP NONE help 'Do main action help.'
     
     function script_before_parsing_options_ONE () {
         script_USAGE="usage: ${script_PROGNAME} one [options]"
         script_DESCRIPTION='Example action tree: one.'
         mbfl_declare_option ALPHA no a alpha noarg 'Enable option alpha.'
         mbfl_declare_option BETA  '' b beta  witharg 'Set option beta.'
     }
     function script_before_parsing_options_TWO () {
         script_USAGE="usage: ${script_PROGNAME} two [options]"
         script_DESCRIPTION='Example action tree: two.'
         mbfl_declare_option DELTA no d delta noarg 'Enable option delta.'
         mbfl_declare_option GAMMA '' g gamma witharg 'Set option gamma.'
     }
     function main () {
         mbfl_main_print_usage_screen_brief
     }
     function script_action_HELP () {
         mbfl_actions_fake_action_set MAIN
         mbfl_main_print_usage_screen_brief
     }
     function script_action_ONE () {
         printf 'performing action one: alpha=%s, beta=%s\n' \
             "$script_option_ALPHA" "$script_option_beta"
     }
     function script_action_TWO () {
         printf 'performing action two: delta=%s, gamma=%s\n' \
             "$script_option_DELTA" "$script_option_GAMMA"
     }
     mbfl_main
     
     ### end of file
     # Local Variables:
     # mode: sh
     # End:

Two-levels actions
..................

The script below ('two-levels-actions.sh', available in the 'doc/'
directory of the source distribution) shows how to implement two-levels
actions.  It implements the following behaviour:

'two-levels-actions.sh'
     With no action argument: print a generic help screen and exit.

'two-levels-actions.sh help'
     With the action argument 'help': print a generic help screen and
     exit.  Notice how the 'HELP' action function makes use of
     'mbfl_actions_fake_action_set()' to print the same help screen of
     the main action.

'two-levels-actions.sh one'
     With the non-leaf action argument 'one': print the help screen of
     the action 'ONE'.

'two-levels-actions.sh two'
     With the non-leaf action argument 'two': print the help screen of
     the action 'TWO'.

'two-levels-actions.sh one red'
     With the action arguments 'one red': perform the action 'RED',
     possibly with the options '-a' and '-b'.

'two-levels-actions.sh one red -H'
     With the action argument 'one red' and the option '-H': print the
     brief help screen for the action 'RED' and exit.

'two-levels-actions.sh one blue'
     With the action arguments 'one blue': perform the action 'BLUE',
     possibly with the options '-a' and '-b'.

'two-levels-actions.sh one blue -H'
     With the action argument 'one blue' and the option '-H': print the
     brief help screen for the action 'BLUE' and exit.

'two-levels-actions.sh two green'
     With the action arguments 'two green': perform the action 'GREEN',
     possibly with the options '-d' and '-g'.

'two-levels-actions.sh two green -H'
     With the action argument 'two green' and the option '-H': print the
     brief help screen for the action 'GREEN' exit.

'two-levels-actions.sh two cyan'
     With the action arguments 'two cyan': perform the action 'CYAN',
     possibly with the options '-d' and '-g'.

'two-levels-actions.sh two cyan -H'
     With the action argument 'two cyan' and the option '-H': print the
     brief help screen for the action 'CYAN' exit.

notice how the action functions of the non-leaf nodes print the help
screen describing the subactions.

     # two-level-actions.sh --
     
     script_PROGNAME=two-levels-actions.sh
     script_VERSION=1.0
     script_COPYRIGHT_YEARS='2013'
     script_AUTHOR='Marco Maggi'
     script_LICENSE=BSD
     script_USAGE="usage: ${script_PROGNAME} [action] [subaction] [options]"
     script_DESCRIPTION='Example script showing action arguments.'
     script_EXAMPLES=
     
     source "${MBFL_LIBRARY:=$(mbfl-config)}"
     
     mbfl_declare_action_set ONE
     mbfl_declare_action ONE RED  NONE red  'Do main action one red.'
     mbfl_declare_action ONE BLUE NONE blue 'Do main action one blue.'
     
     mbfl_declare_action_set TWO
     mbfl_declare_action TWO GREEN NONE green 'Do main action one green.'
     mbfl_declare_action TWO CYAN  NONE cyan  'Do main action one cyan.'
     
     mbfl_declare_action_set MAIN
     mbfl_declare_action MAIN ONE  ONE  one  'Do main action one.'
     mbfl_declare_action MAIN TWO  TWO  two  'Do main action two.'
     mbfl_declare_action MAIN HELP NONE help 'Do main action help.'
     
     function script_before_parsing_options_ONE () {
         script_USAGE="usage: ${script_PROGNAME} one [action] [options]"
         script_DESCRIPTION='Example action tree: one.'
     }
     function script_before_parsing_options_TWO () {
         script_USAGE="usage: ${script_PROGNAME} two [action] [options]"
         script_DESCRIPTION='Example action tree: two.'
     }
     
     function script_before_parsing_options_RED () {
         script_USAGE="usage: ${script_PROGNAME} one red [options]"
         script_DESCRIPTION='Example action tree: one red.'
         mbfl_declare_option ALPHA no a alpha noarg 'Enable option alpha.'
         mbfl_declare_option BETA  '' b beta  witharg 'Set option beta.'
     }
     function script_before_parsing_options_BLUE () {
         script_USAGE="usage: ${script_PROGNAME} one blue [options]"
         script_DESCRIPTION='Example action tree: one blue.'
         mbfl_declare_option DELTA no d delta noarg 'Enable option delta.'
         mbfl_declare_option GAMMA '' g gamma witharg 'Set option gamma.'
     }
     function script_before_parsing_options_GREEN () {
         script_USAGE="usage: ${script_PROGNAME} two green [options]"
         script_DESCRIPTION='Example action tree: two green.'
         mbfl_declare_option ALPHA no a alpha noarg 'Enable option alpha.'
         mbfl_declare_option BETA  '' b beta  witharg 'Set option beta.'
     }
     function script_before_parsing_options_CYAN () {
         script_USAGE="usage: ${script_PROGNAME} two cyan [options]"
         script_DESCRIPTION='Example action tree: two cyan.'
         mbfl_declare_option DELTA no d delta noarg 'Enable option delta.'
         mbfl_declare_option GAMMA '' g gamma witharg 'Set option gamma.'
     }
     
     function main () {
         mbfl_main_print_usage_screen_brief
     }
     function script_action_ONE () {
         mbfl_main_print_usage_screen_brief
     }
     function script_action_TWO () {
         mbfl_main_print_usage_screen_brief
     }
     function script_action_HELP () {
         mbfl_actions_fake_action_set MAIN
         mbfl_main_print_usage_screen_brief
     }
     
     function script_action_RED () {
         printf 'performing action red: alpha=%s, beta=%s\n' \
             "$script_option_ALPHA" "$script_option_BETA"
     }
     function script_action_BLUE () {
         printf 'performing action blue: delta=%s, gamma=%s\n' \
             "$script_option_DELTA" "$script_option_GAMMA"
     }
     function script_action_GREEN () {
         printf 'performing action green: alpha=%s, beta=%s\n' \
             "$script_option_ALPHA" "$script_option_BETA"
     }
     function script_action_CYAN () {
         printf 'performing action cyan: delta=%s, gamma=%s\n' \
             "$script_option_DELTA" "$script_option_GAMMA"
     }
     
     mbfl_main
     
     ### end of file
     # Local Variables:
     # mode: sh
     # End:


File: mbfl.info,  Node: actions declare,  Next: actions dispatch,  Prev: actions intro,  Up: actions

8.2 Declaring actions and action sets
=====================================

The structure of the action sets tree is stored in global variables
defined by default; we should never try to access such variables
directly.

 -- Function: mbfl_declare_action_set ACTION-SET
     Declare a new action set.  ACTION-SET must be a string satisfying
     'mbfl_string_is_name()' and representing the identifier of the
     action set.  It is an error to declare the same action set twice.

 -- Function: mbfl_declare_action ACTION-SET KEYWORD SUBSET IDENTIFIER
          DESCRIPTION
     Declare a new action belonging to an action set.  The arguments
     are:

     ACTION-SET
          A string representing the name of the action set this action
          belongs to.  The action set must have been previously declared
          with a call to 'mbfl_declare_action_set()'.

     KEYWORD
          A unique string (in this script) satisfying
          'mbfl_string_is_name()' and identifying this action.  The
          "main", "before parsing options" and "after parsing options"
          function names associated to this action are built as:

               script_action_$KEYWORD
               script_before_parsing_options_$KEYWORD
               script_after_parsing_options_$KEYWORD

     SUBSET
          If SUBSET is the string 'NONE' it means that this action is a
          leaf and it implements a script action; else SUBSET must be
          the identifier of an action set subordinate to ACTION-SET:
          this function is recursively called to process it.  The
          subordinate action set must have been previously declared with
          a call to 'mbfl_declare_action_set()'.

     IDENTIFIER
          A string satisfying 'mbfl_string_is_identifier()' and
          representing the argument on the command line used to select
          this action.  This string must be unique for this ACTION-SET.

     DESCRIPTION
          A string describing this action, to be used to compose the
          help screen.


File: mbfl.info,  Node: actions dispatch,  Next: actions inspect,  Prev: actions declare,  Up: actions

8.3 Dispatching action arguments
================================

 -- Function: mbfl_actions_dispatch ACTION-SET
     Parse the next command line argument and select accordingly the
     functions for the main module making use of the functions:

          mbfl_main_set_before_parsing_options
          mbfl_main_set_after_parsing_options
          mbfl_main_set_main

     If successful return true, else return false and print an error
     message to 'stderr'.  This function recursively calls itself,
     parsing command line arguments and traversing the tree of declared
     actions.

     ACTION-SET must be the name of an action set previously declared
     with 'mbfl_declare_action_set()'.  It is an error if this function
     is called with an ACTION-SET name specifying a non-existent action
     set.  If there are no command line arguments left upon entering
     this function: the values previously selected are silently
     accepted.

     The function 'mbfl_main()' verifies that the action set 'MAIN'
     exists and, if it does, it calls this function with argument
     'MAIN'.

     Upon entering this function, the following global variables must
     exist and have the specified values:

     'ARGV1'
          An array containing all the command line arguments.

     'ARGC1'
          A non-negative integer representing the number of values in
          'ARGV1'.

     'ARG1ST'
          A non-negative integer representing the index in 'ARGV1' of
          the next argument to be processed.

     all these variables are created by default by the MBFL 'main'
     module, *note Command line arguments variables: main variables.


File: mbfl.info,  Node: actions inspect,  Next: actions misc,  Prev: actions dispatch,  Up: actions

8.4 Inspecting action trees
===========================

 -- Function: mbfl_actions_set_exists ACTION-SET
     Return true if ACTION-SET is the identifier of an existent action
     set; else return false.

 -- Function: mbfl_actions_set_exists_or_none ACTION-SET
     Return true if ACTION-SET is the identifier of an existent action
     set or it is the string 'NONE'; else return false.


File: mbfl.info,  Node: actions misc,  Prev: actions inspect,  Up: actions

8.5 Other functions
===================

 -- Function: mbfl_actions_fake_action_set ACTION-SET
     Mutate MBFL's state to mimic the selection of an action set.  It is
     an error if ACTION-SET is not the name of an existent action set.
     This function should be used with care.

 -- Function: mbfl_actions_print_usage_screen
     If an action set has been selected and its name is not 'NONE':
     print the help screen documenting the actions available in the set.

 -- Function: exit_because_invalid_action_declaration
 -- Function: return_because_invalid_action_declaration
     Exit or return with code '96'.

 -- Function: exit_because_invalid_action_set
 -- Function: return_because_invalid_action_set
     Exit or return with code '97'.

 -- Function: exit_because_invalid_action_argument
 -- Function: return_because_invalid_action_argument
     Exit or return with code '95'

 -- Function: exit_because_missing_action_function
 -- Function: return_because_missing_action_function
     Exit or return with code '94'.


File: mbfl.info,  Node: getopts,  Next: message,  Prev: actions,  Up: Top

9 Parsing command line options
******************************

The 'getopts' module defines a set of procedures to be used to process
command line arguments with the following format:

'-a'
     Brief option 'a' with no value.

'-a123'
     Brief option 'a' with value '123'.

'--bianco'
     Long option 'bianco' with no value.

'--color=bianco'
     Long option 'color' with value 'bianco'.

* Menu:

* getopts arguments::           Arguments.
* getopts usage::               Using the module.
* getopts options::             Predefined options.
* getopts interface::           Interface functions.


File: mbfl.info,  Node: getopts arguments,  Next: getopts usage,  Up: getopts

9.1 Arguments
=============

The 'main' module contains, at the root level, a block of code like the
following:

     declare -i ARGC=0 ARGC1=0 ARG1ST=0
     declare -a ARGV ARGV1

     for ((ARGC1=0; $# > 0; ++ARGC1))
     do
         ARGV1[$ARGC1]=$1
         shift
     done

this block is executed when MBFL (and the script that loads it) is
evaluated.  Its purpose is to store command line arguments in the global
array 'ARGV1' and the number of command line arguments in the global
variable 'ARGC1'; the variable 'ARG1ST' references the next argument in
'ARGV1' that must be processed.

   The global array 'ARGV' and the global variable 'ARGC' are predefined
and should be used by the 'mbfl_getopts_*' functions to store non-option
command line arguments.  Processing performed by the 'getopts' module
must happen after processing performed by the 'actions' module.

   Example:

     $ script --gulp wo --gasp=123 wa

if the script makes use of MBFL, the strings 'wo' and 'wa' will go into
'ARGV' and 'ARGC' will be set to 2.  The option arguments are processed
and some action is performed to register them.

   We can access the non-option arguments with the following code:

     for ((i=0; $i < $ARGC; ++i))
     do
         # do something with ${ARGV[$i]}
     done

   When using the 'actions' module: the first arguments can be
interpreted as special values that select an action to be performed by
the script; in such case the first argument is removed from the 'ARGV'
array, so that processing the other arguments is not affected.  *note
Introduction to action trees: actions intro.


File: mbfl.info,  Node: getopts usage,  Next: getopts options,  Prev: getopts arguments,  Up: getopts

9.2 Using the module
====================

To use this module we have to declare a set of script options with the
function 'mbfl_declare_option()'.  Options declarations should be done
at the beginning of the script, before doing anything else, or in the
"before parsing options" functions.

   In the main block of the script, options are parsed by invoking
'mbfl_getopts_parse()': this function will update global variables and
invoke a script function for each option on the command line.  It can
also select a function to be invoked as the main action of the script.

Option with no argument
.......................

Example of option declaration:

     mbfl_declare_option ALPHA no a alpha noarg "enable alpha option"

this code declares an option with no argument having properties:

   * Global variable 'script_option_ALPHA', which will be set to 'no' by
     default and to 'yes' if the option is used.

   * Brief switch '-a'.

   * Long switch '--alpha'.

   * Description 'enable alpha option', to be shown in the usage help
     screen.

   If the option is used: the function 'script_option_update_alpha' is
invoked (if it exists) with no arguments, after the variable
'script_option_ALPHA' has been set to 'yes'; in the function name:
'alpha' is the lower case variant of the keyword 'ALPHA'.  Valid option
uses are:

     $ script.sh -a
     $ script.sh --alpha

Option with argument
....................

Example of option declaration:

     mbfl_declare_option BETA 123 b beta witharg "select beta value"

this code declares an option with argument having properties:

   * Global variable 'script_option_BETA', which will be set to '123' by
     default and to the value selected on the command line if the option
     is used.

   * Brief switch '-b'.

   * Long switch '--beta'.

   * Description 'select beta value', to be shown in the usage output.

   If the option is used: the function 'script_option_update_beta' is
invoked (if it exists) with no arguments, after the variable
'script_option_BETA' has been set to the selected value; in the function
name: 'beta' is the lower case variant of the keyword 'BETA'.  Valid
option uses are:

     $ script.sh -b456
     $ script.sh --beta=456

it is an error to use the switch '-b' or '--beta' with no argument (that
is: with an empty string as argument).

Action options
..............

A special option example:

     mbfl_declare_option ACTION_GAMMA \
        no g gamma noarg "do gamma action"
     mbfl_declare_option ACTION_DELTA \
        yes d delta noarg "do delta action"

this code declares two options with no arguments; the difference from
the other declarations is that the keywords are prefixed with 'ACTION_':
this prefix is recognised by the module and causes, if the option is
used on the command line, the following code to be evaluated at
arguments parsing time:

     mbfl_main_set_main script_action_gamma

or:

     mbfl_main_set_main script_action_delta

where the argument 'script_action_gamma' is built by prefixing the lower
case version of the keyword with 'script_'.  The code selects a function
as main function for the script.  *note Driving script execution: main
function.

   Additionally, if the default value is 'yes': the main function is
selected at declaration time (that is by 'mbfl_declare_option()'); this
is useful to declare an action option and select automatically the
action function.  In the example: the function 'script_action_delta()'
is selected as main action function.

   It is an error to declare a keyword prefixed with 'ACTION_' with an
option with argument ('witharg' as argument to 'mbfl_declare_option()').


File: mbfl.info,  Node: getopts options,  Next: getopts interface,  Prev: getopts usage,  Up: getopts

9.3 Predefined options
======================

A set of predefined options is recognised by the library and not handed
to the user defined functions.

'--tmpdir=DIR'
     Selects a directory for temporary files.  The default value is the
     one in the environment variable 'TMPDIR', or '/tmp/$USER' if that
     variable is not set.  The value is stored in the variable
     'mbfl_option_TMPDIR'.

'--encoded-args'
     Signals to the library that the non-option arguments and the option
     values are encoded in hexadecimal strings.  Encoding is useful to
     avoid quoting problems when invoking a script from another one.

     If this option is used: the values are decoded by
     'mbfl_getopts_parse()' before storing them in the 'ARGV' array and
     before being stored in the option's specific global variables.

'-v'
'--verbose'
     Turns on verbose messages.  If this option is used: The function
     'mbfl_option_verbose()' returns true.  *note Printing messages to
     the console: message.

'--silent'
     Turns off verbose messages.  If this option is used: The function
     'mbfl_option_verbose()' returns false.

'--verbose-program'
     If used: The '--verbose' option is added to the command line of
     external programs that support it.  The function
     'mbfl_option_verbose_program()' returns true or false depending on
     the state of this option.

'--show-program'
'--show-programs'
     Prints the command line of executed external programs.

'--debug'
     Turns on debugging messages.  Automatically turns on verbose
     messages and program showing.  *note Printing messages to the
     console: message.

'--test'
     Turns on test execution.  *note Testing a script and external
     programs: program testing.

'--null'
     Signals to the script that it has to use the null character to
     separate values, instead of the common newline.  The global
     variable 'mbfl_option_NULL' is set to 'yes'.

'-f'
'--force'
     Signals to the script that it does *not* have to query the user
     before doing dangerous operations, like overwriting files.  The
     global variable 'mbfl_option_INTERACTIVE' is set to 'no'.

'-i'
'--interactive'
     Signals to the script that it *does* have to query the user before
     doing dangerous operations, like overwriting files.  The global
     variable 'mbfl_option_INTERACTIVE' is set to 'yes'.

'--validate-programs'
     Validates the existence of all the programs needed by the script;
     then exits.  The exit code is zero if all the programs were found,
     one otherwise.

'--list-exit-codes'
     Prints a list of numerical exit codes and their associated names,
     as declared in the script.  *note Declaring exit codes: main exit.

'--print-exit-code=NAME'
     Prints the numerical exit code associated to 'NAME'.

'--print-exit-code-names=CODE'
     Prints the list of names associated to the numerical exit 'CODE'.

'--version'
     Prints to the standard output of the script the contents of the
     global variable 'mbfl_message_VERSION', then exits with code zero.
     The variable makes use of the service variables.  *note Required
     user defined variables: service variables.

'--version-only'
     Prints to the standard output of the script the contents of the
     global variable 'script_VERSION', then exits with code zero.  *note
     Required user defined variables: service variables.

'--license'
     Prints to the standard output of the script the contents of one of
     the global variables 'mbfl_message_LICENSE_*', then exits with code
     zero.  The variable makes use of the service variables.  *note
     Required user defined variables: service variables.

'-h'
'--help'
'--usage'
     Prints to the standard output of the script: the contents of the
     global variable 'script_USAGE'; a newline; the string 'options:'; a
     newline; an automatically generated string describing the options
     declared with 'mbfl_declare_option()'; a string describing the MBFL
     default options; the contents of the global variable
     'script_EXAMPLES'.  Then exits with code zero.  *note Required user
     defined variables: service variables.

'-H'
'--brief-help'
'--brief-usage'
     Prints to the standard output of the script: the contents of the
     global variable 'script_USAGE'; a newline; the string 'options:'; a
     newline; an automatically generated string describing the options
     declared with 'mbfl_declare_option()'.  Then exits with code zero.

     The difference with '--help' is that predefined options and usage
     examples are not displayed.

'--print-options'
     Print all the long options with
     'mbfl_getopts_print_long_switches()', then exit the script with
     code zero.

   The following functions may be used to set, unset and query the state
of the predefined options.

 -- Function: mbfl_option_encoded_args
 -- Function: mbfl_set_option_encoded_args
 -- Function: mbfl_unset_option_encoded_args
     Query/set/unset the encoded arguments option.

     'mbfl_option_encoded_args()' returns true if the option
     '--encoded-args' was used on the command line.

 -- Function: mbfl_option_verbose
 -- Function: mbfl_set_option_verbose
 -- Function: mbfl_unset_option_verbose
     Query/set/unset the verbose messages option.

     'mbfl_option_verbose()' returns true if the option '--verbose' was
     used on the command line after all the occurrences of '--silent';
     it returns false if the option '--silent' was used on the command
     line after all the occurrences of '--verbose'.

 -- Function: mbfl_option_verbose_program
 -- Function: mbfl_set_option_verbose_program
 -- Function: mbfl_unset_option_verbose_program
     Query/set/unset verbose execution for external programs.

     This option, of course, is supported only for programs that are
     known by MBFL (like 'rm'): if a program is executed with
     'mbfl_program_exec()', it is responsibility of the caller to use
     the option.

 -- Function: mbfl_option_show_program
 -- Function: mbfl_set_option_show_program
 -- Function: mbfl_unset_option_show_program
     Print the command line of executed external program.  This does not
     disable program execution, it just prints the command line before
     executing it.

 -- Function: mbfl_option_test
 -- Function: mbfl_set_option_test
 -- Function: mbfl_unset_option_test
     Query/set/unset the test execution option.

 -- Function: mbfl_option_debug
 -- Function: mbfl_set_option_debug
 -- Function: mbfl_unset_option_debug
     Query/set/unset the debug messages option.

 -- Function: mbfl_option_null
 -- Function: mbfl_set_option_null
 -- Function: mbfl_unset_option_null
     Query/set/unset the null list separator option.

 -- Function: mbfl_option_interactive
 -- Function: mbfl_set_option_interactive
 -- Function: mbfl_unset_option_interactive
     Query/set/unset the interactive execution option.

     'mbfl_option_interactive()' returns true if the option
     '--interactive' was used on the command line after all the
     occurrences of '--force'; it returns false if the option '--force'
     was used on the command line after all the occurrences of
     '--interactive'.

   The following are special option functions.

 -- Function: mbfl_option_test_save
     Save the current state of the test option then invokes
     'mbfl_unset_option_test()'.

 -- Function: mbfl_option_test_restore
     Restore the state of the test option to the one before the
     invocation to 'mbfl_option_test_save()'.


File: mbfl.info,  Node: getopts interface,  Prev: getopts options,  Up: getopts

9.4 Interface functions
=======================

Every declared option should have a long switch, the brief switch can be
omitted.

 -- Function: mbfl_declare_option KEYWORD DEFAULT BRIEF LONG HASARG
          DESCRIPTION
     Declare a new option.  Arguments description follows.

     KEYWORD
          A string identifying the option; internally it is used to
          build a function name and a variable name.  It is safer to
          limit this string to the letters in the ranges 'a-z', 'A-Z'
          and underscores.

     DEFAULT
          The default value for the option.  For an option with argument
          it can be anything; for an option with no argument: it must be
          'yes' or 'no'.

     BRIEF
          The brief option selector: a single character.  It is safer to
          choose a single letter (lower or upper case) in the ASCII
          standard.

     LONG
          The long option selector: a string.  It is safer to choose a
          sequence of letters in the ASCII standard, separated by
          underscores or dashes.

     HASARG
          Either 'witharg' or 'noarg': declares if the option requires
          an argument or not.

     DESCRIPTION
          A one-line string briefly describing the option.

 -- Function: mbfl_getopts_parse
     Parse a set of command line options.  The options are handed to
     user defined functions.  The global array 'ARGV1' and the global
     variable 'ARGC1' must hold the command line arguments and the
     number of command line arguments, the global variable 'ARG1ST' must
     hold the index of the first element in 'ARGV1' that must be parsed.
     Non-option arguments are left in the global array 'ARGV', the
     global variable 'ARGC' holds the number of elements in 'ARGV'.

     If successful return '0', else return '1'.

 -- Function: mbfl_getopts_islong STRING
 -- Function: mbfl_getopts_islong STRING VARNAME
     Verify if a string has the format of a long option without
     argument.  STRING is the string to validate.  The optional VARNAME
     is the name of a variable that this function will set to the option
     name from STRING, without the leading dashes.

     Return with code zero if the string is a long option without
     argument, else returns with code one.

     An option must be of the form '--option', only characters in the
     ranges 'A-Z', 'a-z', '0-9' and the characters '-' and '_' are
     allowed in the option name.

     Usage examples:

          mbfl_getopts_islong --option            => 0
          mbfl_getopts_islong --option=123        => 1
          mbfl_getopts_islong gasp                => 1

 -- Function: mbfl_getopts_islong_with STRING
 -- Function: mbfl_getopts_islong_with STRING OPTNAME VARNAME
     Verify if a string has the format of a long option with argument.
     Arguments:

     STRING
          The string to validate.

     OPTNAME
          Optional name of a variable that this function will set to the
          option name from STRING, without the leading dashes.

     VARNAME
          Optional name of a variable that this function will set to the
          option value from STRING.

     Return with code '0' if the string is a long option with argument.
     Return with code '1' if the string is not an option with argument.

     An option must be of the form '--option=value', only characters in
     the ranges 'A-Z', 'a-z', '0-9' and the characters '-' and '_' are
     allowed in the option name.

     If the argument is not an option with value, the variable names are
     ignored.

     Usage examples:

          mbfl_getopts_islong_with --option=one   => 0
          mbfl_getopts_islong_with --option       => 1
          mbfl_getopts_islong_with wappa          => 1
          mbfl_getopts_islong_with --option=      => 1
          mbfl_getopts_islong_with --=            => 1

 -- Function: mbfl_getopts_isbrief STRING
 -- Function: mbfl_getopts_isbrief STRING VARNAME
     Verify if a string has the format of a brief option without
     argument.  STRING is the string to validate.  The optional VARNAME
     is the name of a variable that this function will set to the option
     name from STRING, without the leading dash.

     Return with code zero if the argument is a brief option without
     argument, else return with code one.

     A brief option must be of the form '-a', only characters in the
     ranges 'A-Z', 'a-z', '0-9' are allowed as option letters.

     Usage examples:

          mbfl_getopts_isbrief -o         => 0
          mbfl_getopts_isbrief -o123      => 1
          mbfl_getopts_isbrief gasp       => 1

 -- Function: mbfl_getopts_isbrief_with STRING
 -- Function: mbfl_getopts_isbrief_with STRING OPTNAME VALNAME
     Verify if a string has the format of a brief option with argument.
     Arguments:

     STRING
          The string to validate.

     OPTNAME
          Optional name of a variable that this function will set to the
          option name from STRING, without the leading dashes.

     VALNAME
          Optional name of a variable that this function will set to the
          option value.

     Return with code zero if the argument is a brief option without
     argument, else return with code one.

     A brief option must be of the form '-aV' ('a' is the option, 'V' is
     the value), only characters in the ranges 'A-Z', 'a-z', '0-9' are
     allowed as option letters.

     Usage examples:

          mbfl_getopts_isbrief_with -o123         => 0
          mbfl_getopts_isbrief_with -o            => 1
          mbfl_getopts_isbrief_with --option      => 1
          mbfl_getopts_isbrief_with wappa         => 1

 -- Function: mbfl_wrong_num_args REQUIRED PRESENT
     Validate the number of arguments.  REQUIRED is the required number
     of arguments, PRESENT is the given number of arguments on the
     command line.  If the number of arguments is different from the
     required one: print an error message and return with code one; else
     return with code zero.

 -- Function: mbfl_wrong_num_args_range MIN_REQUIRED MAX_REQUIRED ARGC
     Validate the number of arguments.  ARGC must be between
     MIN_REQUIRED and MAX_REQUIRED, inclusive.

 -- Function: exit_because_wrong_num_args
 -- Function: return_because_wrong_num_args
     Exit or return with code '98'.

 -- Function: mbfl_argv_from_stdin
     If the 'ARGC' global variable is set to zero: fills the global
     variable 'ARGV' with lines read from stdin.  If the global variable
     'mbfl_option_NULL' is set to 'yes': lines are read using the null
     character as terminator, else they are read using the standard
     newline as terminator.

     This function may block waiting for input.

 -- Function: mbfl_argv_all_files
     Check that all the arguments in 'ARGV' are file names of existent
     files.  Return with code zero if no errors, else print an error
     message and return with code 1.

 -- Function: mbfl_getopts_print_long_switches
     Print all the long switches in a row, separated by spaces.  This is
     useful to retrieve the option for Bash programmable completion.

 -- Function: exit_because_invalid_option_declaration
 -- Function: return_because_invalid_option_declaration
     Exit or return with code '93'.

 -- Function: exit_because_invalid_option_argument
 -- Function: return_because_invalid_option_argument
     Exit or return with code '92'.


File: mbfl.info,  Node: message,  Next: program,  Prev: getopts,  Up: Top

10 Printing messages to the console
***********************************

This module allows us to print messages to an output channel.  Various
forms of message are supported.  All the function names are prefixed
with 'mbfl_message_'.  Almost all the messages will have one of the
forms:

     <progname>: <message>
     <progname>: error: <message>
     <progname>: warning: <message>
     <progname>: debug: <message>

* Menu:

* message config::              Message module configuration.
* message plain::               Printing plain messages.
* message format::              Printing formatted messages.


File: mbfl.info,  Node: message config,  Next: message plain,  Up: message

10.1 Message module configuration
=================================

 -- Function: mbfl_message_set_progname PROGNAME
     Set the script's official name to put at the beginning of messages.
     This value is initialised to 'script_PROGNAME'.

 -- Function: mbfl_message_set_channel CHANNEL
     Select the channel to be used to output messages.  CHANNEL must be
     a numeric string, otherwise: an error is printed on the old channel
     and the function returns false.  This value is initialised to '2',
     which is 'stderr'.


File: mbfl.info,  Node: message plain,  Next: message format,  Prev: message config,  Up: message

10.2 Printing plain messages
============================

 -- Function: mbfl_message_string STRING
     Output a message to the selected output channel.  Echo a string
     composed of: the selected program name, a colon, a space, STRING.
     No newline character is appended to the message.  Escape characters
     supported by 'printf' are allowed in STRING.

 -- Function: mbfl_message_verbose STRING
     Output a message to the selected output channel, but only if the
     evaluation of the function 'mbfl_option_verbose()' returns true.

     Echo a string composed of: the selected program name, a colon, a
     space, STRING.  No newline character is appended to the message.
     Escape characters supported by 'printf' are allowed in STRING.

 -- Function: mbfl_message_verbose_end STRING
     Output a message to the selected output channel, but only if the
     evaluation of the function 'mbfl_option_verbose()' returns true.
     Echo the string.  No newline character is appended to the message.
     Escape characters supported by 'printf' are allowed in STRING.

     If STRING is empty: this function just prints a newline when
     verbose execution is enabled.

 -- Function: mbfl_message_error STRING
     Output an error message to the selected output channel.  Echo a
     string composed of: the selected program name, a colon, a space,
     the string 'error', a colon, a space, STRING, a newline character.
     Escape characters supported by 'printf' are allowed in STRING.

 -- Function: mbfl_message_warning STRING
     Output a warning message to the selected output channel.  Echo a
     string composed of: the selected program name, a colon, a space,
     the string 'warning', a colon, a space, STRING, a newline
     character.  Escape characters supported by 'printf' are allowed in
     STRING.

 -- Function: mbfl_message_debug STRING
     Output a message to the selected output channel, but only if the
     evaluation of the function 'mbfl_option_debug()' returns true.
     Echo a string composed of: the selected program name, a colon, a
     space, STRING, a newline character.  Escape characters supported by
     'printf' are allowed in STRING.


File: mbfl.info,  Node: message format,  Prev: message plain,  Up: message

10.3 Printing formatted messages
================================

 -- Function: mbfl_message_verbose_printf TEMPLATE [ARG ...]
     Format the arguments in the same way 'printf' would do; output the
     resulting string to the selected output channel, but only if the
     evaluation of the function 'mbfl_option_verbose()' returns true.

     Echo a string composed of: the selected program name, a colon, a
     space, the formatting result.  No newline character is appended to
     the message.

 -- Function: mbfl_message_error_printf TEMPLATE [ARG ...]
     Format the arguments in the same way 'printf' would do; output the
     resulting string to the selected output channel.

     Echo a string composed of: the selected program name, a colon, a
     space, the string 'error', a colon, a space, the formatting result,
     a newline character.

 -- Function: mbfl_message_warning_printf TEMPLATE [ARG ...]
     Format the arguments in the same way 'printf' would do; output the
     resulting string to the selected output channel.

     Echo a string composed of: the selected program name, a colon, a
     space, the string 'warning', a colon, a space, the formatting
     result, a newline character.

 -- Function: mbfl_message_debug_printf TEMPLATE [ARG ...]
     Format the arguments in the same way 'printf' would do; output the
     resulting string to the selected output channel, but only if the
     evaluation of the function 'mbfl_option_debug()' returns true.

     Echo a string composed of: the selected program name, a colon, a
     space, the string 'debug', a colon, a space, the formatting result.
     No newline character is appended to the message.


File: mbfl.info,  Node: program,  Next: interfaces,  Prev: message,  Up: Top

11 Using external programs
**************************

* Menu:

* program testing::             Testing a script and running programs.
* program checking::            Checking programs existence.
* program executing::           Executing a program.
* program declaring::           Declaring the intention to use a
                                program.


File: mbfl.info,  Node: program testing,  Next: program checking,  Up: program

11.1 Testing a script and running programs
==========================================

MBFL allows a script to execute a "dry run", that is: do not perform any
operation on the system, just print messages describing what will happen
if the script is executed with the selected options.  This implies, in
the MBFL model, that no external program is executed.

   When this feature is turned on: 'mbfl_program_exec()' does not
execute the program, instead it prints the command line on standard
error and it returns true.

 -- Function: mbfl_set_option_test
     Enable the script test option.  After this: a script must not
     mutate the system in any way, it should just print messages
     describing the operations.

     However, the script is allowed to acquire informations from the
     system; for example it can acquire the list of files in a directory
     or load the contents of a file.

     This function is invoked when the predefined option '--test' is
     used on the command line.

 -- Function: mbfl_unset_option_test
     Disable the script test option.  After this a script must perform
     normal operations.

 -- Function: mbfl_option_test
     Return true if test execution is enabled, else return false.


File: mbfl.info,  Node: program checking,  Next: program executing,  Prev: program testing,  Up: program

11.2 Checking programs existence
================================

The simpler way to test the availability of a program is to look for it
just before it is used.

 -- Array: mbfl_split_PATH
     After a call to 'mbfl_program_split_path()': this array is filled
     with the components of the 'PATH' variable.

 -- Function: mbfl_program_split_path
     If the number of pairs in the global array 'mbfl_split_PATH' is
     zero: split the current value of PATH into its components by
     splitting the string using the colon character ':' as separator;
     store the result in the global array 'mbfl_split_PATH'; finally
     return true.

     If the number of pairs in the global array 'mbfl_split_PATH' is not
     zero: do nothing and return false.

     We can print the contents of the array with:

          local -i i

          for ((i=0; i < ${#mbfl_split_PATH[@]}; ++i))
          do echo "${mbfl_split_PATH[$i]}"
          done

     To force a resplit, just reset the array to the empty state with:

          mbfl_split_PATH=()

 -- Function: mbfl_program_find PROGRAM
 -- Function: mbfl_program_find_var _RV PROGRAM
     Search for a program in the standard search path.  Print the full
     pathname of the program found, or an empty string if nothing is
     found.  If an executable file is found: return true; otherwise
     return false.

     The search path is the one in the environment variable ENV as found
     by 'mbfl_program_split_path()'.  The contained directories are
     searched in the order in which they appear in 'PATH'.  There are
     rules:

        * If PROGRAM is an absolute pathname (according to
          'mbfl_file_is_absolute()'): only that absolute pathname is
          verified as executable file.  PATH is ignored.

        * If PROGRAM is a relative pathname with at least one slash
          character in it: only that relative pathname is verified as
          executable file.  PATH is ignored.

        * If PROGRAM is a relative pathname without slash characters in
          it: the standard search path is used.

     The '_var' function variant will store the result in the variable
     _RV rather than print it.


File: mbfl.info,  Node: program executing,  Next: program declaring,  Prev: program checking,  Up: program

11.3 Executing a program
========================

This module provides an API to execute a program under the privileges of
the current user or under a more or less privileged user; 'sudo' is used
run a program as a different user: refer to its documentation for the
required configuration; 'whoami' is used to determine to which user the
process belongs.

   At package configuration time we can specify which 'sudo' and
'whoami' executables to use through the following options for the
configuration script 'configure':

'--with-sudo=/path/to/sudo'
     Allows the selection of the pathname to the executable 'sudo'; this
     pathname is hard-coded in the library.  It defaults to:
     '/usr/bin/sudo'.

'--with-whoami=/path/to/whoami'
     Allows the selection of the pathname to the executable 'whoami';
     this pathname is hard-coded in the library.  It defaults to:
     '/usr/bin/whoami'.

   The functions described here must be used in the following way:

   * To execute a program under the current user privileges:

          mbfl_program_exec ls /bin

   * To execute a program under a more or less privileged user:

          # At the beginning of the script:
          mbfl_program_enable_sudo

          # When executing a program:
          mbfl_program_declare_sudo_user root
          mbfl_program_exec ls /root

   Every time we execute a program with 'sudo': we have to select the
user under which to execute it; if we do not do it: the internally
registered user defaults to 'nosudo', which tells the function *not* to
use 'sudo'.  So the following script works as commented:

     mbfl_program_enable_sudo

     # This is executed with the privileges of the user that
     # launched the script.
     mbfl_program_exec ls /bin

     mbfl_program_declare_sudo_user root
     # This is executed with root privileges.
     mbfl_program_exec ls /root

     # This is executed with the privileges of the user that
     # launched the script.
     mbfl_program_exec ls /bin

 -- Function: mbfl_program_exec PROGRAM
 -- Function: mbfl_program_exec PROGRAM ARG ...
     Evaluate a command line.  PROGRAM identifies an executable file: it
     can be the program name, or a relative or absolute pathname.  The
     optional ARG values are command line arguments that are handed to
     the program unchanged.

     If usage of 'sudo' was requested, the command is executed with it;
     then the 'sudo' request is reset.  This means that this function
     "consumes" a 'sudo' request.

     See below for the redirection of the standard error channel.

     If the function 'mbfl_option_test()' returns true: instead of
     evaluation, the command line is sent to stderr.

     If the function 'mbfl_option_show_program()' returns true: the
     command line is sent to stderr, then it is executed.

 -- Function: mbfl_program_execbg INCHAN OUCHAN PROGRAM
 -- Function: mbfl_program_execbg INCHAN OUCHAN PROGRAM ARG ...
     Does all the same things of 'mbfl_program_exec()', running the
     given command line as:

          PROGRAM ARG ... <&INCHAN >&OUCHAN &

     additionally: set the global variable 'mbfl_program_BGPID' to the
     process ID of the background process; that is: 'mbfl_program_BGPID'
     is the value of '$!' right after the process execution.

     Using this function is different from calling:

          mbfl_program_exec ls <&INCHAN >&OUCHAN &

     because doing so puts in the background the function call (in a
     subshell) and then runs the program.

     Notice that we *must* always use numeric file descriptors as INCHAN
     and OUCHAN arguments.  Also we can always use the default file
     descriptors, for example:

          mbfl_program_execbg 0 1 /bin/ls

     The readable aliases '/dev/stdin', '/dev/stdout', '/dev/fd/0',
     '/dev/fd/1' are *not* usable as INCHAN and OUCHAN arguments
     (remember that the aliases are *not* available, for example, when
     the script is run from a cron job).

 -- Function: mbfl_program_replace PROGRAM
 -- Function: mbfl_program_replace PROGRAM [OPT ...]
     Like 'mbfl_program_exec()', but execute the program through the
     Bash command 'exec', so replacing the current process without
     creating a new one.

 -- Variable: mbfl_program_BGPID
     Used by 'mbfl_program_execbg()' to store the process id of the
     program executed in background.

 -- Function: mbfl_program_enable_sudo
     Declare the intention to use 'sudo' and other commands required to
     use it.  The declared programs are: 'sudo', 'whoami'.

     This function does *not* use 'mbfl_declare_program()'.

 -- Function: mbfl_program_declare_sudo_user USER
     Register USER as the user under which to execute the next program
     through 'sudo'; the user will be selected using the '-u' option of
     'sudo'.  The value 'nosudo' means: do not use 'sudo'.

     The string USER must satisfy the function
     'mbfl_string_is_username()', else the function will print an error
     message to 'stderr' and exit with
     'exit_because_invalid_sudo_username()'.

     When the time comes: if the selected user name equals the value
     printed by 'whoami', 'sudo' is not used.

 -- Function: exit_because_invalid_sudo_username
 -- Function: return_because_invalid_sudo_username
     Exit or return with code '90'.

 -- Function: mbfl_program_reset_sudo_user
     Reset the previously requested 'sudo' user to a value that will
     cause 'sudo' not to be used in the next program invocation.  This
     is useful to abort a user request.

 -- Function: mbfl_program_sudo_user
     Print the current 'sudo' user.

 -- Function: mbfl_program_requested_sudo
     Return true if the usage of 'sudo' has been requested for the next
     command execution.

 -- Function: mbfl_program_declare_sudo_options [OPT ...]
     Select additional command line options to use on the next
     invocation of 'sudo'.  These values are consumed by the first use
     of 'mbfl_program_exec()'.

 -- Function: mbfl_program_reset_sudo_options
     Clean the options previously set by
     'mbfl_program_declare_sudo_options()'.

Executing a subshell
....................

 -- Function: mbfl_program_bash [OPT ...]
     Execute 'bash' with the ARG arguments appended.  The 'bash'
     pathname is registered in the library at start up, from the built
     in variable 'BASH'.

 -- Function: mbfl_program_bash_command COMMAND
     Execute COMMAND in a 'bash' subprocess, using the '-c' switch.  The
     'bash' pathname is registered in the library at start up, from the
     built in variable 'BASH'.

Redirecting the standard error channel
......................................

There are programs that output useful informations on their stderr
channel (example: the 'at' command).

 -- Function: mbfl_program_redirect_stderr_to_stdout
     Just for the next invocation to 'mbfl_program_exec()' redirect
     stderr to stdout, that is: use the '2>&1' redirection for the
     executed program.

   This is useful because redirecting the output of
'mbfl_program_exec()':

     echo ls | \
         mbfl_program_exec at 'now +25 minutes' 2>&1 | \
         while read

redirects also the "show program" output (*note getopts options:: for
the '--show-program' option explanation and see the above description of
'mbfl_program_exec()').  Instead By using:

     mbfl_program_redirect_stderr_to_stdout
     echo ls | \
         mbfl_program_exec at 'now +25 minutes' | \
         while read

the "show program" output goes to stderr and the stderr output of the
'at' command is, internally, redirected to the stdout of
'mbfl_program_exec()'.


File: mbfl.info,  Node: program declaring,  Prev: program executing,  Up: program

11.4 Declaring the intention to use a program
=============================================

To make a script model simpler, we assume that the unavailability of a
program at the time of its execution is a fatal error.  So if we need to
execute a program and the executable is not there, the script must be
aborted on the spot.

   Functions are provided to test the availability of a program, so we
can try to locate an alternative or terminate the process under the
script control.  On a system where executables may vanish from one
moment to another, no matter how we test a program's existence, there's
always the possibility that the program is not "there" when we invoke
it.

   If we just use 'mbfl_program_exec()' to invoke an external program,
the function will try and fail if the executable is unavailable: the
return code will be false.

   The vanishing of a program is a rare event: if it's there when we
look for it, probably it will be there also a few moments later when we
invoke it.  For this reason, MBFL proposes a set of functions with which
we can declare the intention of a script to use a set of programs.

   A command line option is predefined to let the user test the
availability of all the declared programs before invoking the script.
*note Predefined options: getopts options.

 -- Function: mbfl_declare_program PROGRAM
     Register PROGRAM as the name of a program required by the script;
     'mbfl_program_find()' is used to locate the program on the system.
     *note Checking programs existence: program checking.

     If PROGRAM is a file name with no directory part (examples: 'sed',
     'grep') the selected program is the full pathname of the file in
     one of the directories of 'PATH'.

     If PROGRAM is a relative pathname (examples: '../bin/sed',
     './grep'): the selected program is the full pathname of the file
     normalised by this function with respect to the current working
     directory (with a call to 'mbfl_file_normalise()').

     The return value is always zero.

 -- Function: mbfl_program_validate_declared
     Validate the existence of all the declared programs.  The return
     value is zero if all the programs are found, one otherwise.

     This function is invoked by 'mbfl_getopts_parse()' when the
     '--validate-programs' option is used on the command line.

     It may be a good idea to invoke this function at the beginning of a
     script, just before starting to do stuff, example:

          mbfl_program_validate_declared || \
             exit_because_program_not_found

     If verbose messages are enabled: a brief summary is echoed to
     stderr; from the command line the option '--verbose' must be used
     before '--validate-programs'.

 -- Function: mbfl_program_found PROGRAM
 -- Function: mbfl_program_found_var _RV PROGRAM
     Print the pathname of the previously declared PROGRAM.  Return zero
     if the program was found, otherwise print an error message and exit
     the current (sub)shell by invoking
     'exit_because_program_not_found()'.

     This function should be used to retrieve the pathname of the
     program to be used as first argument to 'mbfl_program_exec()':

     The function variant '_var' will store the result in _RV rather
     than printing it.

          function program_wrapper () {
              mbfl_mandatory_parameter(ARGUMENT, 1, argument)
              shift
              local PROGNAME FLAGS

              mbfl_program_found_var PROGNAME myprog || exit $?

              mbfl_option_verbose_program && FLAGS+=' --verbose'
              mbfl_program_exec "$PROGNAME" $FLAGS "$ARGUMENT" "$@"
          }

     Remember that we cannot use:

          local PROGNAME=$(mbfl_program_found 'myprog') || exit $?

     because 'local' has exit status zero even if 'mbfl_program_found()'
     fails, so the error will not be reported.

 -- Function: exit_because_program_not_found
 -- Function: return_because_program_not_found
     Exit or return with code '99'.


File: mbfl.info,  Node: interfaces,  Next: signal,  Prev: program,  Up: Top

12 Interfaces to external programs
**********************************

* Menu:

* interfaces at::               Scheduling jobs for later execution.


File: mbfl.info,  Node: interfaces at,  Up: interfaces

12.1 Scheduling jobs for later execution
========================================

This section documents the interface to the 'atd' daemon; we may want to
read the 'at'(1) manual page.  The 'at' service allows a user to
schedule commands to be executed at a later time.

   This interface is suitable for scripts that define a unique simple
policy to schedule commands; example: at each run they schedule a
command in a fixed queue, to be executed at a fixed time in the future.

   This is good to implement the logic: if a condition does not happen
before time 'T', then execute command 'C'.

Commands declaration
....................

 -- Function: mbfl_at_enable
     Declare the intention to use the 'at' interface.  *note Declaring
     the intention to use a program: program declaring.

     The declared programs are: 'at', 'atq', 'atrm'.

Arguments validation
....................

 -- Function: mbfl_at_validate_queue_letter LETTER
     Return true if LETTER is a valid queue identifier, else return
     false.

 -- Function: mbfl_at_validate_selected_queue
     Return true if the currently selected queue identifier is valid,
     else print an error message and return false.  A false return code
     means that an internal error has corrupted the module's state.

Commands scheduling
...................

 -- Function: mbfl_at_select_queue LETTER
     Select and register in an internal state a queue identifier; invoke
     'mbfl_at_validate_queue_letter()' to validate the selection.

 -- Function: mbfl_at_schedule COMMAND TIME
     Schedule COMMAND in the currently selected queue; the script will
     be executed at TIME.

     If no error occurs: print to stdout the identifier of the scheduled
     job; the identifier can be used as argument to 'mbfl_at_drop()'.

          The 'at' command outputs some text (in which the job is
          embedded) on its 'stderr' channel, so this function redirects
          'stderr' to 'stdout' to return the value; this operation
          conflicts with the use of the "show program" feature of
          'mbfl_program_exec()'.

     COMMAND must be a string representing the invocation of an external
     executable program: it is sent unchanged to the 'at' command.  TIME
     is the argument to the 'at' command, see the manual page for its
     description.

 -- Function: mbfl_at_drop IDENTIFIER
     Remove a job; the identifier of a job is unique in all the queues,
     so this function is not affected by the currently selected queue.

 -- Function: mbfl_at_queue_clean
     Remove all the jobs from the currently selected queue.

Inspection
..........

 -- Function: mbfl_at_queue_print_identifiers
     Print all the job identifiers in the currently selected queue.

 -- Function: mbfl_at_queue_print_jobs
     Print all the job descriptions in the currently selected queue.

 -- Function: mbfl_at_queue_print_queues
     Print the letters identifying queues with pending jobs.

 -- Function: mbfl_at_print_queue
     Print the currently selected queue letter.


File: mbfl.info,  Node: signal,  Next: strings,  Prev: interfaces,  Up: Top

13 Catching signals
*******************

MBFL provides an interface to the 'trap' builtin that allows the
execution of more than one function when a signal is received; this may
sound useless, but that is it.

 -- Function: mbfl_signal_map_signame_to_signum SIGSPEC
     Convert SIGSPEC to the corresponding signal number, then print the
     number.

 -- Function: mbfl_signal_attach SIGSPEC HANDLER
     Append HANDLER to the list of functions that are executed whenever
     SIGSPEC is received.

 -- Function: mbfl_signal_invoke_handlers SIGNUM
     Invoke all the handlers registered for SIGNUM.  This function is
     not meant to be used during normal scripts execution, but it may be
     useful to debug a script.


File: mbfl.info,  Node: strings,  Next: dialog,  Prev: signal,  Up: Top

14 Manipulating strings
***********************

* Menu:

* strings quote::               Quoted characters.
* strings inspection::          Inspecting a string.
* strings splitting::           Splitting a string.
* strings case::                Converting between upper and lower case.
* strings class::               Matching a string with a class.
* strings comparison::          Comparing strings.
* strings misc::                Miscellaneous functions.


File: mbfl.info,  Node: strings quote,  Next: strings inspection,  Up: strings

14.1 Quoted characters
======================

 -- Function: mbfl_string_is_quoted_char STRING POSITION
     Return true if the character at POSITION in STRING is quoted; else
     return false.  A character is considered quoted if it is preceded
     by an odd number of backslashes ('\').  POSITION is a zero-based
     index.

          mbfl_string_is_quoted_char 'abcdefg'  3 ;$? => 1
          mbfl_string_is_quoted_char 'ab\cdefg' 3 ;$? => 0
          mbfl_string_is_quoted_char 'ab\ndefg' 3 ;$? => 0

 -- Function: mbfl_string_is_equal_unquoted_char STRING POSITION CHAR
     Return true if the character at POSITION in STRING is equal to CHAR
     and is not quoted (according to 'mbfl_string_is_quoted_char()');
     else return false.  POSITION is a zero-based index.

          mbfl_string_is_equal_unquoted_char abcdefg 3 d
          ;$? => 0

          mbfl_string_is_equal_unquoted_char 'abc\defg' 3 d
          ;$? => 1

 -- Function: mbfl_string_quote STRING
 -- Function: mbfl_string_quote_var _RV STRING
     Print STRING with quoted characters.  All the occurrences of the
     backslash character, '\', are substituted with a quoted backslash,
     '\\'.  Return true.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_string_quote \\a\\b\\c     -| \\\\a\\\\b\\\\c
          mbfl_string_quote abc           -| abc
          mbfl_string_quote "a b\tc\n\r"  -| a\ b\\\\tc\\\\n\\\\r

          local _RV
          mbfl_string_quote_var _RV \\a\\b\\c
          "$_RV"   => \\\\a\\\\b\\\\c


File: mbfl.info,  Node: strings inspection,  Next: strings splitting,  Prev: strings quote,  Up: strings

14.2 Inspecting a string
========================

 -- Function: mbfl_string_length STRING
     Print an integer representing the length of STRING.  The argument
     STRING can be an empty string.

 -- Function: mbfl_string_length_equal_to LENGTH STRING
     Return successfully if STRING has length equal to LENGTH.  The
     argument LENGTH must be a non-negative integer; the argument STRING
     can be an empty string.

 -- Function: mbfl_string_is_empty STRING
     Return successfully if STRING is empty.

 -- Function: mbfl_string_is_not_empty STRING
     Return successfully if STRING is not empty.

 -- Function: mbfl_string_index STRING INDEX
 -- Function: mbfl_string_index_var _RV STRING INDEX
     Select a character from a string.  Echo to stdout the selected
     character.  If the index is out of range: the empty string is
     echoed to stdout, that is: a newline is echoed to stdout.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_string_index abcdefghilm  0        -| a
          mbfl_string_index abcdefghilm  4        -| e
          mbfl_string_index abcdefghilm 10        -| m
          mbfl_string_index abcdefghilm 11        -| <empty string>

          local _RV
          mbfl_string_index_var _RV abcdefghilm 0
          "$_RV" => a

 -- Function: mbfl_string_first STRING CHAR
 -- Function: mbfl_string_first STRING CHAR BEGIN
 -- Function: mbfl_string_first_var _RV STRING CHAR
 -- Function: mbfl_string_first_var _RV STRING CHAR BEGIN
     Search characters in a string.  Arguments: STRING, the target
     string; CHAR, the character to look for; BEGIN, optional, the index
     of the character in the target string from which the search begins
     (defaults to zero).

     If the character is found: print an integer representing the index
     of the last occurrence of CHAR in STRING, then return with status
     zero.  If the character is not found: print nothing and return with
     status one.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_string_first abcdefghilm d         -| 3
          mbfl_string_first abcdefghilm a         -| 0
          mbfl_string_first abcdefghilm m         -| 10
          mbfl_string_first abcdefghilm X         -| <empty string>

          mbfl_string_first abcdeabcde  a 3       -| 5
          mbfl_string_first abcdeabcde  e 5       -| 9
          mbfl_string_first abcdeabcde  e 4       -| 4

          local _RV
          mbfl_string_first_var _RV abcdefghilm d
          "$_RV" => 3

 -- Function: mbfl_string_last STRING CHAR
 -- Function: mbfl_string_last STRING CHAR BEGIN
 -- Function: mbfl_string_last_var _RV STRING CHAR
 -- Function: mbfl_string_last_var _RV STRING CHAR BEGIN
     Search characters in a string starting from the end.  Arguments:
     STRING, the target string; CHAR, the character to look for; BEGIN,
     optional, the index of the character in the target string from
     which the search begins (defaults to zero).

     If the character is found: print an integer representing the index
     of the last occurrence of CHAR in STRING, then return with status
     zero.  If the character is not found: print nothing and return with
     status one.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_string_last abcdefghilm d          -| 3
          mbfl_string_last abcdefghilm a          -| 0
          mbfl_string_last abcdefghilm m          -| 10
          mbfl_string_last abcdefghilm X          -| <empty string>

          mbfl_string_last abcdefghilm a 3        -| 0
          mbfl_string_last abcdeabcde  a 7        -| 5
          mbfl_string_last abcdeabcde  e 7        -| 4
          mbfl_string_last abcdeabcde  e 4        -| 4

          local _RV
          mbfl_string_last_var _RV abcdefghilm d
          "$_RV" => 3

 -- Function: mbfl_string_range STRING BEGIN
 -- Function: mbfl_string_range STRING BEGIN END
 -- Function: mbfl_string_range_var _RV STRING BEGIN
 -- Function: mbfl_string_range_var _RV STRING BEGIN END
     Extract a range of characters from a string.  Arguments: STRING,
     the source string; BEGIN, the index of the first character in the
     range; END, optional, the index of the character past the last in
     the range, this character is not extracted.

     END defaults to the string length; if the parameter END is set to
     the lowercase string 'end' or the uppercase string 'END': the end
     index is set to the string length.

     Echo to stdout the selected range of characters, which may be the
     empty string.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_string_range abcdefghilm 0 end     -| abcdefghilm
          mbfl_string_range abcdefghilm 0         -| abcdefghilm
          mbfl_string_range abcdefghilm 0 4       -| abcd
          mbfl_string_range abcdefghilm 4 end     -| efghilm

          local _RV
          mbfl_string_range_var _RV abcdefghilm 4 end
          "$_RV" => efghilm


File: mbfl.info,  Node: strings splitting,  Next: strings case,  Prev: strings inspection,  Up: strings

14.3 Splitting a string
=======================

 -- Variable: SPLITFIELD
     Array used by 'mbfl_string_chars()' to store the result of
     splitting a string.

 -- Variable: SPLITCOUNT
     Array used by 'mbfl_string_chars()' to store the number of values
     in 'SPLITFIELD'.

 -- Function: mbfl_string_chars STRING
     Split a string into characters.  Fill an array named 'SPLITFIELD'
     with the characters from the string; the number of elements in the
     array is stored in a variable named 'SPLITCOUNT'.  Both
     'SPLITFIELD' and 'SPLITCOUNT' can be declared 'local' in the scope
     of the caller.

     The difference between this function and using '${STRING:$i:1}', is
     that this function detects backslash characters, '\', and treats
     them as part of the following character.  So, for example, the
     sequence '\n' is treated as a single char.

   Example of usage for 'mbfl_string_chars()':

     local SPLITFIELD
     local -i SPLITCOUNT

     string="abcde\nfghilm"
     mbfl_string_chars "${string}"

     $SPLITCOUNT             => 12
     "${SPLITFIELD[0]}"    => a
     "${SPLITFIELD[1]}"    => b
     "${SPLITFIELD[2]}"    => c
     "${SPLITFIELD[3]}"    => d
     "${SPLITFIELD[4]}"    => e
     "${SPLITFIELD[5]}"    => \n
     "${SPLITFIELD[6]}"    => f
     "${SPLITFIELD[7]}"    => g
     "${SPLITFIELD[8]}"    => h
     "${SPLITFIELD[9]}"    => i
     "${SPLITFIELD[10]}"   => l
     "${SPLITFIELD[11]}"   => m

 -- Function: mbfl_string_split STRING SEPARATOR
     Split STRING into fields using SEPARATOR.  Fill an array named
     'SPLITFIELD' with the characters from the string; the number of
     elements in the array is stored in a variable named 'SPLITCOUNT'.
     We can declare both 'SPLITFIELD' and 'SPLITCOUNT' as 'local' in the
     scope of the caller.

 -- Function: mbfl_string_split_blanks STRING
     Split STRING into fields using adjacent blank characters as
     separators.  Fill an array named 'SPLITFIELD' with the characters
     from the string; the number of elements in the array is stored in a
     variable named 'SPLITCOUNT'.  We can declare both 'SPLITFIELD' and
     'SPLITCOUNT' as 'local' in the scope of the caller.

          local -a SPLITFIELD
          local -i SPLITCOUNT
          local STRING

          printf -v STRING 'abc\t \tdef\t\t ghi \t\tlmn\t \topq\t\t   rs'

          mbfl_string_split_blanks "$STRING"

          $SPLITCOUNT             => 6
          "${SPLITFIELD[0]}"      => abc
          "${SPLITFIELD[1]}"      => def
          "${SPLITFIELD[2]}"      => ghi
          "${SPLITFIELD[3]}"      => lmn
          "${SPLITFIELD[4]}"      => opq
          "${SPLITFIELD[5]}"      => rs


File: mbfl.info,  Node: strings case,  Next: strings class,  Prev: strings splitting,  Up: strings

14.4 Converting between upper and lower case
============================================

 -- Function: mbfl_string_toupper STRING
 -- Function: mbfl_string_toupper_var _RV STRING
     Output STRING with all the occurrences of lower case ASCII
     characters (no accents) turned into upper case.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_string_tolower STRING
 -- Function: mbfl_string_tolower_var _RV STRING
     Output STRING with all the occurrences of upper case ASCII
     characters (no accents) turned into lower case.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.


File: mbfl.info,  Node: strings class,  Next: strings comparison,  Prev: strings case,  Up: strings

14.5 Matching a string with a class
===================================

 -- Function: mbfl_string_is_alpha_char CHAR
     Return true if CHAR is in one of the ranges: '[a-z]', '[A-Z]'.

 -- Function: mbfl_string_is_digit_char CHAR
     Return true if CHAR is in the range: '0-9'.

 -- Function: mbfl_string_is_alnum_char CHAR
     Return true if:

          mbfl_string_is_alpha_char CHAR || \
             mbfl_string_is_digit_char CHAR

 -- Function: mbfl_string_is_noblank_char CHAR
     Return true if CHAR is none of the characters: ' ', '\n', '\r',
     '\f', '\t'.  CHAR is meant to be the unquoted version of the
     non-blank characters, the one obtained with:

          $'char'

 -- Function: mbfl_string_is_name_char CHAR
     Return true if 'mbfl_string_is_alnum_char()' returns true when
     applied to CHAR or CHAR is an underscore, '_'.

 -- Function: mbfl_string_is_identifier_char CHAR
     Return true if 'mbfl_string_is_alnum_char()' returns true when
     applied to CHAR or CHAR is an underscore, '_', or dash, '-'.

 -- Function: mbfl_string_is_extended_identifier_char CHAR
     Like 'mbfl_string_is_identifier_char()', but also accept dots '.'.

 -- Function: mbfl_string_is_alpha STRING
 -- Function: mbfl_string_is_digit STRING
 -- Function: mbfl_string_is_alnum STRING
 -- Function: mbfl_string_is_noblank STRING
 -- Function: mbfl_string_is_name STRING
 -- Function: mbfl_string_is_identifier STRING
 -- Function: mbfl_string_is_extended_identifier STRING
     Return true if STRING is non-empty and the associated char function
     returns true for each character in STRING.  As additional
     constraint:

        * 'mbfl_string_is_name()' returns false if
          'mbfl_string_is_digit()' returns true when applied to the
          first character of STRING.

        * 'mbfl_string_is_identifier()' and
          'mbfl_string_is_extended_identifier()' return false if
          'mbfl_string_is_digit()' returns true when applied to the
          first character of STRING or the first char of STRING is a
          dash.

 -- Function: mbfl_string_is_username STRING
     Return true if STRING is non-empty, all its characters are in the
     ranges '[a-zA-Z0-9_-]', the first character is in the range
     '[a-zA-Z_]'; else return false.

 -- Function: mbfl_string_is_email_address STRING
     Return true if STRING is non-empty and it matches the general shape
     of an email address; otherwise return false.

 -- Function: mbfl_string_is_network_hostname STRING
     Return true if STRING is non-empty and it matches the format of a
     network hostname; otherwise return false.

 -- Function: mbfl_string_is_network_port STRING
     Return true if STRING is non-empty and it matches the format of a
     network port number; otherwise return false.

 -- Function: mbfl_string_is_network_ip_address STRING
     Return true if STRING is non-empty and it matches the format of an
     IP address; otherwise return false.


File: mbfl.info,  Node: strings comparison,  Next: strings misc,  Prev: strings class,  Up: strings

14.6 Comparing strings
======================

 -- Function: mbfl_string_equal STR1 STR2
     Return successfully if the arguments are equal when
     lexicographically compared as strings; otherwise return
     unsuccessfully.  Examples:

          mbfl_string_equal '' ''                 => 0
          mbfl_string_equal 'a' ''                => 1
          mbfl_string_equal '' 'a'                => 1
          mbfl_string_equal 'ciao' 'ciao'         => 0
          mbfl_string_equal 'ciao' 'hello'        => 1

 -- Function: mbfl_string_not_equal STR1 STR2
     Return successfully if the arguments are *not* equal when
     lexicographically compared as strings; otherwise return
     unsuccessfully.

 -- Function: mbfl_string_is_yes STR
 -- Function: mbfl_string_is_no STR
     Return true if the string STR is equal to, respectively, 'yes' or
     'no'; otherwise return false.

 -- Function: mbfl_string_less STR1 STR2
     Return successfully if STR1 is less than STR2 when
     lexicographically compared as strings; otherwise return
     unsuccessfully.  Examples:

          mbfl_string_less '' ''                  => 0
          mbfl_string_less 'a' ''                 => 0
          mbfl_string_less '' 'a'                 => 1
          mbfl_string_less 'ciao' 'ciao'          => 1
          mbfl_string_less 'ciao' 'hello'         => 0
          mbfl_string_less 'hello' 'ciao'         => 1

 -- Function: mbfl_string_greater STR1 STR2
     Return successfully if STR1 is greater than STR2 when
     lexicographically compared as strings; otherwise return
     unsuccessfully.  Examples:

          mbfl_string_greater '' ''               => 1
          mbfl_string_greater 'a' ''              => 0
          mbfl_string_greater '' 'a'              => 1
          mbfl_string_greater 'ciao' 'ciao'       => 1
          mbfl_string_greater 'ciao' 'hello'      => 1
          mbfl_string_greater 'hello' 'ciao'      => 0

 -- Function: mbfl_string_less_or_equal STR1 STR2
     Return successfully if STR1 is less than, or equal to, STR2 when
     lexicographically compared as strings; otherwise return
     unsuccessfully.  Examples:

          mbfl_string_less_or_equal '' ''                 => 0
          mbfl_string_less_or_equal 'a' ''                => 1
          mbfl_string_less_or_equal '' 'a'                => 0
          mbfl_string_less_or_equal 'ciao' 'ciao'         => 0
          mbfl_string_less_or_equal 'ciao' 'hello'        => 0
          mbfl_string_less_or_equal 'hello' 'ciao'        => 1

 -- Function: mbfl_string_greater_or_equal STR1 STR2
     Return successfully if STR1 is greater than, or equal to, STR2 when
     lexicographically compared as strings; otherwise return
     unsuccessfully.  Examples:

          mbfl_string_greater_or_equal '' ''              => 0
          mbfl_string_greater_or_equal 'a' ''             => 0
          mbfl_string_greater_or_equal '' 'a'             => 1
          mbfl_string_greater_or_equal 'ciao' 'ciao'      => 0
          mbfl_string_greater_or_equal 'ciao' 'hello'     => 1
          mbfl_string_greater_or_equal 'hello' 'ciao'     => 0

 -- Function: mbfl_string_equal_substring STRING POSITION PATTERN
     Return true if the substring starting at POSITION in STRING is
     equal to PATTERN; else return false.  If POSITION plus the length
     of PATTERN is greater than the length of STRING: the return value
     is false, always.


File: mbfl.info,  Node: strings misc,  Prev: strings comparison,  Up: strings

14.7 Miscellaneous functions
============================

 -- Function: mbfl_string_replace STRING PATTERN
 -- Function: mbfl_string_replace STRING PATTERN SUBST
 -- Function: mbfl_string_replace_var _RV STRING PATTERN
 -- Function: mbfl_string_replace_var _RV STRING PATTERN SUBST
     Replace all the occurrences of PATTERN in STRING with SUBST, then
     print the result.  If not used, SUBST defaults to the empty string.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          mbfl_string_replace 'abcdefg' 'cde' '123'
          -| 'ab123fg'

          local _RV
          mbfl_string_replace_var _RV 'abcdefg' 'cde' '123'
          "$_RV" => ab123fg

 -- Function: mbfl_sprintf VARNAME FORMAT ...
     Make use of 'printf' to format the string FORMAT with the
     additional arguments, then store the result in VARNAME: If this
     name is local in the scope of the caller, this has the effect of
     filling the variable in that scope.

     *NOTE* We should use the built-in 'printf -v VARNAME' construct,
     rather than this function.

 -- Function: mbfl_string_skip STRING VARNAME CHAR
     Skip all the characters in a string equal to CHAR.  VARNAME is the
     name of a variable in the scope of the caller: Its value is the
     offset of the first character to test in STRING.  The offset is
     incremented until a char different from CHAR is found, then the
     value of VARNAME is updated to the position of the different char.
     If the initial value of the offset corresponds to a char equal to
     CHAR, the variable is left untouched.  Return true.

          local -i i

          # The char "z" is not present in the string: leave "i" untouched.
          i=3
          ;;               0123456
          mbfl_string_skip abcdefg i z
          $i => 3

          # The whole string  is filled with "a": increment "i" to
          # the length of the string itself.
          i=3
          ;;               0123456
          mbfl_string_skip aaaaaaa i a
          $i => 7

          # Skip until the index of the "d" character.
          i=3
          ;;               01234567890
          mbfl_string_skip abcccccdefg i c
          $i => 7

 -- Function: mbfl_string_strip_carriage_return_var _RV LINE
     When exchanging strings with a remote process through a network
     socket we, usually, need to end a line with a carriage return plus
     line feed sequence.  If we use the command 'read' to read a line
     from a socket: we can instruct it to discard the ending line feed,
     yielding us a line ending with a carriage return.

     This function strips the ending carriage return from LINE, if any,
     and stores the result in the result variable _RV.  It is fine if
     LINE is the empty string.


File: mbfl.info,  Node: dialog,  Next: times,  Prev: strings,  Up: Top

15 Interacting with the user
****************************

 -- Function: mbfl_dialog_yes_or_no STRING
 -- Function: mbfl_dialog_yes_or_no STRING PROGNAME
     Print the question STRING on the standard output and wait for the
     user to type 'yes' or 'no' in the standard input.  Return true if
     the user has typed 'yes', false if the user has typed 'no'.

     The optional parameter PROGNAME is used as prefix for the prompt;
     if not given: It defaults to the value of 'script_PROGNAME'.  *note
     Required user defined variables: service variables.

 -- Function: mbfl_dialog_enable_programs
     Declare the usage of the external program 'stty', which is used by
     'mbfl_dialog_ask_password()' to turn of password echoing on the
     terminal.

 -- Function: mbfl_dialog_ask_password PROMPT
 -- Function: mbfl_dialog_ask_password_var _RV PROMPT
     Print PROMPT followed by a colon and a space, then reads a password
     from the terminal.  Print the password.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.


File: mbfl.info,  Node: times,  Next: variables,  Prev: dialog,  Up: Top

16 Times and dates
******************

 -- Function: mbfl_times_and_dates_enable
     Declare the commands required to handle times and dates.  *note
     Declaring the intention to use a program: program declaring.

     The programs are: 'date'.

* Menu:

* times raw::                   Raw call to 'date'.
* times current::               Acquire the current time and date.
* times special::               Special time and date formats.


File: mbfl.info,  Node: times raw,  Next: times current,  Up: times

16.1 Raw call to 'date'
=======================

 -- Function: mbfl_exec_date [OPT ...]
     Execute 'date' with the optional arguments appended to the command
     line.

 -- Function: mbfl_exec_date_format FORMAT [OPT ...]
     Execute 'date' with the mandatory FORMAT as first argument.
     Additional, optional, arguments are appended to the command line.


File: mbfl.info,  Node: times current,  Next: times special,  Prev: times raw,  Up: times

16.2 Acquire the current time and date
======================================

 -- Function: mbfl_date_current_year
     Print the current year as digit string.

 -- Function: mbfl_date_current_month
     Print the current month as two-digits string.

 -- Function: mbfl_date_current_day
     Print the current day as two-digits string.

 -- Function: mbfl_date_current_hour
     Print the current hour as two-digits string.

 -- Function: mbfl_date_current_minute
     Print the current minute as two-digits string.

 -- Function: mbfl_date_current_second
     Print the current second as two-digits string.

 -- Function: mbfl_date_current_date
     Print the current date, using the format '%F'.  Example:

          mbfl_date_current_date
          -| 2018-11-03

 -- Function: mbfl_date_current_time
     Print the current date, using the format '%T'.  Example:

          mbfl_date_current_time
          -| 07:51:27


File: mbfl.info,  Node: times special,  Prev: times current,  Up: times

16.3 Special time and date formats
==================================

 -- Function: mbfl_date_email_timestamp
     Print the current timestamp, using the format specified by
     '--rfc-2822': the format required by Interned email.  Example:

          mbfl_date_email_timestamp
          -| Sat, 03 Nov 2018 07:51:27 +0100

 -- Function: mbfl_date_iso_timestamp
     Print the current timestamp, using the format specified by
     '--iso-8601=ns': the format required by ISO 8601 with nanoseconds
     precision.  Example:

          mbfl_date_iso_timestamp
          -| 2018-11-03T07:51:27,564646289+01:00


File: mbfl.info,  Node: variables,  Next: arrays,  Prev: times,  Up: Top

17 Manipulating variables
*************************

* Menu:

* variables arrays::            Manipulating arrays.
* variables colon::             Manipulating colon variables.
* variables misc::              Miscellaneous variable functions.


File: mbfl.info,  Node: variables arrays,  Next: variables colon,  Up: variables

17.1 Manipulating arrays
========================

*note Manipulating colon variables: variables colon, for the use of the
following functions.

 -- Function: mbfl_variable_find_in_array ELEMENT
     Search the array 'mbfl_FIELDS' for a value equal to ELEMENT.  If it
     is found: Print the index and return true; else print nothing and
     return false.

     'mbfl_FIELDS' must be filled with elements having subsequent
     indexes starting at zero.

 -- Function: mbfl_variable_element_is_in_array ELEMENT
     A wrapper for 'mbfl_variable_find_in_array()' that does not print
     anything.


File: mbfl.info,  Node: variables colon,  Next: variables misc,  Prev: variables arrays,  Up: variables

17.2 Manipulating colon variables
=================================

 -- Function: mbfl_variable_colon_variable_to_array VARNAME
     Take VARNAME's value, a colon separated list of string, and store
     each string in the array 'mbfl_FIELDS', starting with a base index
     of zero.

     Example:

          VAR=a:b:c:d:e
          declare -a mbfl_FIELDS

          mbfl_variable_colon_variable_to_array VAR

          echo ${#mbfl_FIELDS[*]}       -| 5
          echo "${mbfl_FIELDS[0]}"      -| a
          echo "${mbfl_FIELDS[1]}"      -| b
          echo "${mbfl_FIELDS[2]}"      -| c
          echo "${mbfl_FIELDS[3]}"      -| d
          echo "${mbfl_FIELDS[4]}"      -| e

 -- Function: mbfl_variable_array_to_colon_variable VARNAME
     Store each value from the array 'mbfl_FIELDS' (with base index
     zero) in VARNAME as a colon separated list of strings.

     Example:

          declare -a mbfl_FIELDS=(a b c d e)

          mbfl_variable_array_to_colon_variable VAR
          echo $VAR                       -| a:b:c:d:e

 -- Function: mbfl_variable_colon_variable_drop_duplicate VARNAME
     Take VARNAME's value, a colon separated list of string, and remove
     duplicates.  Reset VARNAME to the result.


File: mbfl.info,  Node: variables misc,  Prev: variables colon,  Up: variables

17.3 Miscellaneous variable functions.
======================================

 -- Function: mbfl_variable_alloc _RV
     Generate a unique variable name and store it in the variable _RV.

     To avoid allocating the same name twice: the function examines the
     new name testing if its value as variable is empty; if it is empty,
     it considers it "new".  So, whenever we allocate a name: we should
     locally initialise the variable to some non-empty value.

          local NAME

          mbfl_variable_alloc NAME
          $NAME   => mbfl_a_variable_2323_7652


File: mbfl.info,  Node: arrays,  Next: system,  Prev: variables,  Up: Top

18 Manipulating arrays
**********************

 -- Function: mbfl_array_is_empty ARRAY_VARNAME
     Return successfully if the array is empty.

          local -a ARRY
          mbfl_array_is_empty ARRY        => 0
          ARRY=(a b c)
          mbfl_array_is_empty ARRY        => 1

 -- Function: mbfl_array_is_not_empty ARRAY_VARNAME
     Return successfully if the array is not empty.

          local -a ARRY
          mbfl_array_is_not_empty ARRY    => 1
          ARRY=(a b c)
          mbfl_array_is_not_empty ARRY    => 0

 -- Function: mbfl_array_length ARRAY_VARNAME
 -- Function: mbfl_array_length_var _RV ARRAY_VARNAME
     Print the number of pairs in the array.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          local -a ARRY
          mbfl_array_length ARRY          -| 0
          ARRY=(a b c)
          mbfl_array_length ARRY          -| 3

          local _RV
          mbfl_array_length_var _RV ARRY
          "$_RV"   -| 3


File: mbfl.info,  Node: system,  Next: atexit,  Prev: arrays,  Up: Top

19 Interfacing with the system
******************************

 -- Function: mbfl_system_enable_programs
     Declare the intention to use the programs required by this module.
     *note Declaring the intention to use a program: program declaring.

     As of version 3.0.0-devel.0: this function does nothing; it is
     still here for backwards compatibility.

* Menu:

* system passwd::               Reading and searching the file
                                '/etc/passwd'.
* system group::                Reading and searching the file
                                '/etc/group'.
* system file perms::           Converting file permissions.


File: mbfl.info,  Node: system passwd,  Next: system group,  Up: system

19.1 Reading and searching the file '/etc/passwd'
=================================================

* Menu:

* system passwd reading::       Reading the file 'passwd'.
* system passwd printing::      Printing entries from 'passwd'.
* system passwd searching::     Searching entries from 'passwd'.
* system passwd inspect::       Inspecting entries from 'passwd'.
* system passwd userid::        Converting user identifiers.


File: mbfl.info,  Node: system passwd reading,  Next: system passwd printing,  Up: system passwd

19.1.1 Reading the file 'passwd'
--------------------------------

 -- Function: mbfl_system_passwd_read
     Read the file '/etc/passwd' and store the resulting fields in an
     internal global array variable.  Only the first call to this
     function will actually read the file, unless
     'mbfl_system_passwd_reset()' has been called.

 -- Function: mbfl_system_passwd_reset
     Reset the internal state so that the next call to
     'mbfl_system_passwd_read()' will actually load, or reaload, the
     contents of '/etc/passwd'.


File: mbfl.info,  Node: system passwd printing,  Next: system passwd searching,  Prev: system passwd reading,  Up: system passwd

19.1.2 Printing entries from 'passwd'
-------------------------------------

We are meant to call these function after a call to
'mbfl_system_passwd_read()'.

 -- Function: mbfl_system_passwd_print_entries
     Print to 'stdout' the entries of 'passwd', one per line.  The
     format of each line is:

          name='root' passwd='x' uid=0 gid=0 gecos='' dir='/root' \
          shell='/bin/bash'

 -- Function: mbfl_system_passwd_print_entries_as_xml
     Print to 'stdout' the entries of 'passwd', one per line, in XML
     format.  The format of each line is:

          <entry name='root' passwd='x' uid='0' gid='0' gecos='' \
          dir='/root' shell='/bin/bash'/>

 -- Function: mbfl_system_passwd_print_entries_as_json
     Print to 'stdout' the entries of 'passwd', one per line, in JSON
     format.  The format of each line is:

          "entry": { "name": "root", "passwd": "x", "uid": 0, "gid": 0, \
          "gecos": "", "dir": "/root", "shell": "/bin/bash" }


File: mbfl.info,  Node: system passwd searching,  Next: system passwd inspect,  Prev: system passwd printing,  Up: system passwd

19.1.3 Searching entries from 'passwd'
--------------------------------------

We are meant to call these function after a call to
'mbfl_system_passwd_read()'.  The following functions inspect entries
from '/etc/passwd' and locate them using numeric indexes; such indexes
are valid only until the next call to 'mbfl_system_passwd_reset()'.

 -- Function: mbfl_system_passwd_find_entry_by_name NAME
 -- Function: mbfl_system_passwd_find_entry_by_name_var _RV NAME
     Search the entries of 'passwd' for one whose user name is NAME.
     When successful: print to 'stdout' the index of the entry and
     return true; otherwise return false.  We can use the index with the
     functions described in *note Inspecting entries from 'passwd':
     system passwd inspect.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_system_passwd_find_entry_by_uid UID
 -- Function: mbfl_system_passwd_find_entry_by_uid_var _RV UID
     Search the entries of 'passwd' for one whose user id is UID.  When
     successful: print to 'stdout' the index of the entry and return
     true; otherwise return false.  We can use the index with the
     functions described in *note Inspecting entries from 'passwd':
     system passwd inspect.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.


File: mbfl.info,  Node: system passwd inspect,  Next: system passwd userid,  Prev: system passwd searching,  Up: system passwd

19.1.4 Inspecting entries from 'passwd'
---------------------------------------

The following functions inspect entries from '/etc/passwd' using an
index argument; we must obtain indexes with the functions described in
*note Searching entries from 'passwd': system passwd searching.

 -- Function: mbfl_system_passwd_get_name IDX
 -- Function: mbfl_system_passwd_get_name_var _RV IDX
     Print to 'stdout' the field name of the 'passwd' entry at index
     IDX.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          local IDX NAME

          mbfl_system_passwd_read
          if mbfl_system_passwd_find_entry_by_name_var IDX root
          then
              if mbfl_system_passwd_get_name_var NAME $IDX
              then echo "$NAME"
              fi
          fi

 -- Function: mbfl_system_passwd_get_passwd IDX
 -- Function: mbfl_system_passwd_get_passwd_var _RV IDX
     Print to 'stdout' the field passwd of the 'passwd' entry at index
     IDX.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_system_passwd_get_uid IDX
 -- Function: mbfl_system_passwd_get_uid_var _RV IDX
     Print to 'stdout' the field uid of the 'passwd' entry at index IDX.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_system_passwd_get_gid IDX
 -- Function: mbfl_system_passwd_get_gid_var _RV IDX
     Print to 'stdout' the field gid of the 'passwd' entry at index IDX.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_system_passwd_get_gecos IDX
 -- Function: mbfl_system_passwd_get_gecos_var _RV IDX
     Print to 'stdout' the field gecos of the 'passwd' entry at index
     IDX.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_system_passwd_get_dir IDX
 -- Function: mbfl_system_passwd_get_dir_var _RV IDX
     Print to 'stdout' the field dir of the 'passwd' entry at index IDX.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_system_passwd_get_shell IDX
 -- Function: mbfl_system_passwd_get_shell_var _RV IDX
     Print to 'stdout' the field shell of the 'passwd' entry at index
     IDX.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.


File: mbfl.info,  Node: system passwd userid,  Prev: system passwd inspect,  Up: system passwd

19.1.5 Converting user identifiers
----------------------------------

We are meant to call these function after a call to
'mbfl_system_passwd_read()'; *note Reading the file 'passwd': system
passwd reading.

 -- Function: mbfl_system_passwd_uid_to_name UID
 -- Function: mbfl_system_passwd_uid_to_name_var _RV UID
     Print to 'stdout' the name of the user whose uid is UID.  When
     successful return true; otherwise return false.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          local USER_NAME

          if mbfl_system_passwd_read
          then mbfl_system_passwd_uid_to_name 0
          fi

          # Using the "_var" variants.
          if mbfl_system_passwd_read
          then
              mbfl_system_passwd_uid_to_name_var USER_NAME 0
              echo "$USER_NAME"
          fi

 -- Function: mbfl_system_passwd_name_to_uid NAME
 -- Function: mbfl_system_passwd_name_to_uid_var _RV NAME
     Print to 'stdout' the id of the user whose uid is UID.  When
     successful return true; otherwise return false.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          local USER_ID

          if mbfl_system_passwd_read
          then mbfl_system_passwd_name_to_uid 'root'
          fi

          # Using the "_var" variants.
          if mbfl_system_passwd_read
          then
              if mbfl_system_passwd_name_to_uid_var USER_ID 'root'
              then echo "$USER_ID"
              fi
          fi

 -- Function: mbfl_system_numerical_user_id_to_name ID
     Convert the numerical user ID to the user name found in the
     '/etc/passwd' file; print the result to 'stdout'.  When successful
     return true; otherwise return false.

 -- Function: mbfl_system_numerical_user_id_to_name NAME
     Convert the symbolic user NAME to the numerical identifier found in
     the '/etc/passwd' file; print the result to 'stdout'.  When
     successful return true; otherwise return false.


File: mbfl.info,  Node: system group,  Next: system file perms,  Prev: system passwd,  Up: system

19.2 Reading and searching the file '/etc/group'
================================================

* Menu:

* system group reading::        Reading the file '/etc/group'.
* system group printing::       Printing entries from '/etc/group'.
* system group searching::      Searching entries from '/etc/group'.
* system group inspect::        Inspecting entries from '/etc/group'.
* system group groupid::        Converting group identifiers.


File: mbfl.info,  Node: system group reading,  Next: system group printing,  Up: system group

19.2.1 Reading the file '/etc/group'
------------------------------------

 -- Function: mbfl_system_group_read
     Read the file '/etc/group' and store the resulting fields in an
     internal global array variable.  Only the first call to this
     function will actually read the file, unless
     'mbfl_system_group_reset()' has been called.

 -- Function: mbfl_system_group_reset
     Reset the internal state so that the next call to
     'mbfl_system_group_read()' will actually load, or reaload, the
     contents of '/etc/group'.


File: mbfl.info,  Node: system group printing,  Next: system group searching,  Prev: system group reading,  Up: system group

19.2.2 Printing entries from '/etc/group'
-----------------------------------------

We are meant to call these function after a call to
'mbfl_system_group_read()'.

 -- Function: mbfl_system_group_print_entries
     Print to 'stdout' the entries of '/etc/group', one per line.  The
     format of each line is:

          name='root' passwd='x' gid=0 users='root'

 -- Function: mbfl_system_group_print_entries_as_xml
     Print to 'stdout' the entries of '/etc/group', one per line, in XML
     format.  The format of each line is:

          <entry name='root' passwd='x' gid='0' users='root'/>

 -- Function: mbfl_system_group_print_entries_as_json
     Print to 'stdout' the entries of '/etc/group', one per line, in
     JSON format.  The format of each line is:

          "entry": { "name": "root", "passwd": "x", "gid": 0, "users": "root" }


File: mbfl.info,  Node: system group searching,  Next: system group inspect,  Prev: system group printing,  Up: system group

19.2.3 Searching entries from '/etc/group'
------------------------------------------

We are meant to call these function after a call to
'mbfl_system_group_read()'.  The following functions inspect entries
from '/etc/group' and locate them using numeric indexes; such indexes
are valid only until the next call to 'mbfl_system_group_reset()'.

 -- Function: mbfl_system_group_find_entry_by_name NAME
 -- Function: mbfl_system_group_find_entry_by_name_var _RV NAME
     Search the entries of '/etc/group' for one whose group name is
     NAME.  When successful: print to 'stdout' the index of the entry
     and return true; otherwise return false.  We can use the index with
     the functions described in *note Inspecting entries from
     '/etc/group': system group inspect.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_system_group_find_entry_by_gid GID
 -- Function: mbfl_system_group_find_entry_by_gid_var _RV GID
     Search the entries of '/etc/group' for one whose group id is GID.
     When successful: print to 'stdout' the index of the entry and
     return true; otherwise return false.  We can use the index with the
     functions described in *note Inspecting entries from '/etc/group':
     system group inspect.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.


File: mbfl.info,  Node: system group inspect,  Next: system group groupid,  Prev: system group searching,  Up: system group

19.2.4 Inspecting entries from '/etc/group'
-------------------------------------------

The following functions inspect entries from '/etc/group' using an index
argument; we must obtain indexes with the functions described in *note
Searching entries from '/etc/group': system group searching.

 -- Function: mbfl_system_group_get_name GROUP_IDX
 -- Function: mbfl_system_group_get_name_var _RV GROUP_IDX
     Print to 'stdout' the field name of the '/etc/group' entry at index
     GROUP_IDX.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          local IDX NAME

          mbfl_system_group_read
          if mbfl_system_group_find_entry_by_name_var IDX root
          then
              if mbfl_system_group_get_name_var NAME $IDX
              then echo "$NAME"
              fi
          fi

 -- Function: mbfl_system_group_get_passwd GROUP_IDX
 -- Function: mbfl_system_group_get_passwd_var _RV GROUP_IDX
     Print to 'stdout' the field passwd of the '/etc/group' entry at
     index GROUP_IDX.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_system_group_get_gid GROUP_IDX
 -- Function: mbfl_system_group_get_gid_var _RV GROUP_IDX
     Print to 'stdout' the field gid of the '/etc/group' entry at index
     GROUP_IDX.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_system_group_get_users GROUP_IDX
 -- Function: mbfl_system_group_get_users_var _RV GROUP_IDX
     Print to 'stdout' the field users of the '/etc/group' entry at
     index GROUP_IDX.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_system_group_get_users_count GROUP_IDX
 -- Function: mbfl_system_group_get_users_count_var _RV GROUP_IDX
     Print to 'stdout' the number of user names in the list of users for
     the entry at index GROUP_IDX.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

 -- Function: mbfl_system_group_get_user_name GROUP_IDX USER_IDX
 -- Function: mbfl_system_group_get_user_name_var _RV GROUP_IDX USER_IDX
     Print to 'stdout' the name of the user at index USER_IDX in the
     list of users for the entry at index GROUP_IDX.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          local -i GROUP_IDX USER_COUNT USER_IDX
          local USER_NAME

          mbfl_system_group_read

          if GROUP_IDX=$(mbfl_system_group_find_entry_by_name root)
          then
              USER_COUNT=$(mbfl_system_group_get_users_count $GROUP_IDX)
              for ((USER_IDX=0; USER_IDX < USER_COUNT; ++USER_IDX))
              do mbfl_system_group_get_user_name $GROUP_IDX $USER_IDX
              done
          fi

          # Using the "_var" variants.
          if mbfl_system_group_find_entry_by_name_var GROUP_IDX root
          then
              mbfl_system_group_get_users_count_var USER_COUNT $GROUP_IDX
              for ((USER_IDX=0; USER_IDX < USER_COUNT; ++USER_IDX))
              do
                  mbfl_system_group_get_user_name_var USER_NAME \
                     $GROUP_IDX $USER_IDX
                  echo "$USER_NAME"
              done
          else return 1
          fi


File: mbfl.info,  Node: system group groupid,  Prev: system group inspect,  Up: system group

19.2.5 Converting group identifiers
-----------------------------------

We are meant to call these function after a call to
'mbfl_system_group_read()'; *note Reading the file '/etc/group': system
group reading.

 -- Function: mbfl_system_group_gid_to_name GID
 -- Function: mbfl_system_group_gid_to_name_var _RV GID
     Print to 'stdout' the name of the group whose gid is GID.  When
     successful return true; otherwise return false.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          local GROUP_NAME

          if mbfl_system_group_read
          then mbfl_system_group_gid_to_name 0
          fi

          # Using the "_var" variants.
          if mbfl_system_group_read
          then
              mbfl_system_group_gid_to_name_var GROUP_NAME 0
              echo "$GROUP_NAME"
          fi

 -- Function: mbfl_system_group_name_to_gid NAME
 -- Function: mbfl_system_group_name_to_gid_var _RV NAME
     Print to 'stdout' the id of the group whose gid is GID.  When
     successful return true; otherwise return false.

     The function variant '_var' stores the result in the variable _RV,
     rather than print it; *note Result variables: overview rv.

          local GROUP_ID

          if mbfl_system_group_read
          then mbfl_system_group_name_to_gid 'root'
          fi

          # Using the "_var" variants.
          if mbfl_system_group_read
          then
              if mbfl_system_group_name_to_gid_var GROUP_ID 'root'
              then echo "$GROUP_ID"
              fi
          fi

 -- Function: mbfl_system_numerical_group_id_to_name ID
     Convert the numerical group ID to the group name found in the
     '/etc/group' file; print the result to 'stdout'.  When successful
     return true; otherwise return false.

 -- Function: mbfl_system_numerical_group_id_to_name NAME
     Convert the symbolic group NAME to the numerical identifier found
     in the '/etc/group' file; print the result to 'stdout'.  When
     successful return true; otherwise return false.


File: mbfl.info,  Node: system file perms,  Prev: system group,  Up: system

19.3 Converting file permissions
================================

 -- Function: mbfl_system_symbolic_to_octal_permissions MODE
     Convert three chars representing file permissions in a single octal
     digit.

 -- Function: mbfl_system_octal_to_symbolic_permissions MODE
     Convert a single octal digit representing file permissions into
     three chars.


File: mbfl.info,  Node: atexit,  Next: locations,  Prev: system,  Up: Top

20 Running scripts at exit-time
*******************************

Bash allows us to execute a command whenever it exit by issuing the
command:

     trap <script> EXIT

the atexit MBFL module uses this mechanism to register, forget and run
multiple commands.

 -- Function: mbfl_atexit_enable
 -- Function: mbfl_atexit_disable
     Register or delete 'mbfl_atexit_run()' as command for the 'EXIT'
     event.  We must call this function first if we want to use this
     module.

 -- Function: mbfl_atexit_register HANDLER
 -- Function: mbfl_atexit_register HANDLER IDVAR
     Register a new HANDLER command.  If the optional argument IDVAR is
     present, it must be the name of a variable in the scope of the
     caller: store into such variable a unique identifier associated to
     the handler.

 -- Function: mbfl_atexit_forget ID
     Remove the, previously registered, handler command associated to
     ID.  If no handler is associated to it: nothing happens.

 -- Function: mbfl_atexit_run
     Run all the registered handlers, from the last registered to the
     first.  Whenever a handler is run: it is removed from the internal
     registry.

 -- Function: mbfl_atexit_clear
     Remove all the registered handlers from the internal registry.
     This renders invalid all the handler identifiers that were created.


File: mbfl.info,  Node: locations,  Next: main,  Prev: atexit,  Up: Top

21 Running location handlers
****************************

A "location" is a chunk of code between the following enter and leave
actions:

     mbfl_location_enter
     {
        ...
     }
     mbfl_location_leave

inside a location we can register a "handler command" that is
automatically executed whenever the location is left by calling
'mbfl_location_leave()'.  We can nest locations at will.  We can run all
the handlers registered so far in a stack of locations.

 -- Function: mbfl_location_enter
     Enter into a new location.  Initialise the internal state.

 -- Function: mbfl_location_leave
     Leave the current location.  Run all the registered handlers in
     reverse order.

 -- Function: mbfl_location_handler HANDLER_SCRIPT
     Register a new handler in the current location.  It is an error if
     this function is called outside a location.

 -- Function: mbfl_location_run_all
     Run all the handlers unwinding all the locations.  This is useful
     as atexit handler, *note Running scripts at exit-time: atexit.

 -- Function: mbfl_location_enable_cleanup_atexit
 -- Function: mbfl_location_disable_cleanup_atexit
     Enable or disable running the location handlers through an atexit
     handler.  The enable operation registers an atexit handler that
     cleans up the current stack of locations.

* Menu:

* locations example1::          Single location, syntactic scoping.
* locations example2::          Nested locations.
* locations example3::          Nested function calls.


File: mbfl.info,  Node: locations example1,  Next: locations example2,  Up: locations

21.1 Single location, syntactic scoping
=======================================

The handler functions can access the variables in the uplevel function
frames.

     function one   () { R_one=$X;   }
     function two   () { R_two=$Y;   }
     function three () { R_three=$Z; }

     {
       local R_one R_two R_three
       local X=1 Y=2 Z=3

       mbfl_location_enter
       {
         mbfl_location_handler one
         mbfl_location_handler two
         mbfl_location_handler three
       }
       mbfl_location_leave

       $R_one          => 1
       $R_two          => 2
       $R_three        => 3
     }


File: mbfl.info,  Node: locations example2,  Next: locations example3,  Prev: locations example1,  Up: locations

21.2 Nested locations
=====================

Remember that the handlers are called when a location is left:

     function handler_append () {
         local THING=${1:?"missing thing parameter"}
         RESULT+=$THING
     }

     {
         local RESULT

         handler_append 0
         mbfl_location_enter
         {
             mbfl_location_handler "handler_append 1"
             mbfl_location_enter
             {
                 mbfl_location_handler "handler_append 2"
                 mbfl_location_enter
                 {
                     mbfl_location_handler "handler_append 3"
                 }
                 mbfl_location_leave
                 mbfl_location_handler "handler_append 4"
             }
             mbfl_location_leave
             mbfl_location_handler "handler_append 5"
         }
         mbfl_location_leave
         handler_append 6

         "$RESULT"   => 0342516
     }


File: mbfl.info,  Node: locations example3,  Prev: locations example2,  Up: locations

21.3 Nested function calls
==========================

Remember that the handlers are called when a location is left:

     declare RESULT

     function handler_append () {
         local THING=${1:?"missing thing parameter"}
         RESULT+=$THING
     }

     function func () {
         handler_append 0
         mbfl_location_enter
         {
             sub-func
         }
         mbfl_location_leave
         handler_append 6
     }

     function sub-func () {
         mbfl_location_handler "handler_append 1"
         mbfl_location_enter
         {
             sub-sub-func
         }
         mbfl_location_leave
         mbfl_location_handler "handler_append 5"
     }

     function sub-sub-func () {
         mbfl_location_handler "handler_append 2"
         mbfl_location_enter
         {
             mbfl_location_handler "handler_append 3"
         }
         mbfl_location_leave
         mbfl_location_handler "handler_append 4"
     }

     func
     "$RESULT"       => 0342516


File: mbfl.info,  Node: main,  Next: testing,  Prev: locations,  Up: Top

22 Main function
****************

MBFL declares a function to drive the execution of the script; its
purpose is to make use of the other modules to reduce the size of
scripts depending on MBFL.  All the code blocks in the script, with the
exception of global variables declaration, should be enclosed in
functions.

* Menu:

* main variables::              Command line arguments variables.
* main function::               Driving script execution.
* main exit::                   Declaring exit codes.
* main misc::                   Other functions.


File: mbfl.info,  Node: main variables,  Next: main function,  Up: main

22.1 Command line arguments variables
=====================================

The following global variables are defined by default.

 -- Variable: ARGV1
     An array containing all the command line arguments.  When no
     command line arguments are present: this array is empty.

 -- Variable: ARGC1
     A non-negative integer representing the number of values in
     'ARGV1'.  When no command line arguments are present: this variable
     is set to zero.

 -- Variable: ARG1ST
     A non-negative integer representing the index in 'ARGV1' of the
     next argument to be processed.  It is initialised to zero; the
     'actions' module increments it to reflect its consuming of action
     arguments; the 'getopts' module uses this value to locate the first
     argument to parse.

 -- Variable: ARGV
     An array containing all the non-action and non-option command line
     arguments.  When no such arguments are present: this array is
     empty.  This variable is filled by the 'getopts' module.

 -- Variable: ARGC
     A non-negative integer representing the number of values in 'ARGV'.
     When no arguments are present: this variable is set to zero.


File: mbfl.info,  Node: main function,  Next: main exit,  Prev: main variables,  Up: main

22.2 Driving script execution
=============================

 -- Function: mbfl_main
     The invocation to this function must be the last line of code in
     the script.  It does the following:

       1. Register the value of the variable 'script_PROGNAME' in the
          message module using the function
          'mbfl_message_set_progname()'.

       2. Invoke 'mbfl_main_create_exit_functions()'.  *note Declaring
          exit codes: main exit.

       3. Parse the command line arguments according to the command
          actions configuration; this step may change the selection of:
          main function, "before parsing options" function, "after
          parsing options" function; if no command actions are
          configured: nothing is done.

          This function searches for a declared action set with name
          'MAIN': if such set exists, it expects the first command line
          argument to be an action identifier in the set.

       4. If it exists: invoke the function
          'script_before_parsing_options()' or the one selected by
          'mbfl_main_set_before_parsing_options()'.

       5. Parse command line options with 'mbfl_getopts_parse()'.

       6. If it exists: invoke the function
          'script_after_parsing_options()' or the one selected by
          'mbfl_main_set_after_parsing_options()'.

       7. Invoke the function whose name is stored in the global
          variable 'mbfl_main_SCRIPT_FUNCTION', if it exists, with no
          arguments; if its return value is non-zero: exit the script
          with the same code.  The default value is 'main'.

       8. Exit the script with the return code of the action function or
          zero.

 -- Function: mbfl_main_set_main FUNCNAME
     Select the main function storing FUNCNAME into
     'mbfl_main_SCRIPT_FUNCTION'.

 -- Variable: mbfl_main_SCRIPT_FUNCTION
     Global variable that holds the name of the custom main script
     function.  The default name is 'main'.

 -- Function: mbfl_main_set_before_parsing_options FUNCNAME
     The name of the function to be called right before parsing command
     line options.  This value can be customised by both the MBFL and
     the user script.

     The default function name is: 'script_before_parsing_options'.

 -- Function: mbfl_main_set_after_parsing_options FUNCNAME
     The name of the function to be called right after parsing command
     line options.  This value can be customised by both the MBFL and
     the user script.

     The default function name is: 'script_after_parsing_options'.


File: mbfl.info,  Node: main exit,  Next: main misc,  Prev: main function,  Up: main

22.3 Declaring exit codes
=========================

Some functions and global variables are provided to declare script's
exit codes.  The MBFL declares its own exit codes starting from '100'
and decreasing; we should declare our exit codes starting from '3' and
increasing.  The exit codes '0' and '1' are reserved for the functions
'exit_because_success()' and 'exit_because_failure()'.

 -- Function: mbfl_exit
     Wrapper for the 'exit' command that updates the internal state.

 -- Variable: mbfl_main_pending_EXIT_CODE
     Set by 'mbfl_exit()' to the exit code this script is using.  This
     variable might be accessed by atexit commands to appropriately
     react to an error condition.

 -- Function: mbfl_main_is_exiting
     Return true if the script is exiting.  This function might be
     called by a location command being run by an atexit command.

 -- Function: mbfl_main_declare_exit_code CODE NAME
     Declare an exit code with value CODE and identifier NAME.

 -- Function: mbfl_main_create_exit_functions
     For each of the codes declared with
     'mbfl_main_declare_exit_code()': create a function for the 'exit'
     command using the numerical code; create an alias for the 'return'
     command using the numerical code.  For example, if a code is
     declared as:

          mbfl_main_declare_exit_code 4 unexistent_file

     a function is created with:

          function exit_because_unexistent_file () { mbfl_exit 4; }

     and an alias is created with:

          alias return_because_unexistent_file='return 4'

     the name of the function is the string 'exit_because_' followed by
     the exit code name; the name of the alias is the string
     'return_because_' followed by the exit code name.  The function may
     be used in the script to exit the process.

   By default the exit code '0' is associated to the name 'success' and
the exit code '1' is associated to the name 'failure'; so the following
functions exist.

 -- Function: exit_because_success
 -- Function: exit_success
     Exit the script with code '0'.

 -- Function: return_because_success
 -- Function: return_success
     Return with code '0'.

 -- Function: exit_because_failure
 -- Function: exit_failure
     Exit the script with code '1'.

 -- Function: return_because_failure
 -- Function: return_failure
     Return with code '1'.

 -- Function: exit_because_error_loading_library
     Exit the script with code '100'.

 -- Function: return_because_error_loading_library
     Return with code '100'.

 -- Function: mbfl_main_print_exit_code NAME
     Print the code associated to NAME.


File: mbfl.info,  Node: main misc,  Prev: main exit,  Up: main

22.4 Other functions
====================

 -- Function: mbfl_invoke_script_function FUNCNAME
     If FUNCNAME is the name of an existing function: it is invoked with
     no arguments; the return value is the one of the called function.
     The existence test is performed with:

          type -t FUNCNAME = function

     If the function does not exist: return by calling
     'return_because_invalid_function_name'.

 -- Function: mbfl_invoke_existent_script_function FUNCNAME
     Like 'mbfl_invoke_script_function()', but if the function does not
     exist: print an error message to 'stderr' and exit by calling
     'exit_because_invalid_function_name()'.

 -- Function: exit_because_invalid_function_name
 -- Function: return_because_invalid_function_name
     Exit or return with code '91'.

 -- Function: mbfl_main_print_usage_screen_long
     Print the help screen, long version.  It *includes* the predefined
     command line options.

 -- Function: mbfl_main_print_usage_screen_brief
     Print the help screen, brief version.  It *excludes* the predefined
     command line options.


File: mbfl.info,  Node: testing,  Next: sendmail,  Prev: main,  Up: Top

23 Building test suites
***********************

MBFL comes with a little library of functions that may be used to build
test suites; its aim is at building tests for Bash functions, commands
and scripts.

   The ideas at the base of this library are taken from the 'tcltest'
package distributed with the TCL core (1); this package had
contributions from the following people/entities: Sun Microsystems,
Inc.; Scriptics Corporation; Ajuba Solutions; Don Porter, NIST; probably
many many others.

   The library tries to do as much as possible using functions and
aliases, not variables; this is an attempt to let the user redefine
functions to his taste.

* Menu:

* testing intro::               A way to organise a test suite.
* testing shell::               A script to run tests.
* testing config::              Configuring the package.
* testing running::             Running tests.
* testing compare::             Validating results by comparing.
* testing output::              Validating results by output.
* testing messages::            Printing messages from test functions.
* testing files::               Handling files in tests.

   ---------- Footnotes ----------

   (1) TCL stands for _Tool Command Language_ and it is a scripting
language originally written by John Ousterhout, see:
<http://www.tcl.tk/>.


File: mbfl.info,  Node: testing intro,  Next: testing shell,  Up: testing

23.1 A way to organise a test suite
===================================

A useful way to organise a test suite is to split it into a set of
files: one for each module to be tested.

   The file 'libmbfltest.sh' must be sourced at the beginning of each
test file.  This means that the variables that you set may interfere
with the ones in the library; this should not happen because the test
library prefixes variable names with 'mbfl_' or 'dotest_', but one
exception is 'TMPDIR': do not set it in your script, use
'dotest-echo-tmpdir()' to access that value.  *note Handling files in
tests: testing files.

A not so automated example
..........................

To understand how the library works lets examine a bare bones example.

   The function 'dotest' should be invoked at the end of each module in
the test suite; each module should define functions starting with the
same prefix.  A module should be stored in a file, and should look like
the following:

     # mymodule.test --

     source libmbfltest.sh
     source module.sh

     function module-featureA-1.1 () { ... }
     function module-featureA-1.2 () { ... }
     function module-featureA-2.1 () { ... }
     function module-featureB-1.1 () { ... }
     function module-featureB-1.2 () { ... }

     dotest module-
     dotest-final-report

     ### end of file

the file should be executed with:

     $ bash mymodule.test

   To test just "feature A":

     $ TESTMATCH=module-featureA bash mymodule.test

   Remember that the 'source' builtin will look for files in the
directories selected by the 'PATH' environment variables, so we may want
to do:

     $ PATH=path/to/modules:${PATH} \
     TESTMATCH=module-featureA bash mymodule.test

   It is better to put such stuff in a 'Makefile', with GNU Make:

     srcdir        = ...
     builddir      = ...
     BASH_PROGRAM  = bash
     MODULES       = moduleA moduleB

     testdir       = $(srcdir)/tests
     test_FILES    = $(foreach f,$(MODULES),$(testdir)/$(f).test)

     test_ENV      = PATH=$(builddir):$(testdir):$(PATH) \
                     TESTMATCH=$(TESTMATCH)
     test_CMD      = $(test_ENV) $(BASH_PROGRAM)

     .PHONY: test-modules

     test-modules:
             @$(foreach f,$(test_FILES),$(test_CMD) $(f);)


File: mbfl.info,  Node: testing shell,  Next: testing config,  Prev: testing intro,  Up: testing

23.2 A script to run tests
==========================

MBFL comes with a script that can be used to handle the execution of
tests; it is called 'mbfltest.sh'.  Synopsis:

     mbfltest.sh [options] TESTFILE ...

supported options are all the MBFL generic ones (*note Predefined
options: getopts options.) and additionally:

'--start'
     Print start messages for tests, it is the same as invoking
     'dotest-set-report-start()'.

'--end'
     Print end messages for tests, it is the same as invoking
     'dotest-set-report-success()'.

'--match=VALUE'
     Select match pattern for tests, it is the same as setting the
     'TESTMATCH' variable.

'--directory=VALUE'
     Change directory before executing tests, but after having located
     the test files on the file system.

'--library=VALUE'
     Select a specific version of the MBFL library.

   When running tests with the script: in the test modules we can omit
the sourcing of MBFL and the MBFL test library, 'mbfltest.sh' does this
before sourcing the test module.  Each test module is evaluated in a
'bash' subprocess, so: there is no interference between modules; each
module has to do its own initialisation and finalisation.

   With GNU Make we can do:

     MBFLTEST        = mbfltest.sh
     MBFLTEST_FLAGS  = --end
     ifneq (,$(TESTMATCH))
     MBFLTEST_FLAGS  += --match=$(TESTMATCH)
     endif

     srcdir          = ...
     testdir         = $(srcdir)/tests
     TESTNAME        = *
     TESTFILES       = $(wildcard $(testdir)/$(TESTNAME).test)

     .PHONY: test tests

     ifneq ($(strip $(TESTFILES)),)
     test tests:
             $(MBFLTEST) $(MBFLTEST_FLAGS) $(TESTFILES)
     endif


File: mbfl.info,  Node: testing config,  Next: testing running,  Prev: testing shell,  Up: testing

23.3 Configuring the package
============================

 -- Function: dotest-set-verbose
 -- Function: dotest-unset-verbose
     Set or unset verbose execution.  If verbose mode is on: some
     commands output messages on stderr describing what is going on.
     Examples: files and directories creation/removal.

 -- Function: dotest-option-verbose
     Return true if verbose mode is on, false otherwise.

 -- Function: dotest-set-test
 -- Function: dotest-unset-test
     Set or unset test execution.  If test mode is on: external commands
     (like 'rm' and 'mkdir') are not executed, the command line is sent
     to stderr.  Test mode is meant to be used to debug the test library
     functions.

 -- Function: dotest-option-test
     Return true if test mode is on, false otherwise.

 -- Function: dotest-set-debug
 -- Function: dotest-unset-debug
     Enable or disable printing debug messages.  If debug mode is on:
     the function 'dotest-debug()' will print its message; otherwise it
     will print nothing.

 -- Function: dotest-option-debug
     Return true if debug mode is on, false otherwise.

 -- Function: dotest-set-report-start
 -- Function: dotest-unset-report-start
     Set or unset printing a message upon starting a function.

 -- Function: dotest-option-report-start
     Return true if start function reporting is on; otherwise return
     false.

 -- Function: dotest-set-report-success
 -- Function: dotest-unset-report-success
     Set or unset printing a message when a function execution succeeds.
     Failed tests always cause a message to be printed.

 -- Function: dotest-option-report-success
     Return true if success function reporting is on; otherwise return
     false.


File: mbfl.info,  Node: testing running,  Next: testing compare,  Prev: testing config,  Up: testing

23.4 Running test functions
===========================

 -- Function: dotest-final-report
     This function must be invoked as last command in the test file to
     report errors and correctly exit the test script (in a way
     compatible with the requirements of GNU Automake).

 -- Function: dotest PATTERN
     Run all the functions matching PATTERN.  Usually PATTERN is the
     first part of the name of the functions to be executed; the
     function names are selected with the following code:

          compgen -A function PATTERN

     There's no constraint on function names, but they must be one-word
     names.

     Before running a test function: the current process working
     directory is saved, and it is restored after the execution is
     terminated.

     The return value of the test functions is used as result of the
     test: true, the test succeeded; false, the test failed.
     Remembering that the return value of a function is the return value
     of its last executed command, the functions 'dotest-equal()' and
     'dotest-output()', and of course the 'test' command, may be used to
     return the correct value.

   Messages are printed before and after the execution of each function,
according to the mode selected with: 'dotest-set-report-success()',
'dotest-set-report-start()', ... *note Configuring the package: testing
config.

   The following environment variables will influence the behaviour of
'dotest()'.

 -- Variable: TESTMATCH
     Restrict the PATTERN argument to 'dotest()'.  First function names
     are matched against PATTERN, then, the ones that match, are matched
     against 'TESTMATCH'.

 -- Variable: TESTSTART
     If 'yes': It is equivalent to invoking 'dotest-set-report-start()'.
     If 'no': It is equivalent to invoking
     'dotest-unset-report-start()'.

 -- Variable: TESTSUCCESS
     If 'yes': It is equivalent to invoking
     'dotest-set-report-success()'.  If 'no': It is equivalent to
     invoking 'dotest-unset-report-success()'.


File: mbfl.info,  Node: testing compare,  Next: testing output,  Prev: testing running,  Up: testing

23.5 Validating results by comparing
====================================

 -- Function: dotest-equal EXPECTED GOT
     Compare the two parameters and return true if they are equal;
     return false otherwise.  In the latter case print a message showing
     the expected value and the wrong one.  Must be used as last command
     in a function, so that its return value is equal to that of the
     function.

   Example:

     function my-func () {
         echo $(($1 + $2))
     }
     function mytest-1.1 () {
         dotest-result 5 `my-func 2 3`
     }
     dotest mytest-

another example:

     function my-func () {
         echo $(($1 + $2))
     }
     function mytest-1.1 () {
         dotest-result 5 `my-func 2 3` && \
           dotest-result 5 `my-func 1 4` && \
           dotest-result 5 `my-func 3 2` && \
     }
     dotest mytest-


File: mbfl.info,  Node: testing output,  Next: testing messages,  Prev: testing compare,  Up: testing

23.6 Validating results by output
=================================

 -- Function: dotest-output
 -- Function: dotest-output STRING
     Read all the available lines from stdin accumulating them into a
     local variable, separated by '\n'; then compare the input with
     STRING, or the empty string if STRING is not present, and return
     true if they are equal, false otherwise.

   Example of test for a function that echoes its three parameters:

     function my-lib-function () {
         echo $1 $2 $3
     }
     function mytest-1.1 () {
         my-lib-function a b c | dotest-output "a b c"
     }
     dotest mytest

   Example of test for a function that is supposed to print nothing:

     function my-lib-function () {
         test "$1" != "$2" && echo error
     }
     function mytest-1.1 () {
         my-lib-function a a | dotest-output
     }
     dotest mytest


File: mbfl.info,  Node: testing messages,  Next: testing files,  Prev: testing output,  Up: testing

23.7 Printing messages from test functions
==========================================

 -- Alias: dotest-echo STRING [ARG ...]
 -- Alias: dotest-debug STRING [ARG ...]
     Print the parameters on 'stderr'.  'dotest-debug' prints some '*'
     to make the message more visible.

 -- Alias: dotest-printf TEMPLATE [ARG ...]
     Format the TEMPLATE with the optional ARG values, then print the
     result on 'stderr'.


File: mbfl.info,  Node: testing files,  Prev: testing messages,  Up: testing

23.8 Handling files in tests
============================

In this section are described functions to be used to create temporary
files; it is a common task to write scripts to manipulate files and
directories.  All the files should be created under a temporary
directory that must be removed after each test function is invoked; the
library automatically invokes 'dotest-clean-files()' when exiting (using
'trap'), but it is safer to invoke it at the end of each function that
creates files.

* Menu:

* testing files directories::   Directories.
* testing files files::         Files.
* testing files examples::      Examples.


File: mbfl.info,  Node: testing files directories,  Next: testing files files,  Up: testing files

23.8.1 Directories
------------------

 -- Function: dotest-cd DIRECTORY
     Change the working directory.  This is just a wrapper for 'cd'; if
     verbose mode is on: print a message.

 -- Function: dotest-mkdir DIRECTORY
 -- Function: dotest-mkdir DIRECTORY PREFIX
     Create DIRECTORY under the temporary directory; DIRECTORY must be a
     relative pathname (that is: it must not begin with a slash).

     The optional PREFIX is a relative pathname that is prepended to
     DIRECTORY: it is useful to prepend the name of a parent directory.

     Print to stdout the full pathname of the directory.

Temporary directory
...................

 -- Function: dotest-echo-tmpdir
     Print the value of the temporary directory in which all the files
     and directories will be created.  The value is prefixed with the
     value of the environment variable 'TMPDIR', or '/tmp' if not set.

 -- Function: dotest-cd-tmpdir
     Change the working directory to the temporary directory.

 -- Function: dotest-mktmpdir
     Create the temporary directory.  'dotest-mkdir()' creates the
     temporary directory automatically by using the '--parents' option
     of 'mkdir'.  This function is automatically invoked by
     'dotest-mkfile()' and 'dotest-mkpathname()'.


File: mbfl.info,  Node: testing files files,  Next: testing files examples,  Prev: testing files directories,  Up: testing files

23.8.2 Files
------------

 -- Function: dotest-mkfile PATHNAME
 -- Function: dotest-mkfile PATHNAME PREFIX
     Create an empty file.  The optional PREFIX is a relative pathname
     that is prepended to PATHNAME: It is useful to prepend the name of
     a parent directory.  Print to stdout the full pathname of the file.

 -- Function: dotest-clean-files
     Remove the temporary directory and all its children.  Should be
     invoked at the end of each function that creates temporary files or
     directories.

     Return the value of the last command executed before the
     invocation, that way it can be used right after 'dotest-output()'
     and 'dotest-equal()' without loosing the return value of the
     function.

 -- Function: dotest-mkpathname PATHNAME
 -- Function: dotest-mkpathname PATHNAME PREFIX
     Compose a pathname under the temporary testing directory.  The
     optional PREFIX is a relative pathname that is prepended to
     PATHNAME: It is useful to prepend the name of a parent directory.
     Print to stdout the full pathname of the file.

     This function invokes 'dotest-mktmpdir()'.

Testing conditions
..................

 -- Function: dotest-assert-file-exists FILE ERROR_MESSAGE
     Test that FILE exists: If true returns with code zero; else print
     ERROR_MESSAGE, invoke 'dotest-clean-files()' and return with code
     one.

 -- Function: dotest-assert-file-unexists FILE ERROR_MESSAGE
     Test that FILE does not exist: If true return with code zero; else
     print ERROR_MESSAGE, invoke 'dotest-clean-files()' and return with
     code one.


File: mbfl.info,  Node: testing files examples,  Prev: testing files files,  Up: testing files

23.8.3 Examples
---------------

Examples of usage of 'dotest-clean-files':

     function mytest-1.1 () {
         local dir=$(dotest-mkdir a/b)
         local result=

         ...
         result=...
         dotest-equal 123 $result
         dotest-clean-files
     }
     function mytest-1.2 () {
         local dir=$(dotest-mkfile file.ext)
         local result=

         ...
         result=...
         dotest-equal 123 $result
         dotest-clean-files
     }

     dotest mytest-
     dotest-final-report


File: mbfl.info,  Node: sendmail,  Next: Package License,  Prev: testing,  Up: Top

Appendix A Examples for sending email
*************************************

In this appendix we review some example scripts that send email using
Bash.  All the scripts are in the MBFL distribution under the 'examples'
directory.

   First we examine plain scripts (making no use of MBFL) to understand
the basics of how to handle the SMTP protocol and how to "talk" to a
process in background.

   Then we see the documentation of a complex script,
'sendmail-mbfl.sh', which we can use to send email with plain or
encrypted connections.

   Finally we see how to use the GNU Emacs interface to the script,
'sendmail-mbfl.el'.  *note sendmail script emacs::.

* Menu:

* sendmail message::            How to compose a test email message.
* sendmail plain::              Just send an email message.
* sendmail connector::          Send email through a process in
                                background.
* sendmail gnutls::             Using 'gnutls-cli' as connector.
* sendmail openssl::            Using 'openssl' as connector.
* sendmail script::             Sending email.


File: mbfl.info,  Node: sendmail message,  Next: sendmail plain,  Up: sendmail

A.1 How to compose a test email message
=======================================

Here we discuss how to programmatically compose a minimal email message
to be used in testing email scripts.  Basically a message should look
like this:

     Sender: marco@localhost
     From: marco@localhost
     To: root@localhost
     Subject: demo from sendmail-plain.sh
     Message-ID: <15704-6692-23464@this.hostname>
     Date: Tue, 28 Apr 2009 06:16:01 +0200

     This is a text demo from the sendmail-plain.sh script.
     --
     Marco

   We have to remember that the SMTP server receiving the message may
rewrite the addresses, for example: replacing 'localhost' with the fully
qualified local host name (the output of the command 'hostname --fqdn');
so, when reading the delivered message, we do not have to be surprised
to find changed addresses.

   We want to notice the following:

   * The fully qualified local host name is useful to build header
     values.  We can acquire it with the 'hostname' command like this:

          LOCAL_HOSTNAME=$(hostname --fqdn)

     do not confuse this value with the host name of the SMTP server!

   * The value of the 'Message-ID' header must be enclosed in angular
     parentheses, and it must contain an address-like string with random
     characters in the name part.  We can generate it with:

          printf -v MESSAGE_ID '%d-%d-%d@%s' \
              $RANDOM $RANDOM $RANDOM "$LOCAL_HOSTNAME"

     or with:

          printf -v MESSAGE_ID '%s@%s'                   \
              $({ IFS= read -n 15 line </dev/random      \
                   echo "$line" ; } |                    \
                   md5sum --binary | cut -f1 -d' ')      \
              "$LOCAL_HOSTNAME"

   * The value of the 'Date' header must be the current date in a
     specified format.  We can generate it using the GNU Date program
     like this:

          DATE=$(date --rfc-2822) || exit 2

   * In the body of the message: the string that separates the text from
     the signature is the three characters string '-- ' (dash, dash,
     white space).  When composing the message we have to be careful to
     use commands that *do not* drop white spaces.

   In the end, we can use the following chunk of code to compose an
email message:

     PROGNAME=${0##*/}
     FROM_ADDRESS=marco@localhost
     TO_ADDRESS=root@localhost

     function print_message () {
         local LOCAL_HOSTNAME DATE MESSAGE_ID MESSAGE
         LOCAL_HOSTNAME=$(hostname --fqdn) || exit 2
         DATE=$(date --rfc-2822) || exit 2
         printf -v MESSAGE_ID '%d-%d-%d@%s' \
             $RANDOM $RANDOM $RANDOM "$LOCAL_HOSTNAME"
         MESSAGE="Sender: $FROM_ADDRESS
     From: $FROM_ADDRESS
     To: $TO_ADDRESS
     Subject: demo from $PROGNAME
     Message-ID: <$MESSAGE_ID>
     Date: $DATE

     This is a text demo from the $PROGNAME script.
     --\x20
     Marco
     "
         printf "$MESSAGE"
     }

notice that to put the required single white space character in the
text/signature separator we use the escape sequence '\x20' (where 20 is
the hexadecimal value of the white space character in the ASCII
encoding) and print the message with 'printf', which expands the escape
sequences.

   When sending the message to the SMTP server we have to:

   * Be careful in not to wrongly modify it.

   * Send it one line at a time, terminating each line with a carriage
     return, line feed sequence ('\r\n').

   * Quote with a dot lines starting with a dot.

   So we can use an equivalent of the following chunk of code, assuming
'3' is the file descriptor connected to the remote SMTP server:

     print_message | while IFS= read line
     do
         if test "${line:0:1}" = '.'
         then printf '.%s\r\n' "$line" >&3
         else printf  '%s\r\n' "$line" >&3
         fi
     done

notice that 'read' is executed in an environment in which 'IFS' is set
to the empty string, this is to prevent unwanted modification of the
message text.  'read' splits the string it reads into words according to
the current value of 'IFS', and this may lead to mutation of the input
string; word splitting happens when there is a single output variable,
too.  To prevent word splitting, we set 'IFS' to the empty string.


File: mbfl.info,  Node: sendmail plain,  Next: sendmail connector,  Prev: sendmail message,  Up: sendmail

A.2 Just send an email message
==============================

The script below can be found in 'examples/sendmail-plain.sh'.  It just
sends a hard-coded email message, from a hard-coded address to a
hard-coded address.  It makes no use of MBFL.

 -- Function: main
     Drive the script controlling the SMTP protocol.  It should be
     obvious what it does once we understand the following functions.

 -- Function: open_session HOSTNAME
     Open a connection to the SMTP server using a fake device that Bash
     gives us as interface to the network.  For the 'localhost', it ends
     up being:

          /dev/tcp/localhost/25

     where 25 is the TCP port which is officially assigned to the SMTP
     service.  To open the connection we use the idiom:

          exec 3<>/dev/tcp/localhost/25

     which means: open a read and write connection to the selected
     hostname, using file descriptor number 3.  There is nothing special
     in number 3, it is just the first free file descriptor number after
     0 (standard input), 1 (standard output) and 2 (standard error).

     The line:

          trap 'exec 3<&-' EXIT

     means: close file descriptor 3 whenever the script terminates.
     This is redundant in such a simple script, it is there for
     completeness.

 -- Function: send STRING
 -- Function: send TEMPLATE [OPT ...]
     Send a string to the SMTP server.  Use 'printf()' to format the
     string TEMPLATE with the optional arguments, then write the
     resulting string to file descriptor 3.  The string written out is
     terminated with the sequence '\r\n' as mandated by the SMTP
     protocol.

 -- Function: read_and_send_message
     Read an email message from stdin line by line (newline terminator),
     and rewrite it to file descriptor 3 terminating each line with the
     sequence carriage return/line feed.  With the exception of the
     terminating sequence, the lines are left unchanged.

 -- Function: recv EXPECTED_CODE
     Read a line (a sequence of characters up until the first '\n') from
     file descriptor 3.  The line is interpreted as a message from the
     SMTP server: the first three characters are a numeric code.  If the
     code is different from EXPECTED_CODE, raise an error.

     #! /bin/bash
     #
     # Part of: Marco's Bash Functions Library
     # Contents: example script to send email
     # Date: Thu Apr 23, 2009
     #
     # Abstract
     #
     #       This  script  just  sends  a  hardcoded  email  message  from  a
     #       hardcoded address  to a hardcoded  address.  It makes no  use of
     #       MBFL.
     #
     #         The purpose of this script is  to understand how to handle the
     #       SMTP protocol.
     #
     # Copyright (c) 2009, 2010, 2018 Marco Maggi <marco.maggi-ipsu@poste.it>
     #
     # The author hereby grants  permission to use, copy, modify, distribute,
     # and  license this  software  and its  documentation  for any  purpose,
     # provided that  existing copyright notices  are retained in  all copies
     # and that  this notice  is included verbatim in any  distributions.  No
     # written agreement, license, or royalty  fee is required for any of the
     # authorized uses.  Modifications to this software may be copyrighted by
     # their authors and need not  follow the licensing terms described here,
     # provided that the new terms are clearly indicated on the first page of
     # each file where they apply.
     #
     # IN NO  EVENT SHALL THE AUTHOR  OR DISTRIBUTORS BE LIABLE  TO ANY PARTY
     # FOR  DIRECT, INDIRECT, SPECIAL,  INCIDENTAL, OR  CONSEQUENTIAL DAMAGES
     # ARISING OUT  OF THE  USE OF THIS  SOFTWARE, ITS DOCUMENTATION,  OR ANY
     # DERIVATIVES  THEREOF, EVEN  IF THE  AUTHOR  HAVE BEEN  ADVISED OF  THE
     # POSSIBILITY OF SUCH DAMAGE.
     #
     # THE  AUTHOR  AND DISTRIBUTORS  SPECIFICALLY  DISCLAIM ANY  WARRANTIES,
     # INCLUDING,   BUT   NOT  LIMITED   TO,   THE   IMPLIED  WARRANTIES   OF
     # MERCHANTABILITY,    FITNESS   FOR    A    PARTICULAR   PURPOSE,    AND
     # NON-INFRINGEMENT.  THIS  SOFTWARE IS PROVIDED  ON AN "AS  IS" BASIS,
     # AND  THE  AUTHOR  AND  DISTRIBUTORS  HAVE  NO  OBLIGATION  TO  PROVIDE
     # MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
     #
     
     PROGNAME=${0##*/}
     
     function main () {
         local HOSTNAME=localhost
         local SMTP_PORT=25
         local FROM_ADDRESS=marco@localhost
         local TO_ADDRESS=root@localhost
         local LOGGING_TO_STDERR=yes
     
         open_session "$HOSTNAME"
         recv 220
         send 'HELO %s' 127.0.0.1
         recv 250
         send 'MAIL FROM:<%s>' "$FROM_ADDRESS"
         recv 250
         send 'RCPT TO:<%s>' "$TO_ADDRESS"
         recv 250
         send %s DATA
         recv 354
         print_message | read_and_send_message
         send %s .
         recv 250
         send %s QUIT
         recv 221
     }
     function print_message () {
         local LOCAL_HOSTNAME DATE MESSAGE_ID MESSAGE
         LOCAL_HOSTNAME=$(hostname --fqdn) || exit 2
         DATE=$(date --rfc-2822) || exit 2
         printf -v MESSAGE_ID '%d-%d-%d@%s' \
             $RANDOM $RANDOM $RANDOM "$LOCAL_HOSTNAME"
         MESSAGE="Sender: $FROM_ADDRESS
     From: $FROM_ADDRESS
     To: $TO_ADDRESS
     Subject: demo from $PROGNAME
     Message-ID: <$MESSAGE_ID>
     Date: $DATE
     
     This is a text demo from the $PROGNAME script.
     --\x20
     Marco
     "
         printf "$MESSAGE"
     }
     function open_session () {
         local HOSTNAME=${1:?}
         local DEVICE
         printf -v DEVICE '/dev/tcp/%s/%d' "$HOSTNAME" $SMTP_PORT
         exec 3<>"$DEVICE"
         trap 'exec 3<&-' EXIT
     }
     function recv () {
         local EXPECTED_CODE=${1:?}
         local line=
         IFS= read -t 5 line <&3
         if ((127 < $?))
         then
             printf '%s: connection timed out\n' "$PROGNAME" >&2
             exit 2
         fi
         if test "$LOGGING_TO_STDERR" = yes
         then printf '%s log: recv: %s\n' "$PROGNAME" "$line"
         fi
         if test "${line:0:3}" != "$EXPECTED_CODE"
         then
             send '%s' QUIT
             # It is cleaner to wait for the reply from the server.
             IFS= read -t 5 line <&3
     	if ((127 < $?))
     	then
                 printf '%s: connection timed out\n' "$PROGNAME" >&2
                 exit 2
             fi
             if test "$LOGGING_TO_STDERR" = yes
     	then printf '%s log: recv: %s\n' "$PROGNAME" "$line"
     	fi
             exit 2
         fi
     }
     function send () {
         local template=${1:?}
         shift
         local line
         printf -v line "$template" "$@"
         printf '%s\r\n' "$line" >&3
         if test "$LOGGING_TO_STDERR" = yes
         then printf '%s log: sent: %s\n' "$PROGNAME" "$line"
         fi
     }
     function read_and_send_message () {
         local line
         local -i count=0
         while IFS= read line
         do
             if test "${line:0:1}" = '.'
             then printf '.%s\r\n' "$line" >&3
             else printf  '%s\r\n' "$line" >&3
             fi
             let ++count
         done
         if test "$LOGGING_TO_STDERR" = yes
         then printf '%s log: sent message (%d lines)\n' "$PROGNAME" $count
         fi
     }
     
     main
     
     ### end of file


File: mbfl.info,  Node: sendmail connector,  Next: sendmail gnutls,  Prev: sendmail plain,  Up: sendmail

A.3 Send email through a process in background
==============================================

The script below can be found in 'examples/sendmail-connector.sh'.  It
just sends a hard-coded email message, from a hard-coded address to a
hard-coded address.  It makes no use of MBFL.

     Bash version 4 introduced the new keyword 'coproc', which can be
     used to spawn processes in background and talk to them via pipes.
     This keyword in *not* used in this appendix.

   The purpose of the script is to understand how to send a message
through a process in background.  It does the same things of the example
described in *note Just send an email message: sendmail plain.  The main
difference is that the single function 'open_session()' is replaced by
the two functions 'open_session()' and 'connector()'.

   What is important to understand, is how 'open_session()' runs
'connector()' in background and sets up two file descriptors to talk to
it.  In the real world we never use this technique with a function; this
example script makes use of 'connector()' as a replacement for an
external program that can establish sophisticated connections to remote
hosts, for example using the TLS/SSL protocols.

 -- Function: open_session HOSTNAME
     Open a connection to the SMTP server spawning a background process
     represented by the 'connector()' function.  It makes use of two
     FIFOs (First In, First Out).

     If we were to do it from a C language program: we would use the
     'pipe()' system function to create two pipes connecting script's
     process to the background process.

           ---------  out pipe  -----------  socket  --------
          | script  |--------->| connector |<======>| SMTP   |
          | process |<---------| process   |        | server |
           ---------  in pipe   -----------          --------

     Bash has no way to create a pipe using the 'pipe()' system function
     (up until version 4), so we use two FIFO channels created by the
     'mkfifo' program:

          : ${TMPDIR:=/tmp}
          local INFIFO=${TMPDIR}/in.$$
          local OUFIFO=${TMPDIR}/out.$$

          mkfifo --mode=0600 $INFIFO $OUFIFO

     the script will use 'INFIFO' to read characters from 'connector()',
     and 'OUFIFO' to send characters to 'connector()'.

           ---------  OUFIFO   -----------  socket  --------
          | script  |-------->| connector |<======>| SMTP   |
          | process |<--------| process   |        | server |
           ---------  INFIFO   -----------          --------

     Once the FIFOs exist on the file system, we run 'connector()' in
     background, connecting its standard input and output to the FIFOs:

          connector $HOSTNAME $SMTP_PORT <$OUFIFO >$INFIFO &

     be careful in selecting the redirections.  Notice that, in this
     simple example, we ignore errors running 'connector()'.

     Now we open file descriptors connecting them to the FIFOs:

          exec 3<>$INFIFO 4>$OUFIFO

     the script will use file descriptor 3 to read characters from
     'connector()', and file descriptor 4 to send characters to
     'connector()'.  We open the input FIFO for both reading and
     writing, else 'exec' will block waiting for the first char.

     We have connected both the ends of both the FIFOs, so we can remove
     them from the file system:

          rm $INFIFO $OUFIFO

     the FIFOs will continue to exist in the OS kernel until the file
     descriptors are closed.

     Finally we register a clean up handler that closes the descriptors:

          trap 'exec 3<&- 4>&-' EXIT

 -- Function: connector HOSTNAME
     Establish a connection to the SMTP server at HOSTNAME.  It is not
     important here to fully understand how this function works; suffice
     it to say that it reads lines from stdin, and echoes them to the
     server; it reads lines from the server, and echoes them to stdout.

     #! /bin/bash
     #
     # Part of: Marco's Bash Functions Library
     # Contents: example script to send email using bg process
     # Date: Thu Apr 23, 2009
     #
     # Abstract
     #
     #       This  script  just  sends  a  hardcoded  email  message  from  a
     #       hardcoded address  to a hardcoded  address.  It makes no  use of
     #       MBFL.
     #
     #         The purpose  of this  script is  to understand  how to  send a
     #       message through a process in background.
     #
     # Copyright (c) 2009, 2010, 2018 Marco Maggi <marco.maggi-ipsu@poste.it>
     #
     # The author hereby grants  permission to use, copy, modify, distribute,
     # and  license this  software  and its  documentation  for any  purpose,
     # provided that  existing copyright notices  are retained in  all copies
     # and that  this notice  is included verbatim in any  distributions.  No
     # written agreement, license, or royalty  fee is required for any of the
     # authorized uses.  Modifications to this software may be copyrighted by
     # their authors and need not  follow the licensing terms described here,
     # provided that the new terms are clearly indicated on the first page of
     # each file where they apply.
     #
     # IN NO  EVENT SHALL THE AUTHOR  OR DISTRIBUTORS BE LIABLE  TO ANY PARTY
     # FOR  DIRECT, INDIRECT, SPECIAL,  INCIDENTAL, OR  CONSEQUENTIAL DAMAGES
     # ARISING OUT  OF THE  USE OF THIS  SOFTWARE, ITS DOCUMENTATION,  OR ANY
     # DERIVATIVES  THEREOF, EVEN  IF THE  AUTHOR  HAVE BEEN  ADVISED OF  THE
     # POSSIBILITY OF SUCH DAMAGE.
     #
     # THE  AUTHOR  AND DISTRIBUTORS  SPECIFICALLY  DISCLAIM ANY  WARRANTIES,
     # INCLUDING,   BUT   NOT  LIMITED   TO,   THE   IMPLIED  WARRANTIES   OF
     # MERCHANTABILITY,    FITNESS   FOR    A    PARTICULAR   PURPOSE,    AND
     # NON-INFRINGEMENT.  THIS  SOFTWARE IS PROVIDED  ON AN "AS  IS" BASIS,
     # AND  THE  AUTHOR  AND  DISTRIBUTORS  HAVE  NO  OBLIGATION  TO  PROVIDE
     # MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
     #
     
     PROGNAME=${0##*/}
     : ${TMPDIR:=/tmp}
     
     function main () {
         local HOSTNAME=localhost
         local SMTP_PORT=25
         local FROM_ADDRESS=marco@localhost
         local TO_ADDRESS=root@localhost
         local LOGGING_TO_STDERR=yes
     
         open_session "$HOSTNAME"
         recv 220
         send 'HELO %s' 127.0.0.1
         recv 250
         send 'MAIL FROM:<%s>' "$FROM_ADDRESS"
         recv 250
         send 'RCPT TO:<%s>' "$TO_ADDRESS"
         recv 250
         send %s DATA
         recv 354
         print_message | read_and_send_message
         send %s .
         recv 250
         send %s QUIT
         recv 221
     }
     function print_message () {
         local LOCAL_HOSTNAME DATE MESSAGE_ID MESSAGE
         LOCAL_HOSTNAME=$(hostname --fqdn) || exit 2
         DATE=$(date --rfc-2822) || exit 2
         printf -v MESSAGE_ID '%d-%d-%d@%s' \
             $RANDOM $RANDOM $RANDOM "$LOCAL_HOSTNAME"
         MESSAGE="Sender: $FROM_ADDRESS
     From: $FROM_ADDRESS
     To: $TO_ADDRESS
     Subject: demo from $PROGNAME
     Message-ID: <$MESSAGE_ID>
     Date: $DATE
     
     This is a text demo from the $PROGNAME script.
     --\x20
     Marco
     "
         printf "$MESSAGE"
     }
     function open_session () {
         local HOSTNAME=${1:?}
         local INFIFO=${TMPDIR}/in.$$
         local OUFIFO=${TMPDIR}/out.$$
         # Bash  has  no  operation  equivalent to  the  C  level
         # "pipe()" function, so we have to use FIFOs.
         mkfifo --mode=0600 $INFIFO $OUFIFO
         connector "$HOSTNAME" <$OUFIFO >$INFIFO &
         # Open the input FIFO for both reading and writing, else
         # "exec" will block waiting for the first char.
         exec 3<>$INFIFO 4>$OUFIFO
         # We have connected both the  ends of both the FIFOs, so
         # we  can remove them  from the  file system:  the FIFOs
         # will continue to exist  until the file descriptors are
         # closed.
         rm $INFIFO $OUFIFO
         trap 'exec 3<&- 4>&-' EXIT
     }
     function recv () {
         local EXPECTED_CODE=${1:?}
         local line=
         IFS= read line <&3
         if test "$LOGGING_TO_STDERR" = yes
         then printf '%s log: recv: %s\n' "$PROGNAME" "$line"
         fi
         if test "${line:0:3}" != "$EXPECTED_CODE"
         then
             send %s QUIT
             # It is cleaner to wait for the reply from the
             # server.
             IFS= read line <&3
             if test "$LOGGING_TO_STDERR" = yes
             then printf '%s log: recv: %s\n' "$PROGNAME" "$line"
             fi
             exit 2
         fi
     }
     function send () {
         local template=${1:?}
         shift
         local line
         printf -v line "$template" "$@"
         printf '%s\r\n' "$line" >&4
         if test "$LOGGING_TO_STDERR" = yes
         then printf '%s log: sent: %s\n' "$PROGNAME" "$line"
         fi
     }
     function read_and_send_message () {
         local line
         local -i count=0
         while IFS= read line
         do
             if test "${line:0:1}" = '.'
             then printf '.%s\r\n' "$line" >&4
             else printf  '%s\r\n' "$line" >&4
             fi
             let ++count
         done
         if test "$LOGGING_TO_STDERR" = yes
         then printf '%s log: sent message (%d lines)\n' "$PROGNAME" $count
         fi
     }
     function connector () {
         local HOSTNAME=${1:?} query= answer= line=
         local DEVICE
         printf -v DEVICE '/dev/tcp/%s/%d' "$HOSTNAME" $SMTP_PORT
         exec 3<>"$DEVICE"
         # Read the  greetings from the server, echo  them to the
         # client.
         IFS= read -t 5 answer <&3
         if ((127 < $?))
         then
             printf '%s: connection timed out\n' "$PROGNAME" >&2
             exit 2
         fi
         printf '%s\n' "$answer"
         # Read the query from the client, echo it to the server.
         while read query
         do
             printf '%s\r\n' "$query" >&3
             # Read the  answer from the  server, echo it  to the
             # client.
             IFS= read -t 5 answer <&3
             if ((127 < $?))
             then
                 printf '%s: connection timed out\n' "$PROGNAME" >&2
                 exit 2
             fi
             printf '%s\n' "$answer"
             # Test special queries.
             if test "$query" = QUIT$'\r'
             then
                 IFS= read -t 5 answer <&3
                 if ((127 < $?))
                 then
                     printf '%s: connection timed out\n' "$PROGNAME" >&2
                     exit 2
                 fi
                 printf '%s\n' "$answer"
                 exit
             fi
             if test "$query" = DATA$'\r'
             then
                 # Read data lines from  the client, echo them to
                 # the server up until ".\r" is read.
                 while IFS= read line
                 do
                     printf '%s\n' "$line" >&3
                     test "${line:0:2}" = .$'\r' && break
                 done
                 # Read the answer to  data from the server, echo
                 # it to the client.
                 IFS= read -t 5 answer <&3
                 if ((127 < $?))
                 then
                     printf '%s: connection timed out\n' "$PROGNAME" >&2
                     exit 2
                 fi
                 printf '%s\n' "$answer"
             fi
         done
         # We should never come here.
         exit 1
     }
     
     main
     
     ### end of file


File: mbfl.info,  Node: sendmail gnutls,  Next: sendmail openssl,  Prev: sendmail connector,  Up: sendmail

A.4 Using 'gnutls-cli' as connector
===================================

GNU TLS is a library implementing the TLS protocol; we can use it to
establish encrypted and authenticated connections to a remote host.  The
SMTP protocol has extensions to allow usage of a TLS layer.

   A GNU TLS installation comes with a command line test program,
'gnutls-cli', that can establish an encrypted connection.  We use this
command as the "connector" modeled in *note Send email through a process
in background: sendmail connector.  It has a manual page, which we may
want to read.

   When handling an encrypted connection we have to know in advance how
the remote SMTP server behaves.  Let's see first the simpler example,
using the a human driven interactive session; then we will describe a
more complex interaction.

     Notice that 'gnutls-cli' has a '--crlf' option that will cause all
     the lines sent to the server to be terminated by a carriage
     return/line feed sequence ('\r\n' or '\x0d\x0a').  If we write a
     script that terminates by itself the lines with this sequence, for
     example:

          printf 'ehlo localhost.localdomain\r\n'

     we must *avoid* this option, else SMTP protocol violation errors
     may occur.  However, if we try a hand-driven interactive session,
     we want to use this option to send protocol-compliant lines.

* Menu:

* sendmail gnutls now::         Immediate encrypted bridge.
* sendmail gnutls delay::       Delayed encrypted bridge.


File: mbfl.info,  Node: sendmail gnutls now,  Next: sendmail gnutls delay,  Up: sendmail gnutls

A.4.1 Immediate encrypted bridge
--------------------------------

We use as example the server 'relay.poste.it', port '465'.  You have to
have an account there to use it; do not bomb this server with fake
connections.  This server requests us to build the encrypted bridge
immediately after the connection has been established, without waiting
for any line of greetings from the server.

   So, we start the connector like this:

     $ gnutls-cli --port 465 relay.poste.it

if the connection succeeds: 'gnutls-cli' prints a lot of message lines
on its standard output explaining what is going on; at last comes the
line of greetings from the server, which begins with code '220'.

   The server supports the 'AUTH LOGIN' authentication mechanism, which
requires the base64 encoding of the user name and password; we can
perform it with the external program 'base64' (which comes with GNU
Coreutils) like this:

     ENCODED_USERNAME=$(echo -n 'the-user-name' | base64)
     ENCODED_PASSWORD=$(echo -n 'the-pass-word' | base64)

GNU Emacs users can do it with:

     (setq my-usr (base64-encode-string "the-user-name"))
     (setq my-pwd (base64-encode-string "the-pass-word"))

The authentication dialogue goes like this:

  1. We send 'AUTH LOGIN', to start the authentication.

  2. It replies with '334 VXNlcm5hbWU6' which is the request for the
     username.  The string 'VXNlcm5hbWU6' is the base64 encoding of the
     string 'Username:' (without trailing newline); we can verify this
     with:

          $ echo -n Username: | base64

     or in the Emacs' scratch buffer:

          (base64-encode-string "Username:")

  3. We send the login user name encoded in base64.

  4. It checks the string and, if the format is correct, it replies with
     '334 UGFzc3dvcmQ6' (this should happen even if the username is
     unknown to the server).  The string 'UGFzc3dvcmQ6' is the base64
     encoding of the string 'Password:' (without ending newline); we can
     verify this with:

          $ echo -n Password: | base64

     or in the Emacs' scratch buffer:

          (base64-encode-string "Password:")

  5. We send the login password encoded in base64.

  6. It checks it and, if correct, it replies with a line starting with
     code '235'.

Beware that if we are not quick to send the encoded password after the
encoded user name, the server may reset the authentication process as if
we sent a wrong user name.

   So we can do the SMTP dialogue reported below by hand (which is an
edited log of a session under Emacs' eshell); lines starting with
'recv>' are the ones received from the server, lines starting with
'send>' are the ones we send to the server, the ellipses '...' are
replacements for server text we are not interested in.

     $ gnutls-cli --crlf --port 465 relay.poste.it

     recv> 220 ... ESMTP Service ...
     send> ehlo localhost.localdomain
     recv> 250-...
     recv> 250-DSN
     recv> 250-8BITMIME
     recv> 250-PIPELINING
     recv> 250-HELP
     recv> 250-AUTH=LOGIN
     recv> 250-AUTH LOGIN CRAM-MD5 DIGEST-MD5 PLAIN
     recv> 250-DELIVERBY 300
     recv> 250 SIZE
     send> auth login
     recv> 334 VXNlcm5hbWU6
     send> <the-base64-username>
     recv> 334 UGFzc3dvcmQ6
     send> <the-base64-password>
     recv> 235 login authentication successful
     send> mail from:<from-address@poste.it>
     recv> 250 MAIL FROM:<from-address@poste.it> OK
     send> rcpt to:<to-address@other-host.it>
     recv> 250 RCPT TO:<to-address@other-host.it> OK
     send> data
     recv> 354 Start mail input; end with <CRLF>.<CRLF>
     send> From: <from-address@poste.it>
     send> To: <to-address@other-host.it>
     send> Subject: interactive attempt
     send>
     send> Text for interactive attempt.
     send> --
     send> Marco
     send> .
     recv> 250 ... Mail accepted
     send> quit
     recv> 221 ... QUIT
     recv> - Peer has closed the GNUTLS connection


File: mbfl.info,  Node: sendmail gnutls delay,  Prev: sendmail gnutls now,  Up: sendmail gnutls

A.4.2 Delayed encrypted bridge
------------------------------

We use as example the server 'smtp.gmail.com', port '587'.  You have to
have an account there to use it; do not bomb this server with fake
connections.  This server requests us to start an 'ESMTP' dialogue, then
issue the 'STARTTLS' command and build the encrypted bridge; once the
bridge is set up, we restart an 'ESMTP' dialogue and do the
authentication and the message delivery.

   We start the connector like this:

     $ gnutls-cli --starttls --port 587 smtp.gmail.com

if the connection succeeds: 'gnutls-cli' prints message lines on its
standard output explaining what is going on; at last comes the line of
greetings from the server, which begins with code '220'.

   The '--starttls' option tells 'gnutls-cli' *not* to build the
encrypted bridge immediately; rather, it waits for a 'SIGALRM' signal,
which we must deliver to it when we are ready.  The quickest way to send
such a signal, when there is only one 'gnutls-cli' process running, is:

     $ kill -SIGALRM $(/sbin/pidof gnutls-cli)

beware that 'pidof' may be installed in other places on your system.

   The server supports the 'AUTH PLAIN' authentication mechanism, which
requires the base64 encoding of the user name and password stored in a
special record; we can do it with the external program 'base64' (which
comes with GNU Coreutils) like this:

     SECRETS=$(printf "\x00%s\x00%s" \
        "${LOGIN_NAME}" "${PASSWORD}" | base64)

GNU Emacs users can do it with:

     (setq my-auth (base64-encode-string
        (format "%c%s%c%s" 0 "the-user-name" 0 "the-pass-word")))

The authentication dialogue goes like this:

  1. We send 'AUTH PLAIN' followed by the encoded credentials.

  2. It checks the user name and password and, if correct, it replies
     with code '235'.

   So, we can do the SMTP dialogue reported below by hand (which is an
edited log of a session under Emacs' eshell); lines starting with
'recv>' are the ones received from the server, lines starting with
'send>' are the ones we send to the server, the ellipses '...' are
replacements for server text we are not interested in.

     $ gnutls-cli --crlf --starttls --port 587 smtp.gmail.com

     recv> 220 ... ESMTP ...
     send> ehlo localhost.localdomain
     recv> 250-...
     recv> 250-SIZE 35651584
     recv> 250-8BITMIME
     recv> 250-STARTTLS
     send> 250-ENHANCEDSTATUSCODES
     recv> 250 PIPELINING
     send> starttls
     recv> 220 2.0.0 Ready to start TLS

     === here we deliver SIGALRM to the gnutls-cli process

     recv> *** Starting TLS handshake
     recv> - Certificate type: X.509
     recv>  - Got a certificate list of 1 certificates.
     recv>
     recv>  - Certificate[0] info:
     recv>  # The hostname in the certificate matches 'smtp.gmail.com'.
     recv>  # valid since: ..
     recv>  # expires at: ...
     recv>  # fingerprint: ...
     recv>  # Subject's DN: ...
     recv>  # Issuer's DN: ...
     recv>
     recv>
     recv> - Peer's certificate issuer is unknown
     recv> - Peer's certificate is NOT trusted
     recv> - Version: TLS1.0
     recv> - Key Exchange: RSA
     recv> - Cipher: ARCFOUR-128
     recv> - MAC: MD5
     recv> - Compression: NULL
     send> ehlo localhost.localdomain
     recv> 250-...
     recv> 250-SIZE 35651584
     recv> 250-8BITMIME
     recv> 250-AUTH LOGIN PLAIN
     recv> 250-ENHANCEDSTATUSCODES
     recv> 250 PIPELINING
     send> auth plain <the-encoded-auth-credentials>
     recv> 235 2.7.0 Accepted
     send> mail from:<from-address@gmail.com>
     recv> 250 2.1.0 OK ...
     send> rcpt to:<to-address@poste.it>
     recv> 250 2.1.5 OK ...
     send> data
     recv> 354  Go ahead ...
     send> From: from-address@gmail.com
     send> To: to-address@poste.it
     send> Subject: interactive demo from gmail
     send>
     send> demo
     send> .
     recv> 250 2.0.0 OK ...
     send> quit
     recv> 221 2.0.0 closing connection ...


File: mbfl.info,  Node: sendmail openssl,  Next: sendmail script,  Prev: sendmail gnutls,  Up: sendmail

A.5 Using 'openssl' as connector
================================

OpenSSL is a library implementing the SSL/TLS protocol; we can use it to
establish encrypted and authenticated connections to a remote host.

   An OpenSSL installation comes with a command line test program,
'openssl', that can establish an encrypted connection.  We use this
command as the "connector" modeled in *note Send email through a process
in background: sendmail connector.  It has a manual page, which we may
want to read.

   Here we see how we can use the 'openssl' program in place of the
'gnutls-cli' program described in *note Using 'gnutls-cli' as connector:
sendmail gnutls.  The two methods have a lot in common (the SMTP
protocol is the same), we only have to understand the command line of
the program.

     Notice that 'openssl' has a '-crlf' option that will cause all the
     lines sent to the server to be terminated by a carriage return/line
     feed sequence ('\r\n' or '\x0d\x0a').  If we write a script that
     terminates by itself the lines with this sequence, for example:

          printf 'ehlo localhost.localdomain\r\n'

     we must *avoid* this option, else SMTP protocol violation errors
     may occur.  However, if we try a hand-driven interactive session,
     we want to use this option to send protocol-compliant lines.

* Menu:

* sendmail openssl now::        Immediate encrypted bridge.
* sendmail openssl delay::      Delayed encrypted bridge.


File: mbfl.info,  Node: sendmail openssl now,  Next: sendmail openssl delay,  Up: sendmail openssl

A.5.1 Immediate encrypted bridge
--------------------------------

To build the encrypted bridge right after the connection, without
exchanging greetings with the server, we do:

     openssl s_client -quiet -connect relay.poste.it:465

then we start the SMTP dialogue as outlined in *note Immediate encrypted
bridge: sendmail gnutls now.


File: mbfl.info,  Node: sendmail openssl delay,  Prev: sendmail openssl now,  Up: sendmail openssl

A.5.2 Delayed encrypted bridge
------------------------------

To first exchange greetings, then send 'STARTTLS' and finally build the
encrypted bridge, we do:

     openssl s_client -quiet -starttls smtp \
         -connect smtp.gmail.com:587

then we start the SMTP dialogue as outlined in *note Immediate encrypted
bridge: sendmail gnutls now.  'openssl' knows how to start an SMTP
dialogue, and it does it automatically.


File: mbfl.info,  Node: sendmail script,  Prev: sendmail openssl,  Up: sendmail

A.6 Sending email
=================

This section documents the example script 'examples/sendmail-mbfl.sh',
which makes use of MBFL to send an email message.  The script sends
already composed messages using plain or TLS sessions, and it can use
both OpenSSL and GNU TLS.

* Menu:

* sendmail script examples::    Usage examples.
* sendmail script invoking::    Command line options.
* sendmail script hostinfo::    Reading host informations from file.
* sendmail script authinfo::    Reading authentication credentials
                                from file.
* sendmail script emacs::       Interfacing with GNU Emacs.


File: mbfl.info,  Node: sendmail script examples,  Next: sendmail script invoking,  Up: sendmail script

A.6.1 Usage examples
--------------------

Let's say we have a file named 'message.mail' holding a fully composed
email message:

     Sender: marco@localhost
     From: marco@localhost
     To: root@localhost
     Subject: server on fire?

     I noticed flames raising from the server room...
     --
     Marco

basically, to send it with 'sendmail-mbfl.sh' we have to do:

     $ sendmail-mbfl.sh \
         --envelope-from=marco@localhost  \
         --envelope-to=root@localhost     \
         --message=message.mail

by default the SMTP server name is set to 'localhost' and the TCP port
to '25'.  The default session is plain, without TLS.

   Port number '25' is officially assigned to the SMTP protocol; if the
localhost uses a different TCP port, we can select it with the '--port'
option:

     $ sendmail-mbfl.sh --port=587         \
         --envelope-from=marco@localhost   \
         --envelope-to=root@localhost      \
         --message=message.mail

   To send mail to a remote SMTP server, we select its hostname with the
'--host' option:

     $ sendmail-mbfl.sh \
         --host=smtp.gmail.com --port=587  \
         --envelope-from=marco@gmail.com   \
         --envelope-to=marco@spiffy.it     \
         --message=message.mail

   Mail services may offer encrypted sessions to their SMTP servers.
Encryption with the TLS protocol is supported by 'sendmail-mbfl.sh'
through external programs.  Whether a server requires an encrypted
session, can be specified using the '--plain', '--tls' or '--starttls'
options.

   To establish an encrypted session, the script needs to acquire the
credentials of the user.  These can be stored in a configuration file
named '~/.mbfl-authinfo', which looks like this:

     machine smtp.gmail.com login marco@gmail.com password abcdefghilm
     machine relay.poste.it login marco@poste.it  password 0123456789

so that a line/record can be uniquely identified with values of the
'--host' and '--username' options.

   So we can do:

     $ sendmail-mbfl.sh --host=gmail       \
         --username=marco --starttls        \
         --envelope-from=marco@gmail.com   \
         --envelope-to=marco@spiffy.it     \
         --message=message.mail


File: mbfl.info,  Node: sendmail script invoking,  Next: sendmail script hostinfo,  Prev: sendmail script examples,  Up: sendmail script

A.6.2 Command line options
--------------------------

The synopsis is:

     sendmail-mbfl.sh \
         --envelope-from=<ADDRESS>              \
         --envelope-to=<ADDRESS>                \
         [--message=<SOURCE> | --test-message]
         [options]

the script sends an email address, and it can do a plain session or use
a connector.  Options description follows.

'-FADDRESS'
'--envelope-from=ADDRESS'
     Select the 'MAIL FROM' envelope address.  If this option is used
     multiple times: the last one wins.

'-TADDRESS'
'--envelope-to=ADDRESS'
     Select the 'RCPT TO' envelope address.  This option can be used
     multiple times: each ADDRESS is appended to a list of recipients.

'-MSOURCE'
'--message=SOURCE'
     Select the source of the whole email message.  If SOURCE is a file
     pathname, that file is read and used as data; if SOURCE is '-', the
     message is read from the standard input channel.  It defaults to
     '-'.

'--test-message'
     Send a test message with a hard-coded body part.  This option
     supersedes '--message'.

'--host=HOST'
     Select the SMTP server host name.  It defaults to 'localhost'.

'--host-info=FILE'
     Select a file from which to read host and port informations.

'-pPORT'
'--port=PORT'
     Select the SMTP server TCP port; this option supersedes
     '--host-info'.  It defaults to '25'.

'--plain'
'--tls'
'--starttls'
     Establish a plain session, TLS session with immediate bridge
     construction or TLS session with bridge construction after
     'STARTTLS' command.

'--gnutls'
     Use 'gnutls-cli' as connector for encrypted sessions.  This is the
     default when '--tls' or '--starttls' are used.

'--openssl'
     Use 'gnutls-cli' as connector for encrypted sessions.

'--auth-info=FILE'
     Select the file, in 'netrc' format, from which to read the
     authorisation credentials.  Defaults to '~/.mbfl-authinfo'.

'--username=USER'
     Specify a string used to select an account in the authorisation
     file.  USER must be a substring of the username present in the
     file, the first matching line from the file is selected.  So, if
     the authinfo file is:

          machine smtp.gmail.com login mrc.mgg@gmail.com password <password>
          machine relay.poste.it login marco.maggi-ipsu password <password>

     we can use '--username=mrc.mgg' to select the first line and
     'marco.maggi' to select the second line.

'--auth-none'
'--auth-plain'
'--auth-login'
     Perform no authorisation, the 'AUTH PLAIN' authorisation or the
     'AUTH LOGIN' authorisation.


File: mbfl.info,  Node: sendmail script hostinfo,  Next: sendmail script authinfo,  Prev: sendmail script invoking,  Up: sendmail script

A.6.3 Reading host informations from file
-----------------------------------------

For each SMTP server we need the following informations: the hostname,
the port number, the session type, the authorisation method.  There are
two ways to specify these:

   * Use the command line options as in:

          $ sendmail-mbfl.sh \
              --host=smtp.gmail.org --port=587    \
              --tls --auth-login                  \
              ...

   * Use the hostinfo file and the option '--host' to select a record
     into it, as in:

          $ sendmail-mbfl.sh --host=smtp.gmail.org ...

          $ sendmail-mbfl.sh --host=smtp.gmail.org \
              --host-info=~/.hostrc ...

If '--host' is not used: the hostname defaults to 'localhost'.  If the
selection of port, session type or authorisation type is left
unspecified: The script automatically looks into the default hostinfo
file.  Informations from command line options supersede informations
from the hostinfo file.

   The default pathname for the hostinfo file is '$HOME/.mbfl-hostinfo'
and can be overridden by the '--host-info' option.  The format of this
file is line oriented: Blank lines are ignored, lines starting with a
'#' character are comments, lines starting with 'machine' are host
records.

   Each record line must have the format:

     machine <host> service <name> port <number> session <type> auth <type>

for example:

     # ~/.mbfl-hostinfo --
     #

     # SMTP servers
     machine localhost service smtp port 25 session plain auth none
     machine relay.poste.it service smtp port 465 session tls auth login
     machine smtp.gmail.com service smtp port 587 session starttls auth plain

     # POP3 servers
     machine pop.tiscali.it service pop3 port 110 session plain auth userpass
     machine relay.poste.it service pop3 port 995 session tls auth userpass
     machine pop.googlemail.com service pop3 port 995  session tls auth userpass

     ### end of file

so that we can extract a record with the following script:

     file=~/.mbfl-hostinfo
     host=gmail
     service=smtp

     rex='^[ \t]*'
     rex+='machine[ \t]\+.*%s.*[ \t]\+'
     rex+='service[ \t]\+%s[ \t]\+'
     rex+='port[ \t]\+[0-9]\+[ \t]\+'
     rex+='session[ \t]\+\(plain\|tls\|starttls\)[ \t]\+'
     rex+='auth[ \t]\+\(none\|plain\|login\)'
     rex+='[ \t]*$'
     rex=$(printf "$rex" $host $service)

     set -- $(grep "$rex" "$file")
     echo machine $2
     echo service $4
     echo port    $6
     echo session $8
     shift 9
     echo auth    $1

currently 'sendmail-mbfl.sh' parses the file using the '=~' regular
expressions operator.

   Notice that when using the hostinfo file, the value of the '--host'
option can be a substring of the host name.


File: mbfl.info,  Node: sendmail script authinfo,  Next: sendmail script emacs,  Prev: sendmail script hostinfo,  Up: sendmail script

A.6.4 Reading authentication credentials from file
--------------------------------------------------

The only way the script has to acquire the user name and password to log
into the remote server, is by reading the authinfo file.  By default,
its pathname is '$HOME/.mbfl-authinfo', it can be overridden with the
'--auth-info' option.

   Its format is a simplified version of the 'netrc' file format: blank
lines are ignored, lines starting with a '#' character are comments,
lines starting with 'machine' are host records.

   Each record must have the format:

     machine <hostname> login <user-name> password <pass-word>

for example:

     machine smtp.gmail.com login one@gmail.com password abcdefghilm
     machine relay.poste.it login two@poste.it  password 0123456789

so that we can extract a record with the following script:

     file=~/.mbfl-authinfo
     host=poste
     username=marco

     rex='^[ \t]*'
     rex+='machine[ \t]\+.*%s.*[ \t]\+'
     rex+='login[ \t]\+.*%s.*[ \t]\+'
     rex+='password[ \t]\+.*'
     rex+='[ \t]*$'
     rex=$(printf "$rex" $host $username)

     line=$(grep "$rex" $file)
     set -- $line
     echo machine  $2
     echo username $4
     echo password $6

currently 'sendmail-mbfl.sh' parses the file using the '=~' regular
expressions operator.

   The host name and the user name are selected by the command line
options '--host' and '--username'.  Notice that the values for these
options can be substrings of the values in the authinfo file.


File: mbfl.info,  Node: sendmail script emacs,  Prev: sendmail script authinfo,  Up: sendmail script

A.6.5 Interfacing with GNU Emacs
--------------------------------

This section documents an Emacs interface to the 'sendmail-mbfl.sh'
script that can be used to send mail.  It consists of an Emacs Lisp
library that allows us to send mail with all the methods supported by
the script.

   To use it we have to install the file 'examples/sendmail-mbfl.el' in
one of the directories in the load path of Emacs, then load it with:

     (require 'sendmail-mbfl)

   The library assumes that 'message.el' and 'sendmail.el' are available
on the system; recent installations of Emacs should have them.

* Menu:

* sendmail script emacs vars::  Customisable variables.
* sendmail script emacs send::  Sending and delivering functions.
* sendmail script emacs insp::  Message inspection functions.
* sendmail script emacs misc::  Miscellaneous functions.


File: mbfl.info,  Node: sendmail script emacs vars,  Next: sendmail script emacs send,  Up: sendmail script emacs

A.6.5.1 Customisable variables
..............................

A customisation group called 'sendmail-mbfl' is available to configure
the library.

 -- Customisable Variable: sendmail-mbfl-program
     A string representing the name of the MBFL shell script.  By
     default set to 'sendmail-mbfl.sh'.

 -- Customisable Variable: sendmail-mbfl-extra-args
     A list of strings representing extra arguments for the command line
     of 'sendmail-mbfl.sh'.  By default set to:

          ("--verbose" "--debug")

 -- Customisable Variable: sendmail-mbfl-envelope-from-function
     Select a function to call to acquire, from the current buffer, the
     envelope email address of the sender, to be used in the 'MAIL FROM'
     SMTP command.

     The function is invoked with no arguments and it must return a
     single string representing the email address.  If no suitable
     address is found: it must raise an error.  The function may be
     called multiple times for the same message buffer.

     The selected function is used by 'send-mail-with-mbfl'.  By default
     it is set to 'sendmail-mbfl-envelope-from'.

 -- Customisable Variable: sendmail-mbfl-envelope-to-function
     Select a function to call to acquire, from the current buffer, the
     envelope email addresses of the receivers, to be used in the 'RCPT
     TO' SMTP command.

     The function is invoked with no arguments and it must return a list
     of strings representing email addresses.  If no suitable address is
     found: it must raise an error.  The function may be called multiple
     times for the same message buffer.

     The selected function is used by 'send-mail-with-mbfl'.  By default
     it is set to 'sendmail-mbfl-envelope-to'.

 -- Customisable Variable: sendmail-mbfl-extract-addresses-function
     Select a function to call to extract a list of email addresses from
     an email header.  It is invoked with no arguments and the buffer
     narrowed to the header to examine.

     The function is invoked with no arguments and it must return a list
     of strings representing email addresses, or nil.

     The selected function is used by 'sendmail-mbfl-envelope-from' and
     'sendmail-mbfl-envelope-to'.

 -- Customisable Variable: sendmail-mbfl-hostname-function
     Select a function to call to extract, from the current buffer, the
     hostname of the SMTP server to be used to send the message.  The
     result is used as search key in the selected hostinfo file.

     The function is invoked with no arguments and it must return a
     string representing the hostname; if it is unable to determine the
     hostname: it must raise an error.

     The selected function is used by 'send-mail-with-mbfl'.  By default
     it is set to 'sendmail-mbfl-hostname'.

 -- Customisable Variable: sendmail-mbfl-username-function
     Select a function to call to extract, from the current buffer, the
     username with which to login to the SMTP server.  The result is
     used as search key in the selected authinfo file.

     The function is invoked with no arguments and it must return a
     string representing the username; if it is unable to determine the
     username: it must raise an error.

     The selected function is used by 'send-mail-with-mbfl'.  By default
     it is set to 'sendmail-mbfl-username'.

 -- Customisable Variable: sendmail-mbfl-host-info
     The pathname of the file holding informations about known SMTP
     servers.  *note Reading host informations from file: sendmail
     script hostinfo.

     By default it is set to '~/.mbfl-hostinfo'.

 -- Customisable Variable: sendmail-mbfl-auth-info
     The pathname of the file holding informations about known accounts
     at SMTP servers.  *note Reading authentication credentials from
     file: sendmail script authinfo.

     By default it is set to '~/.mbfl-authinfo'.

 -- Customisable Variable: sendmail-mbfl-connector
     Select the external program to use to establish the TLS transport
     layer.  Valid values are the strings: 'gnutls', 'openssl'.  The
     default is 'openssl' because it is more likely to be installed on
     any system.

 -- Customisable Variable: sendmail-mbfl-timeout
     Select the timeout in seconds for reading answers from the SMTP
     server.  The default is 5.


File: mbfl.info,  Node: sendmail script emacs send,  Next: sendmail script emacs insp,  Prev: sendmail script emacs vars,  Up: sendmail script emacs

A.6.5.2 Sending and delivering functions
........................................

 -- Function: send-mail-with-mbfl
     Send the email message in the current buffer.  This interactive
     function can be invoked directly by the user, or, better, used as
     value for 'message-send-mail-function'.  Sending involves:

       1. Normalising the message with
          'sendmail-mbfl-normalise-message'.

       2. Performing special deliveries with 'sendmail-mbfl-delivery'.

       3. Posting the message to an MTA using 'sendmail-mbfl-post'.

 -- Function: sendmail-mbfl-delivery
     Perform special deliveries of the email message in the current
     buffer.  If the message has an 'Fcc' header, deliver is performed
     relying on 'mail-do-fcc' from 'sendmail.el'.

     It is to be called after 'sendmail-mbfl-normalise-message' or an
     equivalent normalisation has been applied to the message.

 -- Function: sendmail-mbfl-post
     Post the email message in the current buffer using an MTA.  Posting
     involves:

       1. Preparing the message with
          'sendmail-mbfl-prepare-message-for-mta'.

       2. Saving the message into a temporary file.

       3. Sending the file using the program selected with the
          customisable variable 'sendmail-mbfl-program'.

     It is to be called after 'sendmail-mbfl-normalise-message' or an
     equivalent normalisation has been applied to the message.


File: mbfl.info,  Node: sendmail script emacs insp,  Next: sendmail script emacs misc,  Prev: sendmail script emacs send,  Up: sendmail script emacs

A.6.5.3 Message inspection functions
....................................

 -- Function: sendmail-mbfl-envelope-from
 -- Function: sendmail-mbfl-envelope-from/message
     'sendmail-mbfl-envelope-from' interprets the current buffer as an
     email message and searches the contents for an email address to be
     used as envelope sender.

     It examines the headers 'From' and 'Sender', in this order and it
     returns a single string representing the email address; if no
     suitable address is found: it raises an error.  The address is
     extracted from the headers using the function selected by the
     customisable variable 'sendmail-mbfl-extract-addresses-function'.

     'sendmail-mbfl-envelope-from/message' is an interactive wrapper for
     'sendmail-mbfl-envelope-from' that prints the result to the
     '*Message*' buffer.

 -- Function: sendmail-mbfl-envelope-to
 -- Function: sendmail-mbfl-envelope-to/message
     'sendmail-mbfl-envelope-to' interprets the current buffer as an
     email message and searches the contents for email addresses to be
     used as envelope receivers.

     It examines the headers 'To', 'Cc' and 'Bcc' and it returns a list
     of strings representing email addresses; if no suitable address is
     found: it raises an error.  The addresses are extracted from the
     headers using the function selected by the customisable variable
     'sendmail-mbfl-extract-addresses-function'.

     'sendmail-mbfl-envelope-to/message' is an interactive wrapper for
     'sendmail-mbfl-envelope-to' that prints the result to the
     '*Message*' buffer.

 -- Function: sendmail-mbfl-extract-addresses
     Extract a list of email addresses from the current buffer.  It must
     be invoked with the buffer narrowed to the header to examine.
     Return a list of email addresses as strings, or nil if no address
     is found.

 -- Function: sendmail-mbfl-hostname
 -- Function: sendmail-mbfl-hostname/message
     'sendmail-mbfl-hostname' extracts, from the current buffer, the
     hostname of the SMTP server to be used to send the message.  The
     result is used as search key in the selected hostinfo file.

     It returns a string representing the hostname else, if unable to
     determine the hostname, it raises an error.  The hostname is the
     hostname part of the value returned by
     'sendmail-mbfl-envelope-from'.

     'sendmail-mbfl-hostname/message' is an interactive wrapper for
     'sendmail-mbfl-hostname' that prints the result to the '*Message*'
     buffer.

 -- Function: sendmail-mbfl-username
 -- Function: sendmail-mbfl-username/message
     'sendmail-mbfl-username' extracts, from the current buffer, the
     username with which login to the SMTP server.  The result is used
     as search key in the selected authinfo file.

     It returns a string representing the username else, if unable to
     determine the username, it raises an error.  The username is the
     username part of the value returned by
     'sendmail-mbfl-envelope-from'.

     'sendmail-mbfl-username/message' is an interactive wrapper for
     'sendmail-mbfl-username' that prints the result to the '*Message*'
     buffer.


File: mbfl.info,  Node: sendmail script emacs misc,  Prev: sendmail script emacs insp,  Up: sendmail script emacs

A.6.5.4 Miscellaneous functions
...............................

 -- Function: sendmail-mbfl-activate
     Set 'message-send-mail-function' so that functions from
     'message.el' send mail using 'send-mail-with-mbfl'.

 -- Function: sendmail-mbfl-normalise-message
     Normalise the email message in the current buffer so that it is
     ready to be posted or delivered.  Scan the headers for invalid
     lines and try to fix them.  Scan the message for mandatory headers
     and, if missing, add them; this may require querying the user for
     informations.

     It is to be called *before* acquiring sender and receiver addresses
     from the headers.  It is an interactive function: it can be
     explicitly applied to a buffer by the user any number of times.

     This function does *not* remove the headers/body separator.

 -- Function: sendmail-mbfl-prepare-message-for-mta
     Prepare the email message in the current buffer to be sent to a
     Mail Transport Agent.  Headers like 'Fcc' and 'Bcc' are removed;
     the headers/body separator line is removed.  It is to be called
     *after* acquiring sender and receiver addresses from the headers.

 -- Function: sendmail-mbfl-copy-message-buffer DST-BUFFER SRC-BUFFER
     Copy an email message from SRC-BUFFER to DST-BUFFER.  Set encoding
     and text representation properties of the destination buffer to be
     equal to the ones of the source buffer.


File: mbfl.info,  Node: Package License,  Next: Documentation License,  Prev: sendmail,  Up: Top

Appendix B GNU LESSER GENERAL PUBLIC LICENSE
********************************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

   This version of the GNU Lesser General Public License incorporates
the terms and conditions of version 3 of the GNU General Public License,
supplemented by the additional permissions listed below.

  0. Additional Definitions.

     As used herein, "this License" refers to version 3 of the GNU
     Lesser General Public License, and the "GNU GPL" refers to version
     3 of the GNU General Public License.

     "The Library" refers to a covered work governed by this License,
     other than an Application or a Combined Work as defined below.

     An "Application" is any work that makes use of an interface
     provided by the Library, but which is not otherwise based on the
     Library.  Defining a subclass of a class defined by the Library is
     deemed a mode of using an interface provided by the Library.

     A "Combined Work" is a work produced by combining or linking an
     Application with the Library.  The particular version of the
     Library with which the Combined Work was made is also called the
     "Linked Version".

     The "Minimal Corresponding Source" for a Combined Work means the
     Corresponding Source for the Combined Work, excluding any source
     code for portions of the Combined Work that, considered in
     isolation, are based on the Application, and not on the Linked
     Version.

     The "Corresponding Application Code" for a Combined Work means the
     object code and/or source code for the Application, including any
     data and utility programs needed for reproducing the Combined Work
     from the Application, but excluding the System Libraries of the
     Combined Work.

  1. Exception to Section 3 of the GNU GPL.

     You may convey a covered work under sections 3 and 4 of this
     License without being bound by section 3 of the GNU GPL.

  2. Conveying Modified Versions.

     If you modify a copy of the Library, and, in your modifications, a
     facility refers to a function or data to be supplied by an
     Application that uses the facility (other than as an argument
     passed when the facility is invoked), then you may convey a copy of
     the modified version:

       a. under this License, provided that you make a good faith effort
          to ensure that, in the event an Application does not supply
          the function or data, the facility still operates, and
          performs whatever part of its purpose remains meaningful, or

       b. under the GNU GPL, with none of the additional permissions of
          this License applicable to that copy.

  3. Object Code Incorporating Material from Library Header Files.

     The object code form of an Application may incorporate material
     from a header file that is part of the Library.  You may convey
     such object code under terms of your choice, provided that, if the
     incorporated material is not limited to numerical parameters, data
     structure layouts and accessors, or small macros, inline functions
     and templates (ten or fewer lines in length), you do both of the
     following:

       a. Give prominent notice with each copy of the object code that
          the Library is used in it and that the Library and its use are
          covered by this License.
       b. Accompany the object code with a copy of the GNU GPL and this
          license document.

  4. Combined Works.

     You may convey a Combined Work under terms of your choice that,
     taken together, effectively do not restrict modification of the
     portions of the Library contained in the Combined Work and reverse
     engineering for debugging such modifications, if you also do each
     of the following:

       a. Give prominent notice with each copy of the Combined Work that
          the Library is used in it and that the Library and its use are
          covered by this License.
       b. Accompany the Combined Work with a copy of the GNU GPL and
          this license document.
       c. For a Combined Work that displays copyright notices during
          execution, include the copyright notice for the Library among
          these notices, as well as a reference directing the user to
          the copies of the GNU GPL and this license document.
       d. Do one of the following:

            0. Convey the Minimal Corresponding Source under the terms
               of this License, and the Corresponding Application Code
               in a form suitable for, and under terms that permit, the
               user to recombine or relink the Application with a
               modified version of the Linked Version to produce a
               modified Combined Work, in the manner specified by
               section 6 of the GNU GPL for conveying Corresponding
               Source.
            1. Use a suitable shared library mechanism for linking with
               the Library.  A suitable mechanism is one that (a) uses
               at run time a copy of the Library already present on the
               user's computer system, and (b) will operate properly
               with a modified version of the Library that is
               interface-compatible with the Linked Version.

       e. Provide Installation Information, but only if you would
          otherwise be required to provide such information under
          section 6 of the GNU GPL, and only to the extent that such
          information is necessary to install and execute a modified
          version of the Combined Work produced by recombining or
          relinking the Application with a modified version of the
          Linked Version.  (If you use option 4d0, the Installation
          Information must accompany the Minimal Corresponding Source
          and Corresponding Application Code.  If you use option 4d1,
          you must provide the Installation Information in the manner
          specified by section 6 of the GNU GPL for conveying
          Corresponding Source.)

  5. Combined Libraries.

     You may place library facilities that are a work based on the
     Library side by side in a single library together with other
     library facilities that are not Applications and are not covered by
     this License, and convey such a combined library under terms of
     your choice, if you do both of the following:

       a. Accompany the combined library with a copy of the same work
          based on the Library, uncombined with any other library
          facilities, conveyed under the terms of this License.
       b. Give prominent notice with the combined library that part of
          it is a work based on the Library, and explaining where to
          find the accompanying uncombined form of the same work.

  6. Revised Versions of the GNU Lesser General Public License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU Lesser General Public License from time to
     time.  Such new versions will be similar in spirit to the present
     version, but may differ in detail to address new problems or
     concerns.

     Each version is given a distinguishing version number.  If the
     Library as you received it specifies that a certain numbered
     version of the GNU Lesser General Public License "or any later
     version" applies to it, you have the option of following the terms
     and conditions either of that published version or of any later
     version published by the Free Software Foundation.  If the Library
     as you received it does not specify a version number of the GNU
     Lesser General Public License, you may choose any version of the
     GNU Lesser General Public License ever published by the Free
     Software Foundation.

     If the Library as you received it specifies that a proxy can decide
     whether future versions of the GNU Lesser General Public License
     shall apply, that proxy's public statement of acceptance of any
     version is permanent authorization for you to choose that version
     for the Library.


File: mbfl.info,  Node: Documentation License,  Next: references,  Prev: Package License,  Up: Top

Appendix C GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts."  line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: mbfl.info,  Node: references,  Next: concept index,  Prev: Documentation License,  Up: Top

Appendix D Bibliography and references
**************************************

*Note bash: (GNU Bash)Top.

   The documentation of MBFL is available online:

             <https://marcomaggi.github.io/docs/mbfl.html>

the latest release of this package can be downloaded from:

           <https://bitbucket.org/marcomaggi/mbfl/downloads>

development takes place at:

                 <https://github.com/marcomaggi/mbfl>

and as backup at:

                <https://bitbucket.org/marcomaggi/mbfl>

   Lots of interesting stuff at the following site:

                  <http://www.bash-hackers.org/wiki/>


File: mbfl.info,  Node: concept index,  Next: function index,  Prev: references,  Up: Top

Appendix E An entry for each concept
************************************

 [index ]
* Menu:

* --brief-help, predefined option:       getopts options.     (line 116)
* --brief-usage, predefined option:      getopts options.     (line 116)
* --debug, predefined option:            getopts options.     (line  45)
* --encoded-args, predefined option:     getopts options.     (line  16)
* --force, predefined option:            getopts options.     (line  60)
* --help, predefined option:             getopts options.     (line 105)
* --interactive, predefined option:      getopts options.     (line  66)
* --license, predefined option:          getopts options.     (line  97)
* --list-exit-codes, predefined option:  getopts options.     (line  76)
* --null, predefined option:             getopts options.     (line  54)
* --print-exit-code, predefined option:  getopts options.     (line  80)
* --print-exit-code-names, predefined option: getopts options.
                                                              (line  83)
* --print-options, predefined option:    getopts options.     (line 125)
* --show-program, predefined option:     getopts options.     (line  42)
* --show-programs, predefined option:    getopts options.     (line  42)
* --silent, predefined option:           getopts options.     (line  31)
* --test, predefined option:             getopts options.     (line  50)
* --tmpdir, predefined option:           getopts options.     (line  10)
* --usage, predefined option:            getopts options.     (line 105)
* --validate-programs, predefined option: getopts options.    (line  71)
* --verbose, predefined option:          getopts options.     (line  26)
* --verbose-program, predefined option:  getopts options.     (line  35)
* --version, predefined option:          getopts options.     (line  86)
* --version-only, predefined option:     getopts options.     (line  92)
* -f, predefined option:                 getopts options.     (line  60)
* -h, predefined option:                 getopts options.     (line 105)
* -H, predefined option:                 getopts options.     (line 116)
* -i, predefined option:                 getopts options.     (line  66)
* -v, predefined option:                 getopts options.     (line  26)
* Archives, tar:                         file commands tar.   (line   6)
* bzip2, command:                        file commands compress.
                                                              (line   6)
* Changing directory:                    file misc.           (line   6)
* chgrp, command:                        file commands owner. (line   6)
* chmod, command:                        file commands listing.
                                                              (line   6)
* chmod, command <1>:                    file commands perms. (line   6)
* chown, command:                        file commands listing.
                                                              (line   6)
* chown, command <1>:                    file commands owner. (line   6)
* Command bzip2:                         file commands compress.
                                                              (line   6)
* Command chgrp:                         file commands owner. (line   6)
* Command chmod:                         file commands listing.
                                                              (line   6)
* Command chmod <1>:                     file commands perms. (line   6)
* Command chown:                         file commands listing.
                                                              (line   6)
* Command chown <1>:                     file commands owner. (line   6)
* Command cp:                            file commands copy.  (line   6)
* Command gzip:                          file commands compress.
                                                              (line   6)
* Command line options, parsing:         getopts.             (line   6)
* Command ln:                            file commands symlink.
                                                              (line   6)
* Command ls:                            file commands listing.
                                                              (line   6)
* Command mkdir:                         file commands mkdir. (line   6)
* Command mv:                            file commands move.  (line   6)
* Command readlink:                      file commands listing.
                                                              (line   6)
* Command realpath:                      file commands realpath.
                                                              (line   6)
* Command rm:                            file commands removing.
                                                              (line   6)
* Command rmdir:                         file commands removing.
                                                              (line   6)
* Command tar:                           file commands tar.   (line   6)
* Compressing files:                     file commands compress.
                                                              (line   6)
* Copying files:                         file commands copy.  (line   6)
* cp, command:                           file commands copy.  (line   6)
* Creating directories:                  file commands mkdir. (line   6)
* Creating symbolic links:               file commands symlink.
                                                              (line   6)
* Creating tar archives:                 file commands tar.   (line   6)
* Directories, creating:                 file commands mkdir. (line   6)
* Directory, changing:                   file misc.           (line   6)
* Executing command bzip2:               file commands compress.
                                                              (line   6)
* Executing command chgrp:               file commands owner. (line   6)
* Executing command chmod:               file commands listing.
                                                              (line   6)
* Executing command chmod <1>:           file commands perms. (line   6)
* Executing command chown:               file commands listing.
                                                              (line   6)
* Executing command chown <1>:           file commands owner. (line   6)
* Executing command cp:                  file commands copy.  (line   6)
* Executing command gzip:                file commands compress.
                                                              (line   6)
* Executing command ln:                  file commands symlink.
                                                              (line   6)
* Executing command ls:                  file commands listing.
                                                              (line   6)
* Executing command mkdir:               file commands mkdir. (line   6)
* Executing command mv:                  file commands move.  (line   6)
* Executing command readlink:            file commands listing.
                                                              (line   6)
* Executing command realpath:            file commands realpath.
                                                              (line   6)
* Executing command rm:                  file commands removing.
                                                              (line   6)
* Executing command rmdir:               file commands removing.
                                                              (line   6)
* Executing command tar:                 file commands tar.   (line   6)
* Existence of files:                    file testing.        (line   6)
* FDL, GNU Free Documentation License:   Documentation License.
                                                              (line   6)
* Files, changing directory:             file misc.           (line   6)
* Files, compression:                    file commands compress.
                                                              (line   6)
* Files, copying:                        file commands copy.  (line   6)
* Files, existence and permissions:      file testing.        (line   6)
* Files, group:                          file commands listing.
                                                              (line   6)
* Files, listing:                        file commands listing.
                                                              (line   6)
* Files, moving:                         file commands move.  (line   6)
* Files, normalisation:                  file commands realpath.
                                                              (line   6)
* Files, owner:                          file commands listing.
                                                              (line   6)
* Files, owner and group:                file commands owner. (line   6)
* Files, permissions:                    file commands perms. (line   6)
* Files, reading and writing:            file read and write. (line   6)
* Files, removing:                       file commands removing.
                                                              (line   6)
* Files, size:                           file commands listing.
                                                              (line   6)
* Files, symbolic links:                 file commands symlink.
                                                              (line   6)
* Getting file permissions:              file commands perms. (line   6)
* Getting group of files:                file commands listing.
                                                              (line   6)
* Getting owner of files:                file commands listing.
                                                              (line   6)
* Getting size of files:                 file commands listing.
                                                              (line   6)
* Group of files:                        file commands listing.
                                                              (line   6)
* Group of of files:                     file commands owner. (line   6)
* gzip, command:                         file commands compress.
                                                              (line   6)
* LGPL, Lesser General Public License:   Package License.     (line   6)
* Listing files:                         file commands listing.
                                                              (line   6)
* ln, command:                           file commands symlink.
                                                              (line   6)
* ls, command:                           file commands listing.
                                                              (line   6)
* mkdir, command:                        file commands mkdir. (line   6)
* Moving files:                          file commands move.  (line   6)
* mv, command:                           file commands move.  (line   6)
* Owner of files:                        file commands listing.
                                                              (line   6)
* Owner of of files:                     file commands owner. (line   6)
* Parsing command line options:          getopts.             (line   6)
* Permissions of files:                  file commands perms. (line   6)
* Predefined option --brief-help:        getopts options.     (line 116)
* Predefined option --brief-usage:       getopts options.     (line 116)
* Predefined option --debug:             getopts options.     (line  45)
* Predefined option --encoded-args:      getopts options.     (line  16)
* Predefined option --force:             getopts options.     (line  60)
* Predefined option --help:              getopts options.     (line 105)
* Predefined option --interactive:       getopts options.     (line  66)
* Predefined option --license:           getopts options.     (line  97)
* Predefined option --list-exit-codes:   getopts options.     (line  76)
* Predefined option --null:              getopts options.     (line  54)
* Predefined option --print-exit-code:   getopts options.     (line  80)
* Predefined option --print-exit-code-names: getopts options. (line  83)
* Predefined option --print-options:     getopts options.     (line 125)
* Predefined option --show-program:      getopts options.     (line  42)
* Predefined option --show-programs:     getopts options.     (line  42)
* Predefined option --silent:            getopts options.     (line  31)
* Predefined option --test:              getopts options.     (line  50)
* Predefined option --tmpdir:            getopts options.     (line  10)
* Predefined option --usage:             getopts options.     (line 105)
* Predefined option --validate-programs: getopts options.     (line  71)
* Predefined option --verbose:           getopts options.     (line  26)
* Predefined option --verbose-program:   getopts options.     (line  35)
* Predefined option --version:           getopts options.     (line  86)
* Predefined option --version-only:      getopts options.     (line  92)
* Predefined option -f:                  getopts options.     (line  60)
* Predefined option -h:                  getopts options.     (line 105)
* Predefined option -H:                  getopts options.     (line 116)
* Predefined option -i:                  getopts options.     (line  66)
* Predefined option -v:                  getopts options.     (line  26)
* Program command line options, parsing: getopts.             (line   6)
* Reading and writing files:             file read and write. (line   6)
* readlink, command:                     file commands listing.
                                                              (line   6)
* realpath, command:                     file commands realpath.
                                                              (line   6)
* Removing files:                        file commands removing.
                                                              (line   6)
* rm, command:                           file commands removing.
                                                              (line   6)
* rmdir, command:                        file commands removing.
                                                              (line   6)
* Size of files:                         file commands listing.
                                                              (line   6)
* Symbolic links:                        file commands symlink.
                                                              (line   6)
* tar archives:                          file commands tar.   (line   6)
* tar, command:                          file commands tar.   (line   6)
* Writing and reading files:             file read and write. (line   6)


File: mbfl.info,  Node: function index,  Next: variable index,  Prev: concept index,  Up: Top

Appendix F An entry for each function.
**************************************

 [index ]
* Menu:

* __MBFL_LIBRARY__:                      preprocessor defines.
                                                              (line  17)
* __PACKAGE_DATADIR__:                   preprocessor defines.
                                                              (line  11)
* __PACKAGE_VERSION__:                   preprocessor defines.
                                                              (line   8)
* connector:                             sendmail connector.  (line  88)
* dotest:                                testing running.     (line  11)
* dotest-assert-file-exists:             testing files files. (line  34)
* dotest-assert-file-unexists:           testing files files. (line  39)
* dotest-cd:                             testing files directories.
                                                              (line   6)
* dotest-cd-tmpdir:                      testing files directories.
                                                              (line  28)
* dotest-clean-files:                    testing files files. (line  12)
* dotest-debug:                          testing messages.    (line   7)
* dotest-echo:                           testing messages.    (line   6)
* dotest-echo-tmpdir:                    testing files directories.
                                                              (line  23)
* dotest-equal:                          testing compare.     (line   6)
* dotest-final-report:                   testing running.     (line   6)
* dotest-mkdir:                          testing files directories.
                                                              (line  10)
* dotest-mkdir <1>:                      testing files directories.
                                                              (line  11)
* dotest-mkfile:                         testing files files. (line   6)
* dotest-mkfile <1>:                     testing files files. (line   7)
* dotest-mkpathname:                     testing files files. (line  22)
* dotest-mkpathname <1>:                 testing files files. (line  23)
* dotest-mktmpdir:                       testing files directories.
                                                              (line  31)
* dotest-option-debug:                   testing config.      (line  31)
* dotest-option-report-start:            testing config.      (line  38)
* dotest-option-report-success:          testing config.      (line  47)
* dotest-option-test:                    testing config.      (line  22)
* dotest-option-verbose:                 testing config.      (line  12)
* dotest-output:                         testing output.      (line   6)
* dotest-output <1>:                     testing output.      (line   7)
* dotest-printf:                         testing messages.    (line  11)
* dotest-set-debug:                      testing config.      (line  25)
* dotest-set-report-start:               testing config.      (line  34)
* dotest-set-report-success:             testing config.      (line  42)
* dotest-set-test:                       testing config.      (line  15)
* dotest-set-verbose:                    testing config.      (line   6)
* dotest-unset-debug:                    testing config.      (line  26)
* dotest-unset-report-start:             testing config.      (line  35)
* dotest-unset-report-success:           testing config.      (line  43)
* dotest-unset-test:                     testing config.      (line  16)
* dotest-unset-verbose:                  testing config.      (line   7)
* exit_because_error_loading_library:    main exit.           (line  69)
* exit_because_failure:                  main exit.           (line  61)
* exit_because_invalid_action_argument:  actions misc.        (line  23)
* exit_because_invalid_action_declaration: actions misc.      (line  15)
* exit_because_invalid_action_set:       actions misc.        (line  19)
* exit_because_invalid_function_name:    main misc.           (line  21)
* exit_because_invalid_option_argument:  getopts interface.   (line 192)
* exit_because_invalid_option_declaration: getopts interface. (line 188)
* exit_because_invalid_sudo_username:    program executing.   (line 137)
* exit_because_missing_action_function:  actions misc.        (line  27)
* exit_because_program_not_found:        program declaring.   (line  95)
* exit_because_success:                  main exit.           (line  53)
* exit_because_wrong_num_args:           getopts interface.   (line 166)
* exit_failure:                          main exit.           (line  62)
* exit_success:                          main exit.           (line  54)
* main:                                  sendmail plain.      (line  10)
* mbfl_actions_dispatch:                 actions dispatch.    (line   6)
* mbfl_actions_fake_action_set:          actions misc.        (line   6)
* mbfl_actions_print_usage_screen:       actions misc.        (line  11)
* mbfl_actions_set_exists:               actions inspect.     (line   6)
* mbfl_actions_set_exists_or_none:       actions inspect.     (line  10)
* mbfl_argv_all_files:                   getopts interface.   (line 179)
* mbfl_argv_from_stdin:                  getopts interface.   (line 170)
* mbfl_array_is_empty:                   arrays.              (line   6)
* mbfl_array_is_not_empty:               arrays.              (line  14)
* mbfl_array_length:                     arrays.              (line  22)
* mbfl_array_length_var:                 arrays.              (line  23)
* mbfl_atexit_clear:                     atexit.              (line  36)
* mbfl_atexit_disable:                   atexit.              (line  15)
* mbfl_atexit_enable:                    atexit.              (line  14)
* mbfl_atexit_forget:                    atexit.              (line  27)
* mbfl_atexit_register:                  atexit.              (line  20)
* mbfl_atexit_register <1>:              atexit.              (line  21)
* mbfl_atexit_run:                       atexit.              (line  31)
* mbfl_at_drop:                          interfaces at.       (line  63)
* mbfl_at_enable:                        interfaces at.       (line  20)
* mbfl_at_print_queue:                   interfaces at.       (line  82)
* mbfl_at_queue_clean:                   interfaces at.       (line  67)
* mbfl_at_queue_print_identifiers:       interfaces at.       (line  73)
* mbfl_at_queue_print_jobs:              interfaces at.       (line  76)
* mbfl_at_queue_print_queues:            interfaces at.       (line  79)
* mbfl_at_schedule:                      interfaces at.       (line  45)
* mbfl_at_select_queue:                  interfaces at.       (line  41)
* mbfl_at_validate_queue_letter:         interfaces at.       (line  29)
* mbfl_at_validate_selected_queue:       interfaces at.       (line  33)
* mbfl_cd:                               file misc.           (line  10)
* mbfl_change_directory:                 file misc.           (line   6)
* mbfl_command_line_argument:            preprocessor arguments.
                                                              (line   6)
* mbfl_datavar:                          preprocessor nameref access.
                                                              (line  15)
* mbfl_date_current_date:                times current.       (line  24)
* mbfl_date_current_day:                 times current.       (line  12)
* mbfl_date_current_hour:                times current.       (line  15)
* mbfl_date_current_minute:              times current.       (line  18)
* mbfl_date_current_month:               times current.       (line   9)
* mbfl_date_current_second:              times current.       (line  21)
* mbfl_date_current_time:                times current.       (line  30)
* mbfl_date_current_year:                times current.       (line   6)
* mbfl_date_email_timestamp:             times special.       (line   6)
* mbfl_date_iso_timestamp:               times special.       (line  13)
* mbfl_declare_action:                   actions declare.     (line  15)
* mbfl_declare_action_set:               actions declare.     (line  10)
* mbfl_declare_option:                   getopts interface.   (line   9)
* mbfl_declare_program:                  program declaring.   (line  31)
* mbfl_decode_hex:                       encoding.            (line  26)
* mbfl_decode_hex_var:                   encoding.            (line  27)
* mbfl_decode_oct:                       encoding.            (line  33)
* mbfl_decode_oct_var:                   encoding.            (line  34)
* mbfl_dialog_ask_password:              dialog.              (line  21)
* mbfl_dialog_ask_password_var:          dialog.              (line  22)
* mbfl_dialog_enable_programs:           dialog.              (line  16)
* mbfl_dialog_yes_or_no:                 dialog.              (line   6)
* mbfl_dialog_yes_or_no <1>:             dialog.              (line   7)
* mbfl_embed_library:                    preprocessor library.
                                                              (line   9)
* mbfl_encode_hex:                       encoding.            (line  19)
* mbfl_encode_hex_var:                   encoding.            (line  20)
* mbfl_exec_chgrp:                       file commands owner. (line  46)
* mbfl_exec_chown:                       file commands owner. (line  41)
* mbfl_exec_date:                        times raw.           (line   6)
* mbfl_exec_date_format:                 times raw.           (line  10)
* mbfl_exec_ln:                          file commands symlink.
                                                              (line  15)
* mbfl_exec_readlink:                    file commands listing.
                                                              (line  32)
* mbfl_exec_tar:                         file commands tar.   (line  15)
* mbfl_exit:                             main exit.           (line  12)
* mbfl_fd_close:                         fd close.            (line   6)
* mbfl_fd_dup_input:                     fd dup.              (line   6)
* mbfl_fd_dup_output:                    fd dup.              (line   7)
* mbfl_fd_move:                          fd move.             (line   6)
* mbfl_fd_open_input:                    fd open.             (line   6)
* mbfl_fd_open_input_output:             fd open.             (line  17)
* mbfl_fd_open_output:                   fd open.             (line  13)
* mbfl_file_append:                      file read and write. (line  28)
* mbfl_file_compress:                    file commands compress.
                                                              (line  57)
* mbfl_file_compress_keep:               file commands compress.
                                                              (line  39)
* mbfl_file_compress_nokeep:             file commands compress.
                                                              (line  40)
* mbfl_file_compress_select_bzip:        file commands compress.
                                                              (line  33)
* mbfl_file_compress_select_bzip2:       file commands compress.
                                                              (line  34)
* mbfl_file_compress_select_gzip:        file commands compress.
                                                              (line  32)
* mbfl_file_compress_select_lzip:        file commands compress.
                                                              (line  35)
* mbfl_file_compress_select_nostdout:    file commands compress.
                                                              (line  45)
* mbfl_file_compress_select_stdout:      file commands compress.
                                                              (line  44)
* mbfl_file_compress_select_xz:          file commands compress.
                                                              (line  36)
* mbfl_file_copy:                        file commands copy.  (line  15)
* mbfl_file_copy_to_directory:           file commands copy.  (line  23)
* mbfl_file_decompress:                  file commands compress.
                                                              (line  61)
* mbfl_file_directory_is_executable:     file testing.        (line  53)
* mbfl_file_directory_is_executable <1>: file testing.        (line  54)
* mbfl_file_directory_is_readable:       file testing.        (line  43)
* mbfl_file_directory_is_readable <1>:   file testing.        (line  44)
* mbfl_file_directory_is_writable:       file testing.        (line  48)
* mbfl_file_directory_is_writable <1>:   file testing.        (line  49)
* mbfl_file_directory_validate_writability: file testing.     (line  58)
* mbfl_file_dirname:                     file names parts.    (line  29)
* mbfl_file_dirname_var:                 file names parts.    (line  30)
* mbfl_file_enable_compress:             file commands compress.
                                                              (line  20)
* mbfl_file_enable_copy:                 file commands copy.  (line   9)
* mbfl_file_enable_listing:              file commands listing.
                                                              (line   6)
* mbfl_file_enable_make_directory:       file commands mkdir. (line   6)
* mbfl_file_enable_move:                 file commands move.  (line   6)
* mbfl_file_enable_owner_and_group:      file commands owner. (line   6)
* mbfl_file_enable_permissions:          file commands perms. (line   6)
* mbfl_file_enable_realpath:             file commands realpath.
                                                              (line   6)
* mbfl_file_enable_remove:               file commands removing.
                                                              (line  15)
* mbfl_file_enable_stat:                 file commands stat.  (line  10)
* mbfl_file_enable_symlink:              file commands symlink.
                                                              (line   6)
* mbfl_file_enable_tar:                  file commands tar.   (line  11)
* mbfl_file_exists:                      file testing.        (line  13)
* mbfl_file_extension:                   file names parts.    (line   6)
* mbfl_file_extension_var:               file names parts.    (line   7)
* mbfl_file_find_tmpdir:                 file names system.   (line   6)
* mbfl_file_find_tmpdir <1>:             file names system.   (line   7)
* mbfl_file_find_tmpdir_var:             file names system.   (line   8)
* mbfl_file_find_tmpdir_var <1>:         file names system.   (line   9)
* mbfl_file_get_group:                   file commands owner. (line  34)
* mbfl_file_get_group_var:               file commands owner. (line  35)
* mbfl_file_get_owner:                   file commands owner. (line  27)
* mbfl_file_get_owner_var:               file commands owner. (line  28)
* mbfl_file_get_permissions:             file commands perms. (line  13)
* mbfl_file_get_permissions_var:         file commands perms. (line  14)
* mbfl_file_get_size:                    file commands stat.  (line  31)
* mbfl_file_get_size_var:                file commands stat.  (line  32)
* mbfl_file_is_absolute:                 file names path.     (line  31)
* mbfl_file_is_absolute_dirname:         file names path.     (line  35)
* mbfl_file_is_absolute_filename:        file names path.     (line  40)
* mbfl_file_is_directory:                file testing.        (line  38)
* mbfl_file_is_directory <1>:            file testing.        (line  39)
* mbfl_file_is_executable:               file testing.        (line  30)
* mbfl_file_is_executable <1>:           file testing.        (line  31)
* mbfl_file_is_file:                     file testing.        (line  16)
* mbfl_file_is_file <1>:                 file testing.        (line  17)
* mbfl_file_is_readable:                 file testing.        (line  20)
* mbfl_file_is_readable <1>:             file testing.        (line  21)
* mbfl_file_is_relative:                 file names path.     (line  45)
* mbfl_file_is_relative_dirname:         file names path.     (line  49)
* mbfl_file_is_relative_filename:        file names path.     (line  54)
* mbfl_file_is_symlink:                  file testing.        (line  68)
* mbfl_file_is_symlink <1>:              file testing.        (line  69)
* mbfl_file_is_writable:                 file testing.        (line  25)
* mbfl_file_is_writable <1>:             file testing.        (line  26)
* mbfl_file_listing:                     file commands listing.
                                                              (line  13)
* mbfl_file_long_listing:                file commands listing.
                                                              (line  16)
* mbfl_file_make_directory:              file commands mkdir. (line  12)
* mbfl_file_make_directory <1>:          file commands mkdir. (line  13)
* mbfl_file_make_if_not_directory:       file commands mkdir. (line  21)
* mbfl_file_make_if_not_directory <1>:   file commands mkdir. (line  22)
* mbfl_file_move:                        file commands move.  (line  12)
* mbfl_file_move_to_directory:           file commands move.  (line  20)
* mbfl_file_normalise:                   file names parts.    (line 177)
* mbfl_file_normalise <1>:               file names parts.    (line 178)
* mbfl_file_normalise_link:              file commands listing.
                                                              (line  19)
* mbfl_file_normalise_var:               file names parts.    (line 179)
* mbfl_file_normalise_var <1>:           file names parts.    (line 180)
* mbfl_file_pathname_is_executable:      file testing.        (line  84)
* mbfl_file_pathname_is_executable <1>:  file testing.        (line  85)
* mbfl_file_pathname_is_readable:        file testing.        (line  76)
* mbfl_file_pathname_is_readable <1>:    file testing.        (line  77)
* mbfl_file_pathname_is_writable:        file testing.        (line  80)
* mbfl_file_pathname_is_writable <1>:    file testing.        (line  81)
* mbfl_file_read:                        file read and write. (line  31)
* mbfl_file_read_link:                   file commands listing.
                                                              (line  28)
* mbfl_file_realpath:                    file commands realpath.
                                                              (line  12)
* mbfl_file_realpath_var:                file commands realpath.
                                                              (line  13)
* mbfl_file_remove:                      file commands removing.
                                                              (line  21)
* mbfl_file_remove_directory:            file commands removing.
                                                              (line  39)
* mbfl_file_remove_directory_silently:   file commands removing.
                                                              (line  43)
* mbfl_file_remove_file:                 file commands removing.
                                                              (line  26)
* mbfl_file_remove_file_or_symlink:      file commands removing.
                                                              (line  35)
* mbfl_file_remove_symlink:              file commands removing.
                                                              (line  30)
* mbfl_file_rootname:                    file names parts.    (line  63)
* mbfl_file_rootname_var:                file names parts.    (line  64)
* mbfl_file_set_group:                   file commands owner. (line  22)
* mbfl_file_set_owner:                   file commands owner. (line  17)
* mbfl_file_set_permissions:             file commands perms. (line  30)
* mbfl_file_split:                       file names parts.    (line 112)
* mbfl_file_stat:                        file commands stat.  (line  13)
* mbfl_file_stat_var:                    file commands stat.  (line  14)
* mbfl_file_strip_leading_slash:         file names parts.    (line 155)
* mbfl_file_strip_leading_slash_var:     file names parts.    (line 156)
* mbfl_file_strip_trailing_slash:        file names parts.    (line 129)
* mbfl_file_strip_trailing_slash_var:    file names parts.    (line 130)
* mbfl_file_subpathname:                 file names path.     (line   6)
* mbfl_file_subpathname_var:             file names path.     (line   7)
* mbfl_file_symlink:                     file commands symlink.
                                                              (line  12)
* mbfl_file_tail:                        file names parts.    (line  94)
* mbfl_file_tail_var:                    file names parts.    (line  95)
* mbfl_file_write:                       file read and write. (line  24)
* mbfl_getopts_isbrief:                  getopts interface.   (line 106)
* mbfl_getopts_isbrief <1>:              getopts interface.   (line 107)
* mbfl_getopts_isbrief_with:             getopts interface.   (line 125)
* mbfl_getopts_isbrief_with <1>:         getopts interface.   (line 126)
* mbfl_getopts_islong:                   getopts interface.   (line  52)
* mbfl_getopts_islong <1>:               getopts interface.   (line  53)
* mbfl_getopts_islong_with:              getopts interface.   (line  72)
* mbfl_getopts_islong_with <1>:          getopts interface.   (line  73)
* mbfl_getopts_parse:                    getopts interface.   (line  41)
* mbfl_getopts_print_long_switches:      getopts interface.   (line 184)
* mbfl_global_assoc_array_varref:        preprocessor nameref special.
                                                              (line  24)
* mbfl_global_index_array_varref:        preprocessor nameref special.
                                                              (line  18)
* mbfl_global_varref:                    preprocessor nameref full.
                                                              (line  31)
* mbfl_invoke_existent_script_function:  main misc.           (line  16)
* mbfl_invoke_script_function:           main misc.           (line   6)
* mbfl_library_loader:                   preprocessor library.
                                                              (line  15)
* mbfl_local_assoc_array_varref:         preprocessor nameref special.
                                                              (line  12)
* mbfl_local_index_array_varref:         preprocessor nameref special.
                                                              (line   6)
* mbfl_local_nameref:                    preprocessor nameref partial.
                                                              (line   6)
* mbfl_local_varref:                     preprocessor nameref full.
                                                              (line  10)
* mbfl_location_disable_cleanup_atexit:  locations.           (line  36)
* mbfl_location_enable_cleanup_atexit:   locations.           (line  35)
* mbfl_location_enter:                   locations.           (line  20)
* mbfl_location_handler:                 locations.           (line  27)
* mbfl_location_leave:                   locations.           (line  23)
* mbfl_location_run_all:                 locations.           (line  31)
* mbfl_main:                             main function.       (line   6)
* mbfl_main_create_exit_functions:       main exit.           (line  27)
* mbfl_main_declare_exit_code:           main exit.           (line  24)
* mbfl_main_is_exiting:                  main exit.           (line  20)
* mbfl_main_print_exit_code:             main exit.           (line  75)
* mbfl_main_print_usage_screen_brief:    main misc.           (line  29)
* mbfl_main_print_usage_screen_long:     main misc.           (line  25)
* mbfl_main_set_after_parsing_options:   main function.       (line  60)
* mbfl_main_set_before_parsing_options:  main function.       (line  53)
* mbfl_main_set_main:                    main function.       (line  45)
* mbfl_mandatory_integer_parameter:      preprocessor parameters.
                                                              (line  59)
* mbfl_mandatory_nameref_parameter:      preprocessor parameters.
                                                              (line  41)
* mbfl_mandatory_parameter:              preprocessor parameters.
                                                              (line   6)
* mbfl_message_debug:                    message plain.       (line  42)
* mbfl_message_debug_printf:             message format.      (line  31)
* mbfl_message_error:                    message plain.       (line  29)
* mbfl_message_error_printf:             message format.      (line  15)
* mbfl_message_set_channel:              message config.      (line  10)
* mbfl_message_set_progname:             message config.      (line   6)
* mbfl_message_string:                   message plain.       (line   6)
* mbfl_message_verbose:                  message plain.       (line  12)
* mbfl_message_verbose_end:              message plain.       (line  20)
* mbfl_message_verbose_printf:           message format.      (line   6)
* mbfl_message_warning:                  message plain.       (line  35)
* mbfl_message_warning_printf:           message format.      (line  23)
* mbfl_namevar:                          preprocessor nameref access.
                                                              (line   6)
* mbfl_optional_integer_parameter:       preprocessor parameters.
                                                              (line  93)
* mbfl_optional_integer_parameter <1>:   preprocessor parameters.
                                                              (line  94)
* mbfl_optional_parameter:               preprocessor parameters.
                                                              (line  65)
* mbfl_optional_parameter <1>:           preprocessor parameters.
                                                              (line  66)
* mbfl_option_debug:                     getopts options.     (line 172)
* mbfl_option_encoded_args:              getopts options.     (line 132)
* mbfl_option_interactive:               getopts options.     (line 182)
* mbfl_option_null:                      getopts options.     (line 177)
* mbfl_option_show_program:              getopts options.     (line 160)
* mbfl_option_test:                      getopts options.     (line 167)
* mbfl_option_test <1>:                  program testing.     (line  31)
* mbfl_option_test_restore:              getopts options.     (line 199)
* mbfl_option_test_save:                 getopts options.     (line 195)
* mbfl_option_verbose:                   getopts options.     (line 140)
* mbfl_option_verbose_program:           getopts options.     (line 150)
* mbfl_program_bash:                     program executing.   (line 165)
* mbfl_program_bash_command:             program executing.   (line 170)
* mbfl_program_declare_sudo_options:     program executing.   (line 153)
* mbfl_program_declare_sudo_user:        program executing.   (line 124)
* mbfl_program_enable_sudo:              program executing.   (line 118)
* mbfl_program_exec:                     program executing.   (line  60)
* mbfl_program_exec <1>:                 program executing.   (line  61)
* mbfl_program_execbg:                   program executing.   (line  79)
* mbfl_program_execbg <1>:               program executing.   (line  80)
* mbfl_program_find:                     program checking.    (line  35)
* mbfl_program_find_var:                 program checking.    (line  36)
* mbfl_program_found:                    program declaring.   (line  64)
* mbfl_program_found_var:                program declaring.   (line  65)
* mbfl_program_redirect_stderr_to_stdout: program executing.  (line 181)
* mbfl_program_replace:                  program executing.   (line 108)
* mbfl_program_replace <1>:              program executing.   (line 109)
* mbfl_program_requested_sudo:           program executing.   (line 149)
* mbfl_program_reset_sudo_options:       program executing.   (line 158)
* mbfl_program_reset_sudo_user:          program executing.   (line 141)
* mbfl_program_split_path:               program checking.    (line  13)
* mbfl_program_sudo_user:                program executing.   (line 146)
* mbfl_program_validate_declared:        program declaring.   (line  47)
* mbfl_read_maybe_null:                  base.                (line  11)
* mbfl_set_maybe:                        base.                (line   6)
* mbfl_set_option_debug:                 getopts options.     (line 173)
* mbfl_set_option_encoded_args:          getopts options.     (line 133)
* mbfl_set_option_interactive:           getopts options.     (line 183)
* mbfl_set_option_null:                  getopts options.     (line 178)
* mbfl_set_option_show_program:          getopts options.     (line 161)
* mbfl_set_option_test:                  getopts options.     (line 168)
* mbfl_set_option_test <1>:              program testing.     (line  15)
* mbfl_set_option_verbose:               getopts options.     (line 141)
* mbfl_set_option_verbose_program:       getopts options.     (line 151)
* mbfl_signal_attach:                    signal.              (line  14)
* mbfl_signal_invoke_handlers:           signal.              (line  18)
* mbfl_signal_map_signame_to_signum:     signal.              (line  10)
* mbfl_slot_ref:                         preprocessor arrays. (line   6)
* mbfl_slot_set:                         preprocessor arrays. (line  14)
* mbfl_sprintf:                          strings misc.        (line  23)
* mbfl_string_chars:                     strings splitting.   (line  14)
* mbfl_string_equal:                     strings comparison.  (line   6)
* mbfl_string_equal_substring:           strings comparison.  (line  75)
* mbfl_string_first:                     strings inspection.  (line  39)
* mbfl_string_first <1>:                 strings inspection.  (line  40)
* mbfl_string_first_var:                 strings inspection.  (line  41)
* mbfl_string_first_var <1>:             strings inspection.  (line  42)
* mbfl_string_greater:                   strings comparison.  (line  39)
* mbfl_string_greater_or_equal:          strings comparison.  (line  63)
* mbfl_string_idx:                       preprocessor strings.
                                                              (line  14)
* mbfl_string_index:                     strings inspection.  (line  21)
* mbfl_string_index_var:                 strings inspection.  (line  22)
* mbfl_string_is_alnum:                  strings class.       (line  38)
* mbfl_string_is_alnum_char:             strings class.       (line  12)
* mbfl_string_is_alpha:                  strings class.       (line  36)
* mbfl_string_is_alpha_char:             strings class.       (line   6)
* mbfl_string_is_digit:                  strings class.       (line  37)
* mbfl_string_is_digit_char:             strings class.       (line   9)
* mbfl_string_is_email_address:          strings class.       (line  62)
* mbfl_string_is_empty:                  strings inspection.  (line  15)
* mbfl_string_is_equal_unquoted_char:    strings quote.       (line  16)
* mbfl_string_is_extended_identifier:    strings class.       (line  42)
* mbfl_string_is_extended_identifier_char: strings class.     (line  33)
* mbfl_string_is_identifier:             strings class.       (line  41)
* mbfl_string_is_identifier_char:        strings class.       (line  29)
* mbfl_string_is_name:                   strings class.       (line  40)
* mbfl_string_is_name_char:              strings class.       (line  25)
* mbfl_string_is_network_hostname:       strings class.       (line  66)
* mbfl_string_is_network_ip_address:     strings class.       (line  74)
* mbfl_string_is_network_port:           strings class.       (line  70)
* mbfl_string_is_no:                     strings comparison.  (line  23)
* mbfl_string_is_noblank:                strings class.       (line  39)
* mbfl_string_is_noblank_char:           strings class.       (line  18)
* mbfl_string_is_not_empty:              strings inspection.  (line  18)
* mbfl_string_is_quoted_char:            strings quote.       (line   6)
* mbfl_string_is_username:               strings class.       (line  57)
* mbfl_string_is_yes:                    strings comparison.  (line  22)
* mbfl_string_last:                      strings inspection.  (line  69)
* mbfl_string_last <1>:                  strings inspection.  (line  70)
* mbfl_string_last_var:                  strings inspection.  (line  71)
* mbfl_string_last_var <1>:              strings inspection.  (line  72)
* mbfl_string_len:                       preprocessor strings.
                                                              (line   6)
* mbfl_string_length:                    strings inspection.  (line   6)
* mbfl_string_length_equal_to:           strings inspection.  (line  10)
* mbfl_string_less:                      strings comparison.  (line  27)
* mbfl_string_less_or_equal:             strings comparison.  (line  51)
* mbfl_string_not_equal:                 strings comparison.  (line  17)
* mbfl_string_quote:                     strings quote.       (line  27)
* mbfl_string_quote_var:                 strings quote.       (line  28)
* mbfl_string_range:                     strings inspection.  (line 100)
* mbfl_string_range <1>:                 strings inspection.  (line 101)
* mbfl_string_range_var:                 strings inspection.  (line 102)
* mbfl_string_range_var <1>:             strings inspection.  (line 103)
* mbfl_string_replace:                   strings misc.        (line   6)
* mbfl_string_replace <1>:               strings misc.        (line   7)
* mbfl_string_replace_var:               strings misc.        (line   8)
* mbfl_string_replace_var <1>:           strings misc.        (line   9)
* mbfl_string_skip:                      strings misc.        (line  32)
* mbfl_string_split:                     strings splitting.   (line  48)
* mbfl_string_split_blanks:              strings splitting.   (line  55)
* mbfl_string_strip_carriage_return_var: strings misc.        (line  62)
* mbfl_string_tolower:                   strings case.        (line  14)
* mbfl_string_tolower_var:               strings case.        (line  15)
* mbfl_string_toupper:                   strings case.        (line   6)
* mbfl_string_toupper_var:               strings case.        (line   7)
* mbfl_system_enable_programs:           system.              (line   6)
* mbfl_system_group_find_entry_by_gid:   system group searching.
                                                              (line  22)
* mbfl_system_group_find_entry_by_gid_var: system group searching.
                                                              (line  23)
* mbfl_system_group_find_entry_by_name:  system group searching.
                                                              (line  11)
* mbfl_system_group_find_entry_by_name_var: system group searching.
                                                              (line  12)
* mbfl_system_group_get_gid:             system group inspect.
                                                              (line  36)
* mbfl_system_group_get_gid_var:         system group inspect.
                                                              (line  37)
* mbfl_system_group_get_name:            system group inspect.
                                                              (line  10)
* mbfl_system_group_get_name_var:        system group inspect.
                                                              (line  11)
* mbfl_system_group_get_passwd:          system group inspect.
                                                              (line  28)
* mbfl_system_group_get_passwd_var:      system group inspect.
                                                              (line  29)
* mbfl_system_group_get_users:           system group inspect.
                                                              (line  44)
* mbfl_system_group_get_users_count:     system group inspect.
                                                              (line  52)
* mbfl_system_group_get_users_count_var: system group inspect.
                                                              (line  53)
* mbfl_system_group_get_users_var:       system group inspect.
                                                              (line  45)
* mbfl_system_group_get_user_name:       system group inspect.
                                                              (line  60)
* mbfl_system_group_get_user_name_var:   system group inspect.
                                                              (line  61)
* mbfl_system_group_gid_to_name:         system group groupid.
                                                              (line  10)
* mbfl_system_group_gid_to_name_var:     system group groupid.
                                                              (line  11)
* mbfl_system_group_name_to_gid:         system group groupid.
                                                              (line  31)
* mbfl_system_group_name_to_gid_var:     system group groupid.
                                                              (line  32)
* mbfl_system_group_print_entries:       system group printing.
                                                              (line   9)
* mbfl_system_group_print_entries_as_json: system group printing.
                                                              (line  21)
* mbfl_system_group_print_entries_as_xml: system group printing.
                                                              (line  15)
* mbfl_system_group_read:                system group reading.
                                                              (line   6)
* mbfl_system_group_reset:               system group reading.
                                                              (line  12)
* mbfl_system_numerical_group_id_to_name: system group groupid.
                                                              (line  53)
* mbfl_system_numerical_group_id_to_name <1>: system group groupid.
                                                              (line  58)
* mbfl_system_numerical_user_id_to_name: system passwd userid.
                                                              (line  53)
* mbfl_system_numerical_user_id_to_name <1>: system passwd userid.
                                                              (line  58)
* mbfl_system_octal_to_symbolic_permissions: system file perms.
                                                              (line  10)
* mbfl_system_passwd_find_entry_by_name: system passwd searching.
                                                              (line  11)
* mbfl_system_passwd_find_entry_by_name_var: system passwd searching.
                                                              (line  12)
* mbfl_system_passwd_find_entry_by_uid:  system passwd searching.
                                                              (line  22)
* mbfl_system_passwd_find_entry_by_uid_var: system passwd searching.
                                                              (line  23)
* mbfl_system_passwd_get_dir:            system passwd inspect.
                                                              (line  58)
* mbfl_system_passwd_get_dir_var:        system passwd inspect.
                                                              (line  59)
* mbfl_system_passwd_get_gecos:          system passwd inspect.
                                                              (line  50)
* mbfl_system_passwd_get_gecos_var:      system passwd inspect.
                                                              (line  51)
* mbfl_system_passwd_get_gid:            system passwd inspect.
                                                              (line  43)
* mbfl_system_passwd_get_gid_var:        system passwd inspect.
                                                              (line  44)
* mbfl_system_passwd_get_name:           system passwd inspect.
                                                              (line  10)
* mbfl_system_passwd_get_name_var:       system passwd inspect.
                                                              (line  11)
* mbfl_system_passwd_get_passwd:         system passwd inspect.
                                                              (line  28)
* mbfl_system_passwd_get_passwd_var:     system passwd inspect.
                                                              (line  29)
* mbfl_system_passwd_get_shell:          system passwd inspect.
                                                              (line  65)
* mbfl_system_passwd_get_shell_var:      system passwd inspect.
                                                              (line  66)
* mbfl_system_passwd_get_uid:            system passwd inspect.
                                                              (line  36)
* mbfl_system_passwd_get_uid_var:        system passwd inspect.
                                                              (line  37)
* mbfl_system_passwd_name_to_uid:        system passwd userid.
                                                              (line  31)
* mbfl_system_passwd_name_to_uid_var:    system passwd userid.
                                                              (line  32)
* mbfl_system_passwd_print_entries:      system passwd printing.
                                                              (line   9)
* mbfl_system_passwd_print_entries_as_json: system passwd printing.
                                                              (line  23)
* mbfl_system_passwd_print_entries_as_xml: system passwd printing.
                                                              (line  16)
* mbfl_system_passwd_read:               system passwd reading.
                                                              (line   6)
* mbfl_system_passwd_reset:              system passwd reading.
                                                              (line  12)
* mbfl_system_passwd_uid_to_name:        system passwd userid.
                                                              (line  10)
* mbfl_system_passwd_uid_to_name_var:    system passwd userid.
                                                              (line  11)
* mbfl_system_symbolic_to_octal_permissions: system file perms.
                                                              (line   6)
* mbfl_tar_archive_directory_to_file:    file commands tar.   (line  43)
* mbfl_tar_create_to_file:               file commands tar.   (line  36)
* mbfl_tar_create_to_stdout:             file commands tar.   (line  20)
* mbfl_tar_exec:                         file commands tar.   (line  16)
* mbfl_tar_extract_from_file:            file commands tar.   (line  31)
* mbfl_tar_extract_from_stdin:           file commands tar.   (line  26)
* mbfl_tar_list:                         file commands tar.   (line  47)
* mbfl_times_and_dates_enable:           times.               (line   6)
* mbfl_unset_option_debug:               getopts options.     (line 174)
* mbfl_unset_option_encoded_args:        getopts options.     (line 134)
* mbfl_unset_option_interactive:         getopts options.     (line 184)
* mbfl_unset_option_null:                getopts options.     (line 179)
* mbfl_unset_option_show_program:        getopts options.     (line 162)
* mbfl_unset_option_test:                getopts options.     (line 169)
* mbfl_unset_option_test <1>:            program testing.     (line  27)
* mbfl_unset_option_verbose:             getopts options.     (line 142)
* mbfl_unset_option_verbose_program:     getopts options.     (line 152)
* mbfl_unset_varref:                     preprocessor nameref unset.
                                                              (line   6)
* mbfl_variable_alloc:                   variables misc.      (line   6)
* mbfl_variable_array_to_colon_variable: variables colon.     (line  25)
* mbfl_variable_colon_variable_drop_duplicate: variables colon.
                                                              (line  36)
* mbfl_variable_colon_variable_to_array: variables colon.     (line   6)
* mbfl_variable_element_is_in_array:     variables arrays.    (line  17)
* mbfl_variable_find_in_array:           variables arrays.    (line   9)
* mbfl_wrong_num_args:                   getopts interface.   (line 155)
* mbfl_wrong_num_args_range:             getopts interface.   (line 162)
* open_session:                          sendmail plain.      (line  14)
* open_session <1>:                      sendmail connector.  (line  27)
* read_and_send_message:                 sendmail plain.      (line  47)
* recv:                                  sendmail plain.      (line  53)
* return_because_error_loading_library:  main exit.           (line  72)
* return_because_failure:                main exit.           (line  65)
* return_because_invalid_action_argument: actions misc.       (line  24)
* return_because_invalid_action_declaration: actions misc.    (line  16)
* return_because_invalid_action_set:     actions misc.        (line  20)
* return_because_invalid_function_name:  main misc.           (line  22)
* return_because_invalid_option_argument: getopts interface.  (line 193)
* return_because_invalid_option_declaration: getopts interface.
                                                              (line 189)
* return_because_invalid_sudo_username:  program executing.   (line 138)
* return_because_missing_action_function: actions misc.       (line  28)
* return_because_program_not_found:      program declaring.   (line  96)
* return_because_success:                main exit.           (line  57)
* return_because_wrong_num_args:         getopts interface.   (line 167)
* return_failure:                        main exit.           (line  66)
* return_success:                        main exit.           (line  58)
* script_after_parsing_options:          main function.       (line   6)
* script_before_parsing_options:         main function.       (line   6)
* send:                                  sendmail plain.      (line  39)
* send <1>:                              sendmail plain.      (line  40)
* send-mail-with-mbfl:                   sendmail script emacs send.
                                                              (line   6)
* sendmail-mbfl-activate:                sendmail script emacs misc.
                                                              (line   6)
* sendmail-mbfl-copy-message-buffer:     sendmail script emacs misc.
                                                              (line  29)
* sendmail-mbfl-delivery:                sendmail script emacs send.
                                                              (line  18)
* sendmail-mbfl-envelope-from:           sendmail script emacs insp.
                                                              (line   6)
* sendmail-mbfl-envelope-from/message:   sendmail script emacs insp.
                                                              (line   7)
* sendmail-mbfl-envelope-to:             sendmail script emacs insp.
                                                              (line  22)
* sendmail-mbfl-envelope-to/message:     sendmail script emacs insp.
                                                              (line  23)
* sendmail-mbfl-extract-addresses:       sendmail script emacs insp.
                                                              (line  38)
* sendmail-mbfl-hostname:                sendmail script emacs insp.
                                                              (line  44)
* sendmail-mbfl-hostname/message:        sendmail script emacs insp.
                                                              (line  45)
* sendmail-mbfl-normalise-message:       sendmail script emacs misc.
                                                              (line  10)
* sendmail-mbfl-post:                    sendmail script emacs send.
                                                              (line  26)
* sendmail-mbfl-prepare-message-for-mta: sendmail script emacs misc.
                                                              (line  23)
* sendmail-mbfl-username:                sendmail script emacs insp.
                                                              (line  59)
* sendmail-mbfl-username/message:        sendmail script emacs insp.
                                                              (line  60)


File: mbfl.info,  Node: variable index,  Prev: function index,  Up: Top

Appendix G An entry for each variable.
**************************************

 [index ]
* Menu:

* ARG1ST:                                main variables.      (line  17)
* ARGC:                                  main variables.      (line  29)
* ARGC1:                                 main variables.      (line  12)
* ARGV:                                  main variables.      (line  24)
* ARGV1:                                 main variables.      (line   8)
* mbfl_main_pending_EXIT_CODE:           main exit.           (line  15)
* mbfl_main_SCRIPT_FUNCTION:             main function.       (line  49)
* mbfl_program_BGPID:                    program executing.   (line 114)
* mbfl_split_PATH:                       program checking.    (line   9)
* script_AUTHOR:                         service variables.   (line  14)
* script_COPYRIGHT_YEARS:                service variables.   (line  18)
* script_DESCRIPTION:                    service variables.   (line  51)
* script_EXAMPLES:                       service variables.   (line  61)
* script_LICENSE:                        service variables.   (line  27)
* script_PROGNAME:                       service variables.   (line  10)
* script_USAGE:                          service variables.   (line  34)
* script_VERSION:                        service variables.   (line  22)
* sendmail-mbfl-auth-info:               sendmail script emacs vars.
                                                              (line  87)
* sendmail-mbfl-connector:               sendmail script emacs vars.
                                                              (line  94)
* sendmail-mbfl-envelope-from-function:  sendmail script emacs vars.
                                                              (line  19)
* sendmail-mbfl-envelope-to-function:    sendmail script emacs vars.
                                                              (line  32)
* sendmail-mbfl-extra-args:              sendmail script emacs vars.
                                                              (line  13)
* sendmail-mbfl-extract-addresses-function: sendmail script emacs vars.
                                                              (line  45)
* sendmail-mbfl-host-info:               sendmail script emacs vars.
                                                              (line  80)
* sendmail-mbfl-hostname-function:       sendmail script emacs vars.
                                                              (line  56)
* sendmail-mbfl-program:                 sendmail script emacs vars.
                                                              (line   9)
* sendmail-mbfl-timeout:                 sendmail script emacs vars.
                                                              (line 100)
* sendmail-mbfl-username-function:       sendmail script emacs vars.
                                                              (line  68)
* SPLITCOUNT:                            strings splitting.   (line  10)
* SPLITFIELD:                            strings splitting.   (line   6)
* TESTMATCH:                             testing running.     (line  40)
* TESTSTART:                             testing running.     (line  45)
* TESTSUCCESS:                           testing running.     (line  50)



Tag Table:
Node: Top1289
Node: overview4305
Node: overview quick6239
Node: overview reliable7108
Node: overview direct9353
Node: overview interactive11307
Node: overview rv12229
Node: overview notes15677
Node: preprocessor17697
Node: preprocessor invoking18954
Node: preprocessor quoting20721
Node: preprocessor defines21173
Node: preprocessor library21864
Node: preprocessor parameters22783
Node: preprocessor arguments26462
Node: preprocessor nameref27038
Node: preprocessor nameref access28733
Node: preprocessor nameref full29484
Node: preprocessor nameref partial31711
Node: preprocessor nameref special32654
Node: preprocessor nameref unset33988
Node: preprocessor strings34591
Node: preprocessor arrays35187
Node: service variables35872
Node: base39649
Node: encoding40232
Node: file41961
Node: file names42508
Node: file names parts42857
Node: file names path51448
Node: file names system53713
Node: file commands54755
Node: file commands listing55572
Node: file commands stat56907
Node: file commands mkdir58176
Node: file commands copy59302
Node: file commands move60568
Node: file commands removing61727
Node: file commands symlink63678
Node: file commands realpath64451
Node: file commands tar65272
Node: file commands perms67541
Node: file commands owner68760
Node: file commands compress70846
Node: file testing72955
Node: file read and write76239
Node: file misc77391
Node: fd77780
Node: fd open78151
Node: fd close80661
Node: fd dup80863
Node: fd move82598
Node: actions83543
Node: actions intro84084
Node: actions declare94746
Node: actions dispatch96883
Node: actions inspect98653
Node: actions misc99148
Node: getopts100258
Node: getopts arguments100937
Node: getopts usage102619
Node: getopts options106365
Node: getopts interface114010
Node: message121514
Node: message config122202
Node: message plain122814
Node: message format125110
Node: program126874
Node: program testing127310
Node: program checking128625
Node: program executing130913
Node: program declaring138634
Node: interfaces142729
Node: interfaces at142958
Node: signal146057
Node: strings146860
Node: strings quote147395
Node: strings inspection149086
Node: strings splitting154481
Node: strings case157280
Node: strings class158163
Node: strings comparison161233
Node: strings misc164766
Node: dialog167689
Node: times168882
Node: times raw169399
Node: times current169832
Node: times special170849
Node: variables171534
Node: variables arrays171854
Node: variables colon172538
Node: variables misc173873
Node: arrays174529
Node: system175650
Node: system passwd176378
Node: system passwd reading176879
Node: system passwd printing177518
Node: system passwd searching178631
Node: system passwd inspect180228
Node: system passwd userid183111
Node: system group185309
Node: system group reading185851
Node: system group printing186489
Node: system group searching187468
Node: system group inspect189078
Node: system group groupid192800
Node: system file perms194999
Node: atexit195441
Node: locations196851
Node: locations example1198442
Node: locations example2199148
Node: locations example3200189
Node: main201282
Node: main variables201912
Node: main function203156
Node: main exit205832
Node: main misc208533
Node: testing209701
Ref: testing-Footnote-1210956
Node: testing intro211100
Node: testing shell213435
Node: testing config215208
Node: testing running217033
Node: testing compare219157
Node: testing output220118
Node: testing messages221111
Node: testing files221633
Node: testing files directories222343
Node: testing files files223713
Node: testing files examples225446
Node: sendmail226064
Node: sendmail message227232
Node: sendmail plain231565
Node: sendmail connector239069
Node: sendmail gnutls250795
Node: sendmail gnutls now252397
Node: sendmail gnutls delay256418
Node: sendmail openssl260468
Node: sendmail openssl now262040
Node: sendmail openssl delay262482
Node: sendmail script263010
Node: sendmail script examples263717
Node: sendmail script invoking266032
Node: sendmail script hostinfo268755
Node: sendmail script authinfo271645
Node: sendmail script emacs273286
Node: sendmail script emacs vars274237
Node: sendmail script emacs send278666
Node: sendmail script emacs insp280246
Node: sendmail script emacs misc283587
Node: Package License285137
Node: Documentation License293604
Node: references318748
Node: concept index319456
Node: function index334317
Node: variable index382980

End Tag Table
